"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
"""
import asyncio
import asyncpg
from sqlalchemy.ext.asyncio import create_async_engine
import os
from dotenv import load_dotenv

load_dotenv()


async def test_direct_connection():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ asyncpg"""
    print("üîç –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL
        db_url = os.getenv("DATABASE_URL", "postgresql://postgres:postgres@localhost:5432/astrotarot")
        
        # –ü–∞—Ä—Å–∏–º URL –¥–ª—è asyncpg
        if db_url.startswith("postgresql+asyncpg://"):
            db_url = db_url.replace("postgresql+asyncpg://", "postgresql://")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        conn = await asyncpg.connect(db_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
        version = await conn.fetchval('SELECT version()')
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   PostgreSQL –≤–µ—Ä—Å–∏—è: {version}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        """)
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


async def test_sqlalchemy_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ SQLAlchemy"""
    print("\nüîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ SQLAlchemy...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL
        db_url = os.getenv("DATABASE_URL")
        if not db_url.startswith("postgresql+asyncpg://"):
            db_url = db_url.replace("postgresql://", "postgresql+asyncpg://")
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
        engine = create_async_engine(db_url, echo=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with engine.connect() as conn:
            from sqlalchemy import text
            result = await conn.execute(text("SELECT 1"))
            print("‚úÖ SQLAlchemy –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        await engine.dispose()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SQLAlchemy: {e}")
        return False


async def main():
    print("=" * 60)
    print("–¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ —Å–ø–æ—Å–æ–±–∞
    direct_ok = await test_direct_connection()
    sqlalchemy_ok = await test_sqlalchemy_connection()
    
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 60)
    print(f"–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (asyncpg): {'‚úÖ OK' if direct_ok else '‚ùå FAIL'}")
    print(f"SQLAlchemy –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ OK' if sqlalchemy_ok else '‚ùå FAIL'}")
    

if __name__ == "__main__":
    asyncio.run(main())
