"""
–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
- –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —á–∞—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import Optional, List, Dict, Any
from datetime import datetime, time
from enum import Enum

from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from .base import (
    BaseKeyboard, ReplyKeyboard, InlineKeyboard,
    ButtonStyle, ButtonConfig, MenuCallbackData,
    BaseCallbackData
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class MainMenuSection(Enum):
    """–°–µ–∫—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    TAROT = "tarot"
    ASTROLOGY = "astrology"
    SUBSCRIPTION = "subscription"
    PROFILE = "profile"
    HELP = "help"
    SETTINGS = "settings"
    ADMIN = "admin"


class QuickActionType(Enum):
    """–¢–∏–ø—ã –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
    DAILY_CARD = "daily_card"
    DAILY_HOROSCOPE = "daily_horoscope"
    QUICK_SPREAD = "quick_spread"
    MOON_PHASE = "moon_phase"


class MainMenuCallbackData(BaseCallbackData, prefix="main"):
    """Callback data –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    section: str
    subsection: Optional[str] = None


class QuickActionCallbackData(BaseCallbackData, prefix="quick"):
    """Callback data –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
    action_type: str
    extra: Optional[str] = None


class MainMenuKeyboard(ReplyKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    def __init__(
            self,
            user_subscription: Optional[str] = None,
            is_admin: bool = False,
            show_notifications: bool = True,
            user_name: Optional[str] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

        Args:
            user_subscription: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_admin: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            show_notifications: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        super().__init__(resize_keyboard=True, one_time_keyboard=False)
        self.user_subscription = user_subscription or "free"
        self.is_admin = is_admin
        self.show_notifications = show_notifications
        self.user_name = user_name

        logger.debug(
            f"–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: –ø–æ–¥–ø–∏—Å–∫–∞={user_subscription}, "
            f"–∞–¥–º–∏–Ω={is_admin}, –∏–º—è={user_name}"
        )

    async def build(self, **kwargs) -> ReplyKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        self._add_main_sections()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if self.user_subscription in ["basic", "premium", "vip"]:
            self._add_subscriber_sections()

        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        if self.is_admin:
            self._add_admin_section()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
        self._adjust_layout()

        return await super().build(**kwargs)

    def _add_main_sections(self) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é."""
        # –¢–∞—Ä–æ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã –¥–Ω—è
        tarot_text = "üé¥ –¢–∞—Ä–æ"
        if self.show_notifications and self._has_new_daily_card():
            tarot_text += " üî¥"
        self.add_button(tarot_text)

        # –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è
        astro_text = "üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è"
        if self.show_notifications and self._has_astrological_event():
            astro_text += " ‚ú®"
        self.add_button(astro_text)

        # –ü–æ–¥–ø–∏—Å–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è
        subscription_emoji = self._get_subscription_emoji()
        self.add_button(f"{subscription_emoji} –ü–æ–¥–ø–∏—Å–∫–∞")

        # –ü—Ä–æ—Ñ–∏–ª—å
        self.add_button("üë§ –ü—Ä–æ—Ñ–∏–ª—å")

        # –ü–æ–º–æ—â—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.add_button("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
        self.add_button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    def _add_subscriber_sections(self) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
        if self.user_subscription in ["premium", "vip"]:
            # –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–º–∏—É–º
            self.add_button("‚≠ê –≠–∫—Å–∫–ª—é–∑–∏–≤")

        if self.user_subscription == "vip":
            # VIP —Ñ—É–Ω–∫—Ü–∏–∏
            self.add_button("üëë VIP –ó–æ–Ω–∞")

    def _add_admin_section(self) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω-—Ä–∞–∑–¥–µ–ª."""
        self.add_button("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

    def _adjust_layout(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫."""
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞ 2x3
        self.builder.adjust(2, 2, 2)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä—è–¥–∞—Ö
        if self.user_subscription in ["premium", "vip"]:
            if self.user_subscription == "vip" and self.is_admin:
                # VIP + Admin –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
                self.builder.adjust(2, 2, 2, 2, 2)
            else:
                # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥ –¥–ª—è –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π
                self.builder.adjust(2, 2, 2, 1)

    def _get_subscription_emoji(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏."""
        emojis = {
            "free": "üí≥",
            "basic": "ü•â",
            "premium": "ü•à",
            "vip": "ü•á"
        }
        return emojis.get(self.user_subscription, "üí≥")

    def _has_new_daily_card(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–Ω—è."""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ –ë–î
        # –°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        current_hour = datetime.now().hour
        return 6 <= current_hour <= 10  # –£—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã

    def _has_astrological_event(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –≤–∞–∂–Ω–æ–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ."""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ, —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π –∏ —Ç.–¥.
        return False


class QuickActionsKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""

    def __init__(
            self,
            user_subscription: str = "free",
            current_context: Optional[str] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.

        Args:
            user_subscription: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
            current_context: –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (tarot/astrology)
        """
        super().__init__()
        self.user_subscription = user_subscription
        self.current_context = current_context

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
        # –ö–∞—Ä—Ç–∞ –¥–Ω—è - –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
        self.add_button(
            text="üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è",
            callback_data=QuickActionCallbackData(
                action="execute",
                value=QuickActionType.DAILY_CARD.value
            )
        )

        # –ì–æ—Ä–æ—Å–∫–æ–ø –¥–Ω—è - –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º
        self.add_button(
            text="‚≠ê –ì–æ—Ä–æ—Å–∫–æ–ø –¥–Ω—è",
            callback_data=QuickActionCallbackData(
                action="execute",
                value=QuickActionType.DAILY_HOROSCOPE.value
            )
        )

        # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å–∫–ª–∞–¥ - –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if self.user_subscription != "free":
            self.add_button(
                text="üîÆ –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å–∫–ª–∞–¥",
                callback_data=QuickActionCallbackData(
                    action="execute",
                    value=QuickActionType.QUICK_SPREAD.value
                )
            )

        # –§–∞–∑–∞ –ª—É–Ω—ã - –¥–ª—è –ø—Ä–µ–º–∏—É–º
        if self.user_subscription in ["premium", "vip"]:
            self.add_button(
                text="üåô –§–∞–∑–∞ –ª—É–Ω—ã",
                callback_data=QuickActionCallbackData(
                    action="execute",
                    value=QuickActionType.MOON_PHASE.value
                )
            )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        if self.user_subscription == "free":
            self.builder.adjust(2)
        else:
            self.builder.adjust(2, 2)

        return await super().build(**kwargs)


class SectionMenuKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤."""

    def __init__(
            self,
            section: MainMenuSection,
            user_subscription: str = "free"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞.

        Args:
            section: –†–∞–∑–¥–µ–ª –º–µ–Ω—é
            user_subscription: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
        """
        super().__init__()
        self.section = section
        self.user_subscription = user_subscription

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞."""
        if self.section == MainMenuSection.TAROT:
            await self._build_tarot_menu()
        elif self.section == MainMenuSection.ASTROLOGY:
            await self._build_astrology_menu()
        elif self.section == MainMenuSection.SUBSCRIPTION:
            await self._build_subscription_menu()
        elif self.section == MainMenuSection.PROFILE:
            await self._build_profile_menu()
        elif self.section == MainMenuSection.SETTINGS:
            await self._build_settings_menu()

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        self.add_back_button("main_menu")

        return await super().build(**kwargs)

    async def _build_tarot_menu(self) -> None:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –¢–∞—Ä–æ."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self.add_button(
            text="üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="daily_card"
            )
        )

        self.add_button(
            text="üîÆ –†–∞—Å–∫–ª–∞–¥—ã",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="spreads"
            )
        )

        # –ò—Å—Ç–æ—Ä–∏—è - –¥–ª—è –≤—Å–µ—Ö
        self.add_button(
            text="üìö –ò—Å—Ç–æ—Ä–∏—è",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="history"
            )
        )

        # –û–±—É—á–µ–Ω–∏–µ - –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if self.user_subscription != "free":
            self.add_button(
                text="üéì –û–±—É—á–µ–Ω–∏–µ",
                callback_data=MainMenuCallbackData(
                    action="select",
                    value=self.section.value,
                    page="learning"
                )
            )

        # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ - –¥–ª—è –ø—Ä–µ–º–∏—É–º
        if self.user_subscription in ["premium", "vip"]:
            self.add_button(
                text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data=MainMenuCallbackData(
                    action="select",
                    value=self.section.value,
                    page="favorites"
                )
            )

        self.builder.adjust(2)

    async def _build_astrology_menu(self) -> None:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
        # –ì–æ—Ä–æ—Å–∫–æ–ø - –¥–ª—è –≤—Å–µ—Ö
        self.add_button(
            text="üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="horoscope"
            )
        )

        # –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ - –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if self.user_subscription != "free":
            self.add_button(
                text="üó∫ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞",
                callback_data=MainMenuCallbackData(
                    action="select",
                    value=self.section.value,
                    page="natal_chart"
                )
            )

        # –¢—Ä–∞–Ω–∑–∏—Ç—ã - –¥–ª—è –ø—Ä–µ–º–∏—É–º
        if self.user_subscription in ["premium", "vip"]:
            self.add_button(
                text="üåå –¢—Ä–∞–Ω–∑–∏—Ç—ã",
                callback_data=MainMenuCallbackData(
                    action="select",
                    value=self.section.value,
                    page="transits"
                )
            )

            self.add_button(
                text="üíë –°–∏–Ω–∞—Å—Ç—Ä–∏—è",
                callback_data=MainMenuCallbackData(
                    action="select",
                    value=self.section.value,
                    page="synastry"
                )
            )

        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å - –¥–ª—è VIP
        if self.user_subscription == "vip":
            self.add_button(
                text="üìÜ –õ–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                callback_data=MainMenuCallbackData(
                    action="select",
                    value=self.section.value,
                    page="personal_calendar"
                )
            )

        self.builder.adjust(2)

    async def _build_subscription_menu(self) -> None:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏."""
        self.add_button(
            text="üíé –¢–∞—Ä–∏—Ñ—ã",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="plans"
            )
        )

        if self.user_subscription != "free":
            self.add_button(
                text="üìä –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞",
                callback_data=MainMenuCallbackData(
                    action="select",
                    value=self.section.value,
                    page="my_subscription"
                )
            )

            self.add_button(
                text="üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã",
                callback_data=MainMenuCallbackData(
                    action="select",
                    value=self.section.value,
                    page="payment_methods"
                )
            )

        self.add_button(
            text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="promo"
            )
        )

        self.builder.adjust(2)

    async def _build_profile_menu(self) -> None:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."""
        self.add_button(
            text="üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="my_data"
            )
        )

        self.add_button(
            text="üéÇ –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="birth_data"
            )
        )

        self.add_button(
            text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="statistics"
            )
        )

        if self.user_subscription != "free":
            self.add_button(
                text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                callback_data=MainMenuCallbackData(
                    action="select",
                    value=self.section.value,
                    page="achievements"
                )
            )

        self.builder.adjust(2)

    async def _build_settings_menu(self) -> None:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        self.add_button(
            text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="notifications"
            )
        )

        self.add_button(
            text="üåç –Ø–∑—ã–∫",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="language"
            )
        )

        self.add_button(
            text="üé® –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="theme"
            )
        )

        self.add_button(
            text="üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
            callback_data=MainMenuCallbackData(
                action="select",
                value=self.section.value,
                page="privacy"
            )
        )

        self.builder.adjust(2)


class WelcomeKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    def __init__(self, user_name: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

        Args:
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        super().__init__()
        self.user_name = user_name

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {self.user_name}! üëã" if self.user_name else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã"

        # –ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
        self.add_button(
            text="üöÄ –ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ",
            callback_data="welcome:start"
        )

        # –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
        self.add_button(
            text="‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç",
            callback_data="welcome:quick_start"
        )

        # –û –±–æ—Ç–µ
        self.add_button(
            text="‚ÑπÔ∏è –û –±–æ—Ç–µ",
            callback_data="welcome:about"
        )

        # –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥
        self.add_button(
            text="üéÅ –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
            callback_data="welcome:promo"
        )

        self.builder.adjust(1, 2, 1)

        return await super().build(**kwargs)


class TimeBasedGreetingKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫."""

    def __init__(self, user_name: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º.

        Args:
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        super().__init__()
        self.user_name = user_name
        self.current_hour = datetime.now().hour

    def _get_time_greeting(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫."""
        if 5 <= self.current_hour < 12:
            return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        elif 12 <= self.current_hour < 17:
            return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
        elif 17 <= self.current_hour < 22:
            return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        else:
            return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"

    def _get_time_suggestion(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏."""
        if 6 <= self.current_hour < 10:
            return {
                "text": "‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è –∫–∞—Ä—Ç–∞",
                "action": "morning_card"
            }
        elif 12 <= self.current_hour < 14:
            return {
                "text": "üåû –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑",
                "action": "day_forecast"
            }
        elif 18 <= self.current_hour < 21:
            return {
                "text": "üåô –í–µ—á–µ—Ä–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è",
                "action": "evening_meditation"
            }
        elif 21 <= self.current_hour < 24:
            return {
                "text": "‚ú® –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
                "action": "tomorrow_spread"
            }
        else:
            return {
                "text": "üîÆ –ù–æ—á–Ω–æ–π –æ—Ä–∞–∫—É–ª",
                "action": "night_oracle"
            }

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º."""
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        suggestion = self._get_time_suggestion()
        self.add_button(
            text=suggestion["text"],
            callback_data=f"time_action:{suggestion['action']}"
        )

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self.add_button(
            text="üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è",
            callback_data="quick:daily_card"
        )

        self.add_button(
            text="‚≠ê –ì–æ—Ä–æ—Å–∫–æ–ø",
            callback_data="quick:horoscope"
        )

        self.builder.adjust(1, 2)

        return await super().build(**kwargs)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
async def get_main_menu(
        user_subscription: str = "free",
        is_admin: bool = False,
        user_name: Optional[str] = None
) -> ReplyKeyboardMarkup:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        user_subscription: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
        is_admin: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    keyboard = MainMenuKeyboard(
        user_subscription=user_subscription,
        is_admin=is_admin,
        user_name=user_name
    )
    return await keyboard.build()


async def get_section_menu(
        section: MainMenuSection,
        user_subscription: str = "free"
) -> InlineKeyboardMarkup:
    """
    –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞.

    Args:
        section: –†–∞–∑–¥–µ–ª –º–µ–Ω—é
        user_subscription: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞
    """
    keyboard = SectionMenuKeyboard(section, user_subscription)
    return await keyboard.build()


async def get_welcome_keyboard(user_name: Optional[str] = None) -> InlineKeyboardMarkup:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    Args:
        user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = WelcomeKeyboard(user_name)
    return await keyboard.build()


logger.info("–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω")