"""
–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
- –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è–º–∏
- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏–Ω–∞—Å—Ç—Ä–∏–∏
- –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import List, Optional, Dict, Any, Tuple
from datetime import datetime, date, time
from enum import Enum
import calendar

from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup
from aiogram.filters.callback_data import CallbackData

from .base import (
    InlineKeyboard, ReplyKeyboard, PaginatedKeyboard,
    ButtonConfig, ButtonStyle
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class AstrologySection(Enum):
    """–†–∞–∑–¥–µ–ª—ã –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
    HOROSCOPE = "horoscope"
    NATAL_CHART = "natal_chart"
    TRANSITS = "transits"
    PROGRESSIONS = "progressions"
    SYNASTRY = "synastry"
    SOLAR_RETURN = "solar_return"
    LUNAR_CALENDAR = "lunar_calendar"
    EPHEMERIS = "ephemeris"


class HoroscopeType(Enum):
    """–¢–∏–ø—ã –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤."""
    DAILY = "daily"
    WEEKLY = "weekly"
    MONTHLY = "monthly"
    YEARLY = "yearly"
    LOVE = "love"
    CAREER = "career"
    HEALTH = "health"
    PERSONAL = "personal"


class HouseSystem(Enum):
    """–°–∏—Å—Ç–µ–º—ã –¥–æ–º–æ–≤."""
    PLACIDUS = "placidus"
    KOCH = "koch"
    EQUAL = "equal"
    WHOLE_SIGN = "whole_sign"
    REGIOMONTANUS = "regiomontanus"
    CAMPANUS = "campanus"


class AspectType(Enum):
    """–¢–∏–ø—ã –∞—Å–ø–µ–∫—Ç–æ–≤."""
    MAJOR = "major"  # –û—Å–Ω–æ–≤–Ω—ã–µ
    MINOR = "minor"  # –ú–∏–Ω–æ—Ä–Ω—ã–µ
    ALL = "all"  # –í—Å–µ


class PlanetSet(Enum):
    """–ù–∞–±–æ—Ä—ã –ø–ª–∞–Ω–µ—Ç."""
    BASIC = "basic"  # –°–æ–ª–Ω—Ü–µ-–ú–∞—Ä—Å
    STANDARD = "standard"  # + —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ
    EXTENDED = "extended"  # + –≤—ã—Å—à–∏–µ
    FULL = "full"  # + –∞—Å—Ç–µ—Ä–æ–∏–¥—ã –∏ —Ç–æ—á–∫–∏


# Callback Data –∫–ª–∞—Å—Å—ã
class AstrologyCallbackData(CallbackData, prefix="astro"):
    """–û—Å–Ω–æ–≤–Ω–æ–π callback –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
    action: str
    section: Optional[str] = None
    value: Optional[str] = None
    extra: Optional[str] = None


class BirthDataCallbackData(CallbackData, prefix="birth"):
    """Callback –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è."""
    action: str  # set_date, set_time, set_place, confirm
    field: Optional[str] = None
    value: Optional[str] = None


class ChartCallbackData(CallbackData, prefix="chart"):
    """Callback –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã."""
    action: str  # generate, settings, aspect, planet
    chart_type: Optional[str] = None
    value: Optional[str] = None


class TransitCallbackData(CallbackData, prefix="transit"):
    """Callback –¥–ª—è —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤."""
    action: str  # show, period, planet, aspect
    period: Optional[str] = None
    planet: Optional[int] = None


class CalendarCallbackData(CallbackData, prefix="calendar"):
    """Callback –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    action: str  # navigate, select
    year: int
    month: int
    day: Optional[int] = None


class BirthDataKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è."""

    def __init__(
            self,
            current_data: Optional[Dict[str, Any]] = None,
            editing_field: Optional[str] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.

        Args:
            current_data: –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            editing_field: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ
        """
        super().__init__()
        self.current_data = current_data or {}
        self.editing_field = editing_field

        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–ª–µ: {editing_field}")

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        if self.editing_field:
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
            if self.editing_field == "date":
                await self._build_date_input()
            elif self.editing_field == "time":
                await self._build_time_input()
            elif self.editing_field == "place":
                await self._build_place_input()
        else:
            # –û–±—â–∏–π –≤–∏–¥ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await self._build_summary()

        return await super().build(**kwargs)

    async def _build_summary(self) -> None:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö."""
        # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        date_text = "üìÖ –î–∞—Ç–∞: "
        if "birth_date" in self.current_data:
            date_obj = self.current_data["birth_date"]
            date_text += date_obj.strftime("%d.%m.%Y")
        else:
            date_text += "–ù–µ —É–∫–∞–∑–∞–Ω–∞ ‚ùó"

        self.add_button(
            text=date_text,
            callback_data=BirthDataCallbackData(
                action="edit",
                field="date"
            )
        )

        # –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
        time_text = "‚è∞ –í—Ä–µ–º—è: "
        if "birth_time" in self.current_data:
            time_obj = self.current_data["birth_time"]
            time_text += time_obj.strftime("%H:%M")
            if self.current_data.get("time_unknown"):
                time_text += " (–Ω–µ—Ç–æ—á–Ω–æ–µ)"
        else:
            time_text += "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        self.add_button(
            text=time_text,
            callback_data=BirthDataCallbackData(
                action="edit",
                field="time"
            )
        )

        # –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è
        place_text = "üìç –ú–µ—Å—Ç–æ: "
        if "birth_place" in self.current_data:
            place_text += self.current_data["birth_place"]["name"]
        else:
            place_text += "–ù–µ —É–∫–∞–∑–∞–Ω–æ ‚ùó"

        self.add_button(
            text=place_text,
            callback_data=BirthDataCallbackData(
                action="edit",
                field="place"
            )
        )

        self.builder.adjust(1)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        if self._is_data_complete():
            self.add_button(
                text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                callback_data=BirthDataCallbackData(
                    action="confirm"
                )
            )

            self.add_button(
                text="üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç—É",
                callback_data=ChartCallbackData(
                    action="generate",
                    chart_type="natal"
                )
            )

            self.builder.adjust(1, 1, 1, 2)
        else:
            self.add_button(
                text="‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
                callback_data="noop"
            )
            self.builder.adjust(1, 1, 1, 1)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        self.add_button(
            text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: " + self.current_data.get("timezone", "UTC"),
            callback_data=BirthDataCallbackData(
                action="edit",
                field="timezone"
            )
        )

        self.add_back_button("astro:main")

    async def _build_date_input(self) -> None:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        today = date.today()
        selected_date = self.current_data.get("birth_date", today)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.add_button(
            text=f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è",
            callback_data="noop"
        )

        # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –≥–æ–¥–∞
        current_year = selected_date.year
        year_buttons = []

        # –î–µ–∫–∞–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        for decade_start in range(1920, 2030, 10):
            if decade_start <= current_year < decade_start + 10:
                text = f"[{decade_start}s]"
            else:
                text = f"{decade_start}s"

            year_buttons.append((text, decade_start))

        for text, year in year_buttons[-6:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –¥–µ–∫–∞–¥
            self.add_button(
                text=text,
                callback_data=f"birth:year:{year}"
            )

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥–∞–º
        self.add_button(
            text="‚óÄÔ∏è",
            callback_data=f"birth:year:{current_year - 1}"
        )

        self.add_button(
            text=str(current_year),
            callback_data="noop"
        )

        self.add_button(
            text="‚ñ∂Ô∏è",
            callback_data=f"birth:year:{current_year + 1}"
        )

        # –ú–µ—Å—è—Ü—ã
        months = [
            "–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω",
            "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"
        ]

        for i, month_name in enumerate(months, 1):
            style = "[{}]" if selected_date.month == i else "{}"
            self.add_button(
                text=style.format(month_name),
                callback_data=f"birth:month:{i}"
            )

        # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –¥–Ω–µ–π
        cal = calendar.monthcalendar(current_year, selected_date.month)

        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        for day_name in weekdays:
            self.add_button(text=day_name, callback_data="noop")

        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        for week in cal:
            for day in week:
                if day == 0:
                    self.add_button(text=" ", callback_data="noop")
                else:
                    if day == selected_date.day:
                        text = f"[{day}]"
                    else:
                        text = str(day)

                    self.add_button(
                        text=text,
                        callback_data=BirthDataCallbackData(
                            action="set_date",
                            value=f"{current_year}-{selected_date.month:02d}-{day:02d}"
                        )
                    )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.builder.adjust(
            1,  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            6,  # –î–µ–∫–∞–¥—ã
            3,  # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥–∞–º
            6, 6,  # –ú–µ—Å—è—Ü—ã
            7,  # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
            *([7] * len(cal))  # –ù–µ–¥–µ–ª–∏
        )

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.add_button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=BirthDataCallbackData(action="cancel")
        )

        if "birth_date" in self.current_data:
            self.add_button(
                text="‚úÖ –ì–æ—Ç–æ–≤–æ",
                callback_data=BirthDataCallbackData(action="back")
            )

    async def _build_time_input(self) -> None:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏."""
        current_time = self.current_data.get("birth_time", time(12, 0))

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.add_button(
            text=f"‚è∞ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {current_time.strftime('%H:%M')}",
            callback_data="noop"
        )

        # –ß–∞—Å—ã
        self.add_button(text="–ß–∞—Å—ã:", callback_data="noop")

        for h in range(0, 24, 3):
            hour_range = f"{h:02d}-{h + 2:02d}"
            if h <= current_time.hour < h + 3:
                hour_range = f"[{hour_range}]"

            self.add_button(
                text=hour_range,
                callback_data=f"birth:hour_range:{h}"
            )

        # –¢–æ—á–Ω—ã–π –≤—ã–±–æ—Ä —á–∞—Å–∞
        start_hour = (current_time.hour // 3) * 3
        for h in range(start_hour, min(start_hour + 3, 24)):
            text = f"{h:02d}"
            if h == current_time.hour:
                text = f"[{text}]"

            self.add_button(
                text=text,
                callback_data=f"birth:hour:{h}"
            )

        # –ú–∏–Ω—É—Ç—ã
        self.add_button(text="–ú–∏–Ω—É—Ç—ã:", callback_data="noop")

        for m in range(0, 60, 15):
            text = f":{m:02d}"
            if m <= current_time.minute < m + 15:
                text = f"[{text}]"

            self.add_button(
                text=text,
                callback_data=f"birth:minute_range:{m}"
            )

        # –¢–æ—á–Ω—ã–π –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç
        start_min = (current_time.minute // 15) * 15
        for m in range(start_min, min(start_min + 15, 60), 5):
            text = f":{m:02d}"
            if m == current_time.minute:
                text = f"[{text}]"

            self.add_button(
                text=text,
                callback_data=f"birth:minute:{m}"
            )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.builder.adjust(
            1,  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            1, 8,  # –ß–∞—Å—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            3,  # –¢–æ—á–Ω—ã–µ —á–∞—Å—ã
            1, 4,  # –ú–∏–Ω—É—Ç—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            3  # –¢–æ—á–Ω—ã–µ –º–∏–Ω—É—Ç—ã
        )

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        self.add_button(
            text="ü§∑ –í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            callback_data=BirthDataCallbackData(
                action="time_unknown"
            )
        )

        self.add_button(
            text="üåÖ –í–æ—Å—Ö–æ–¥ (~6:00)",
            callback_data=BirthDataCallbackData(
                action="set_time",
                value="06:00"
            )
        )

        self.add_button(
            text="‚òÄÔ∏è –ü–æ–ª–¥–µ–Ω—å (12:00)",
            callback_data=BirthDataCallbackData(
                action="set_time",
                value="12:00"
            )
        )

        self.add_button(
            text="üåá –ó–∞–∫–∞—Ç (~18:00)",
            callback_data=BirthDataCallbackData(
                action="set_time",
                value="18:00"
            )
        )

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.add_button(
            text="‚úÖ –ì–æ—Ç–æ–≤–æ",
            callback_data=BirthDataCallbackData(action="back")
        )

        self.builder.adjust(
            1, 8, 3, 1, 4, 3,  # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞
            1, 3,  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            1  # –ì–æ—Ç–æ–≤–æ
        )

    async def _build_place_input(self) -> None:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–≤–æ–¥ –º–µ—Å—Ç–∞."""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ API
        # –°–µ–π—á–∞—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞

        self.add_button(
            text="üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
            callback_data="noop"
        )

        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏
        cities = [
            ("–ú–æ—Å–∫–≤–∞", "55.7558", "37.6173"),
            ("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "59.9311", "30.3609"),
            ("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "55.0084", "82.9357"),
            ("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "56.8389", "60.6057"),
            ("–ö–∞–∑–∞–Ω—å", "55.8304", "49.0661"),
            ("–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "56.2965", "43.9361"),
            ("–ß–µ–ª—è–±–∏–Ω—Å–∫", "55.1644", "61.4368"),
            ("–°–∞–º–∞—Ä–∞", "53.2415", "50.2212"),
            ("–û–º—Å–∫", "54.9885", "73.3242"),
            ("–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "47.2357", "39.7015")
        ]

        for city_name, lat, lon in cities:
            self.add_button(
                text=f"üìç {city_name}",
                callback_data=BirthDataCallbackData(
                    action="set_place",
                    value=f"{city_name}|{lat}|{lon}"
                )
            )

        self.builder.adjust(1, 2, 2, 2, 2, 2)

        # –í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Ä—É—á–Ω—É—é
        self.add_button(
            text="üåç –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
            callback_data=BirthDataCallbackData(
                action="input_coords"
            )
        )

        self.add_button(
            text="üó∫ –í—ã–±—Ä–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
            callback_data=BirthDataCallbackData(
                action="map_select"
            )
        )

        self.add_back_button(
            BirthDataCallbackData(action="back").pack()
        )

    def _is_data_complete(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö."""
        required = ["birth_date", "birth_place"]
        return all(field in self.current_data for field in required)


class HoroscopeMenuKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤."""

    def __init__(
            self,
            user_subscription: str = "free",
            has_birth_data: bool = False
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤.

        Args:
            user_subscription: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
            has_birth_data: –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è
        """
        super().__init__()
        self.user_subscription = user_subscription
        self.has_birth_data = has_birth_data

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤."""
        # –û–±—â–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã - –¥–ª—è –≤—Å–µ—Ö
        self.add_button(
            text="üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è",
            callback_data=AstrologyCallbackData(
                action="horoscope",
                section=HoroscopeType.DAILY.value
            )
        )

        self.add_button(
            text="üìÜ –ù–∞ –Ω–µ–¥–µ–ª—é",
            callback_data=AstrologyCallbackData(
                action="horoscope",
                section=HoroscopeType.WEEKLY.value
            )
        )

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ - –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if self.user_subscription != "free":
            self.add_button(
                text="üóì –ù–∞ –º–µ—Å—è—Ü",
                callback_data=AstrologyCallbackData(
                    action="horoscope",
                    section=HoroscopeType.MONTHLY.value
                )
            )

            self.add_button(
                text="üéÜ –ù–∞ –≥–æ–¥",
                callback_data=AstrologyCallbackData(
                    action="horoscope",
                    section=HoroscopeType.YEARLY.value
                )
            )

        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ - –¥–ª—è –ø—Ä–µ–º–∏—É–º
        if self.user_subscription in ["premium", "vip"]:
            self.add_button(
                text="üíï –õ—é–±–æ–≤–Ω—ã–π",
                callback_data=AstrologyCallbackData(
                    action="horoscope",
                    section=HoroscopeType.LOVE.value
                )
            )

            self.add_button(
                text="üíº –î–µ–ª–æ–≤–æ–π",
                callback_data=AstrologyCallbackData(
                    action="horoscope",
                    section=HoroscopeType.CAREER.value
                )
            )

        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π - –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if self.has_birth_data and self.user_subscription != "free":
            self.add_button(
                text="‚≠ê –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π",
                callback_data=AstrologyCallbackData(
                    action="horoscope",
                    section=HoroscopeType.PERSONAL.value
                )
            )
        elif not self.has_birth_data:
            self.add_button(
                text="üîí –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π (–Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ)",
                callback_data=BirthDataCallbackData(action="request")
            )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        if self.user_subscription == "free":
            self.builder.adjust(2, 1)
        elif self.user_subscription == "basic":
            self.builder.adjust(2, 2, 1)
        else:
            self.builder.adjust(2, 2, 2, 1)

        self.add_back_button("astro:main")

        return await super().build(**kwargs)


class NatalChartKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã."""

    def __init__(
            self,
            has_chart: bool = False,
            chart_settings: Optional[Dict[str, Any]] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.

        Args:
            has_chart: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–∞
            chart_settings: –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        super().__init__()
        self.has_chart = has_chart
        self.chart_settings = chart_settings or {
            "house_system": HouseSystem.PLACIDUS,
            "planet_set": PlanetSet.STANDARD,
            "aspect_type": AspectType.MAJOR
        }

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        if not self.has_chart:
            # –ö–∞—Ä—Ç–∞ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞
            self.add_button(
                text="üîÆ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É",
                callback_data=ChartCallbackData(
                    action="generate",
                    chart_type="natal"
                )
            )

            self.add_button(
                text="üìù –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è",
                callback_data=BirthDataCallbackData(action="request")
            )
        else:
            # –ö–∞—Ä—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏
            self.add_button(
                text="üìä –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑",
                callback_data=ChartCallbackData(
                    action="analyze",
                    chart_type="general"
                )
            )

            self.add_button(
                text="ü™ê –ü–ª–∞–Ω–µ—Ç—ã –≤ –∑–Ω–∞–∫–∞—Ö",
                callback_data=ChartCallbackData(
                    action="planets",
                    chart_type="signs"
                )
            )

            self.add_button(
                text="üè† –ü–ª–∞–Ω–µ—Ç—ã –≤ –¥–æ–º–∞—Ö",
                callback_data=ChartCallbackData(
                    action="planets",
                    chart_type="houses"
                )
            )

            self.add_button(
                text="üìê –ê—Å–ø–µ–∫—Ç—ã",
                callback_data=ChartCallbackData(
                    action="aspects"
                )
            )

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–º–∏—É–º
            if self.chart_settings["planet_set"] in [PlanetSet.EXTENDED, PlanetSet.FULL]:
                self.add_button(
                    text="üåü –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã",
                    callback_data=ChartCallbackData(
                        action="fixed_stars"
                    )
                )

                self.add_button(
                    text="‚òÑÔ∏è –ê—Å—Ç–µ—Ä–æ–∏–¥—ã",
                    callback_data=ChartCallbackData(
                        action="asteroids"
                    )
                )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            self.add_button(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã",
                callback_data=ChartCallbackData(
                    action="settings"
                )
            )

            # –≠–∫—Å–ø–æ—Ä—Ç
            self.add_button(
                text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                callback_data=ChartCallbackData(
                    action="save"
                )
            )

            self.add_button(
                text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                callback_data=ChartCallbackData(
                    action="share"
                )
            )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        if self.has_chart:
            self.builder.adjust(1, 2, 2, 2, 1, 2)
        else:
            self.builder.adjust(1, 1)

        self.add_back_button("astro:main")

        return await super().build(**kwargs)


class ChartSettingsKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ä—Ç—ã."""

    def __init__(self, current_settings: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.

        Args:
            current_settings: –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        super().__init__()
        self.settings = current_settings

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–º–æ–≤
        self.add_button(
            text=f"üè† –î–æ–º–∞: {self._get_house_system_name()}",
            callback_data="chart:settings:houses"
        )

        # –ù–∞–±–æ—Ä –ø–ª–∞–Ω–µ—Ç
        self.add_button(
            text=f"ü™ê –ü–ª–∞–Ω–µ—Ç—ã: {self._get_planet_set_name()}",
            callback_data="chart:settings:planets"
        )

        # –ê—Å–ø–µ–∫—Ç—ã
        self.add_button(
            text=f"üìê –ê—Å–ø–µ–∫—Ç—ã: {self._get_aspect_type_name()}",
            callback_data="chart:settings:aspects"
        )

        # –û—Ä–±–∏—Å—ã
        self.add_button(
            text="üéØ –û—Ä–±–∏—Å—ã",
            callback_data="chart:settings:orbs"
        )

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.add_button(
            text="üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥",
            callback_data="chart:settings:display"
        )

        # –°–±—Ä–æ—Å
        self.add_button(
            text="üîÑ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            callback_data="chart:settings:reset"
        )

        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å
        self.add_button(
            text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å",
            callback_data="chart:settings:apply"
        )

        self.builder.adjust(1, 1, 1, 2, 2)

        self.add_back_button("chart:main")

        return await super().build(**kwargs)

    def _get_house_system_name(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ–º–æ–≤."""
        names = {
            HouseSystem.PLACIDUS: "–ü–ª–∞—Ü–∏–¥—É—Å",
            HouseSystem.KOCH: "–ö–æ—Ö",
            HouseSystem.EQUAL: "–†–∞–≤–Ω–æ–¥–æ–º–Ω–∞—è",
            HouseSystem.WHOLE_SIGN: "–ó–Ω–∞–∫=–î–æ–º",
            HouseSystem.REGIOMONTANUS: "–†–µ–≥–∏–æ–º–æ–Ω—Ç–∞–Ω",
            HouseSystem.CAMPANUS: "–ö–∞–º–ø–∞–Ω—É—Å"
        }
        return names.get(self.settings["house_system"], "–ü–ª–∞—Ü–∏–¥—É—Å")

    def _get_planet_set_name(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –ø–ª–∞–Ω–µ—Ç."""
        names = {
            PlanetSet.BASIC: "–ë–∞–∑–æ–≤—ã–π",
            PlanetSet.STANDARD: "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
            PlanetSet.EXTENDED: "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π",
            PlanetSet.FULL: "–ü–æ–ª–Ω—ã–π"
        }
        return names.get(self.settings["planet_set"], "–°—Ç–∞–Ω–¥–∞—Ä—Ç")

    def _get_aspect_type_name(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞—Å–ø–µ–∫—Ç–æ–≤."""
        names = {
            AspectType.MAJOR: "–û—Å–Ω–æ–≤–Ω—ã–µ",
            AspectType.MINOR: "–ú–∏–Ω–æ—Ä–Ω—ã–µ",
            AspectType.ALL: "–í—Å–µ"
        }
        return names.get(self.settings["aspect_type"], "–û—Å–Ω–æ–≤–Ω—ã–µ")


class TransitsKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤."""

    def __init__(
            self,
            period: str = "today",
            selected_planets: Optional[List[int]] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤.

        Args:
            period: –ü–µ—Ä–∏–æ–¥ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
            selected_planets: –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã
        """
        super().__init__()
        self.period = period
        self.selected_planets = selected_planets or []

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        # –ü–µ—Ä–∏–æ–¥—ã
        periods = [
            ("–°–µ–≥–æ–¥–Ω—è", "today"),
            ("–ù–µ–¥–µ–ª—è", "week"),
            ("–ú–µ—Å—è—Ü", "month"),
            ("–ì–æ–¥", "year")
        ]

        for text, period_value in periods:
            if period_value == self.period:
                text = f"[{text}]"

            self.add_button(
                text=text,
                callback_data=TransitCallbackData(
                    action="period",
                    period=period_value
                )
            )

        self.builder.adjust(4)

        # –í–∞–∂–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã
        self.add_button(
            text="‚ö° –í–∞–∂–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã",
            callback_data=TransitCallbackData(
                action="important"
            )
        )

        # –¢—Ä–∞–Ω–∑–∏—Ç—ã –ø–æ –ø–ª–∞–Ω–µ—Ç–∞–º
        self.add_button(
            text="ü™ê –ü–æ –ø–ª–∞–Ω–µ—Ç–∞–º",
            callback_data=TransitCallbackData(
                action="by_planet"
            )
        )

        # –¢—Ä–∞–Ω–∑–∏—Ç—ã –ø–æ –¥–æ–º–∞–º
        self.add_button(
            text="üè† –ü–æ –¥–æ–º–∞–º",
            callback_data=TransitCallbackData(
                action="by_house"
            )
        )

        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
        self.add_button(
            text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å",
            callback_data=TransitCallbackData(
                action="calendar"
            )
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.add_button(
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            callback_data=TransitCallbackData(
                action="settings"
            )
        )

        self.builder.adjust(4, 1, 2, 2)

        self.add_back_button("astro:main")

        return await super().build(**kwargs)


class SynastryKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∏–Ω–∞—Å—Ç—Ä–∏–∏."""

    def __init__(
            self,
            has_partner_data: bool = False,
            synastry_type: str = "basic"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–∏–Ω–∞—Å—Ç—Ä–∏–∏.

        Args:
            has_partner_data: –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            synastry_type: –¢–∏–ø —Å–∏–Ω–∞—Å—Ç—Ä–∏–∏
        """
        super().__init__()
        self.has_partner_data = has_partner_data
        self.synastry_type = synastry_type

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        if not self.has_partner_data:
            # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            self.add_button(
                text="üë§ –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                callback_data="synastry:partner_data"
            )

            self.add_button(
                text="üìö –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–∏–Ω–∞—Å—Ç—Ä–∏—è?",
                callback_data="synastry:info"
            )
        else:
            # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
            self.add_button(
                text="üíï –û–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                callback_data="synastry:general"
            )

            self.add_button(
                text="‚ù§Ô∏è –õ—é–±–æ–≤—å –∏ —á—É–≤—Å—Ç–≤–∞",
                callback_data="synastry:love"
            )

            self.add_button(
                text="ü§ù –î—Ä—É–∂–±–∞ –∏ –æ–±—â–µ–Ω–∏–µ",
                callback_data="synastry:friendship"
            )

            self.add_button(
                text="üí∞ –î–µ–ª–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                callback_data="synastry:business"
            )

            self.add_button(
                text="üî• –°–µ–∫—Å—É–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                callback_data="synastry:sexual"
            )

            self.add_button(
                text="‚ö° –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏",
                callback_data="synastry:karmic"
            )

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
            self.add_button(
                text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                callback_data="synastry:detailed"
            )

            self.add_button(
                text="üë• –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                callback_data="synastry:change_partner"
            )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        if self.has_partner_data:
            self.builder.adjust(1, 2, 2, 2, 2)
        else:
            self.builder.adjust(1, 1)

        self.add_back_button("astro:main")

        return await super().build(**kwargs)


class LunarCalendarKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""

    def __init__(
            self,
            year: int,
            month: int,
            show_details: bool = True
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.

        Args:
            year: –ì–æ–¥
            month: –ú–µ—Å—è—Ü
            show_details: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª–∏
        """
        super().__init__()
        self.year = year
        self.month = month
        self.show_details = show_details

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        self.add_button(
            text="‚óÄÔ∏è",
            callback_data=CalendarCallbackData(
                action="navigate",
                year=self.year if self.month > 1 else self.year - 1,
                month=self.month - 1 if self.month > 1 else 12
            )
        )

        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]

        self.add_button(
            text=f"{month_names[self.month - 1]} {self.year}",
            callback_data="noop"
        )

        self.add_button(
            text="‚ñ∂Ô∏è",
            callback_data=CalendarCallbackData(
                action="navigate",
                year=self.year if self.month < 12 else self.year + 1,
                month=self.month + 1 if self.month < 12 else 1
            )
        )

        self.builder.adjust(3)

        # –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã
        self.add_button(
            text="üåô –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞",
            callback_data="lunar:current_phase"
        )

        # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞
        if self.show_details:
            # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
            weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
            for day_name in weekdays:
                self.add_button(text=day_name, callback_data="noop")

            # –î–Ω–∏ –º–µ—Å—è—Ü–∞ —Å —Ñ–∞–∑–∞–º–∏
            cal = calendar.monthcalendar(self.year, self.month)

            for week in cal:
                for day in week:
                    if day == 0:
                        self.add_button(text=" ", callback_data="noop")
                    else:
                        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—á–µ—Ç —Ñ–∞–∑—ã –ª—É–Ω—ã
                        moon_phase = self._get_moon_emoji(day)

                        self.add_button(
                            text=f"{day} {moon_phase}",
                            callback_data=CalendarCallbackData(
                                action="select",
                                year=self.year,
                                month=self.month,
                                day=day
                            )
                        )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
            self.builder.adjust(
                3,  # –ù–∞–≤–∏–≥–∞—Ü–∏—è
                1,  # –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞
                7,  # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
                *([7] * len(cal))  # –ù–µ–¥–µ–ª–∏
            )

        # –§—É–Ω–∫—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        self.add_button(
            text="üå± –°–∞–¥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
            callback_data="lunar:gardening"
        )

        self.add_button(
            text="üíá –°—Ç—Ä–∏–∂–∫–∞ –≤–æ–ª–æ—Å",
            callback_data="lunar:haircut"
        )

        self.add_button(
            text="üí∞ –§–∏–Ω–∞–Ω—Å—ã",
            callback_data="lunar:finance"
        )

        self.add_button(
            text="‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è",
            callback_data="lunar:relationships"
        )

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.add_button(
            text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∞–∑–∞—Ö",
            callback_data="lunar:notifications"
        )

        self.builder.adjust(2, 2, 1)

        self.add_back_button("astro:main")

        return await super().build(**kwargs)

    def _get_moon_emoji(self, day: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Ñ–∞–∑—ã –ª—É–Ω—ã –¥–ª—è –¥–Ω—è."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        phase = (day - 1) % 8
        emojis = ["üåë", "üåí", "üåì", "üåî", "üåï", "üåñ", "üåó", "üåò"]
        return emojis[phase]


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
async def get_birth_data_keyboard(
        current_data: Optional[Dict[str, Any]] = None,
        editing_field: Optional[str] = None
) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è."""
    keyboard = BirthDataKeyboard(current_data, editing_field)
    return await keyboard.build()


async def get_horoscope_menu(
        user_subscription: str = "free",
        has_birth_data: bool = False
) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤."""
    keyboard = HoroscopeMenuKeyboard(user_subscription, has_birth_data)
    return await keyboard.build()


async def get_natal_chart_keyboard(
        has_chart: bool = False,
        chart_settings: Optional[Dict[str, Any]] = None
) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã."""
    keyboard = NatalChartKeyboard(has_chart, chart_settings)
    return await keyboard.build()


async def get_lunar_calendar(
        year: int = None,
        month: int = None
) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
    if not year or not month:
        now = datetime.now()
        year = now.year
        month = now.month

    keyboard = LunarCalendarKeyboard(year, month)
    return await keyboard.build()


logger.info("–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")