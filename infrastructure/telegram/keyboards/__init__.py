"""
–ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
- –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
- –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
- –¢–∏–ø—ã –¥–ª—è type hints

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import Optional, List, Dict, Any, Union
from datetime import datetime
from decimal import Decimal

from aiogram.types import (
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)

# –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from .base import (
    # –ö–ª–∞—Å—Å—ã
    BaseKeyboard,
    InlineKeyboard,
    ReplyKeyboard,
    PaginatedKeyboard,
    DynamicMenu,
    ConfirmationKeyboard,
    KeyboardFactory,

    # –¢–∏–ø—ã –∏ —ç–Ω—É–º—ã
    ButtonStyle,
    ButtonConfig,

    # Callback Data
    BaseCallbackData,
    PaginationCallbackData,
    MenuCallbackData,
    ConfirmCallbackData,
    RefreshCallbackData,  # –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢

    # –£—Ç–∏–ª–∏—Ç—ã
    parse_callback_data,
    build_callback_data,
    log_keyboard_creation
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
from .main_menu import (
    # –ö–ª–∞—Å—Å—ã
    MainMenuKeyboard,
    QuickActionsKeyboard,
    SectionMenuKeyboard,
    WelcomeKeyboard,
    TimeBasedGreetingKeyboard,

    # –≠–Ω—É–º—ã
    MainMenuSection,
    QuickActionType,

    # Callback Data
    MainMenuCallbackData,
    QuickActionCallbackData,

    # –§—É–Ω–∫—Ü–∏–∏
    get_main_menu,
    get_section_menu,
    get_welcome_keyboard
)

# –¢–∞—Ä–æ
from .tarot import (
    # –ö–ª–∞—Å—Å—ã
    SpreadSelectionKeyboard,
    CardSelectionKeyboard,
    ReadingResultKeyboard,
    TarotHistoryKeyboard,
    CardDetailKeyboard,
    TarotLearningKeyboard,

    # –≠–Ω—É–º—ã
    TarotSection,
    SpreadType,
    CardSuit,

    # Callback Data
    TarotCallbackData,
    SpreadCallbackData,
    CardCallbackData,
    HistoryCallbackData,

    # –§—É–Ω–∫—Ü–∏–∏
    get_spread_selection_keyboard,
    get_card_selection_keyboard,
    get_reading_result_keyboard
)

# –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è
from .astrology import (
    # –ö–ª–∞—Å—Å—ã
    BirthDataKeyboard,
    HoroscopeMenuKeyboard,
    NatalChartKeyboard,
    ChartSettingsKeyboard,
    TransitsKeyboard,
    SynastryKeyboard,
    LunarCalendarKeyboard,

    # –≠–Ω—É–º—ã
    AstrologySection,
    HoroscopeType,
    HouseSystem,
    AspectType,
    PlanetSet,

    # Callback Data
    AstrologyCallbackData,
    BirthDataCallbackData,
    ChartCallbackData,
    TransitCallbackData,
    CalendarCallbackData,

    # –§—É–Ω–∫—Ü–∏–∏
    get_birth_data_keyboard,
    get_horoscope_menu,
    get_natal_chart_keyboard,
    get_lunar_calendar
)

# –ü–æ–¥–ø–∏—Å–∫–∞
from .subscription import (
    # –ö–ª–∞—Å—Å—ã
    SubscriptionPlansKeyboard,
    PaymentMethodKeyboard,
    CurrentSubscriptionKeyboard,
    PromoCodeKeyboard,
    PaymentHistoryKeyboard,
    PaymentMethodsManagementKeyboard,
    SubscriptionCancellationKeyboard,

    # –≠–Ω—É–º—ã
    SubscriptionPlan,
    PaymentProvider,
    PaymentPeriod,

    # Callback Data
    SubscriptionCallbackData,
    PaymentCallbackData,
    PromoCallbackData,
    AutoRenewalCallbackData,

    # –§—É–Ω–∫—Ü–∏–∏
    get_subscription_plans_keyboard,
    get_payment_method_keyboard,
    get_current_subscription_keyboard,
    get_promo_code_keyboard
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
class Keyboards:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""

    @staticmethod
    async def main_menu(
            user_subscription: str = "free",
            is_admin: bool = False,
            user_name: Optional[str] = None
    ) -> ReplyKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        return await get_main_menu(user_subscription, is_admin, user_name)

    @staticmethod
    async def remove() -> ReplyKeyboardRemove:
        """–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        return KeyboardFactory.get_remove_keyboard()

    @staticmethod
    async def yes_no(
            target: str,
            value: Optional[str] = None
    ) -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –î–∞/–ù–µ—Ç."""
        return await KeyboardFactory.get_yes_no_keyboard(target, value)

    @staticmethod
    async def back(callback_data: str = "back") -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥."""
        return await KeyboardFactory.get_back_keyboard(callback_data)

    @staticmethod
    async def cancel(callback_data: str = "cancel") -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –û—Ç–º–µ–Ω–∞."""
        keyboard = InlineKeyboard()
        keyboard.add_cancel_button(callback_data)
        return await keyboard.build()

    @staticmethod
    async def close() -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ó–∞–∫—Ä—ã—Ç—å."""
        keyboard = InlineKeyboard()
        keyboard.add_button(
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            callback_data="close"
        )
        return await keyboard.build()

    @staticmethod
    async def menu_button() -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é."""
        keyboard = InlineKeyboard()
        keyboard.add_button(
            text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="main_menu"
        )
        return await keyboard.build()

    @staticmethod
    async def welcome(user_name: Optional[str] = None) -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        return await get_welcome_keyboard(user_name)

    @staticmethod
    async def quick_actions(
            user_subscription: str = "free",
            context: Optional[str] = None
    ) -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
        keyboard = QuickActionsKeyboard(user_subscription, context)
        return await keyboard.build()

    @staticmethod
    async def section_menu(
            section: Union[str, MainMenuSection],
            user_subscription: str = "free"
    ) -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞."""
        if isinstance(section, str):
            section = MainMenuSection(section)
        return await get_section_menu(section, user_subscription)

    @staticmethod
    def subscription_offer() -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏."""
        keyboard = InlineKeyboard()
        keyboard.add_button(
            text="‚≠ê –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data=SubscriptionCallbackData(action="plans").pack()
        )
        keyboard.add_button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back"
        )
        keyboard.builder.adjust(1, 1)
        return keyboard.builder.as_markup()


# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
class ContextKeyboards:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""

    @staticmethod
    async def get_for_state(
            state_name: str,
            context: Dict[str, Any]
    ) -> Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, None]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

        Args:
            state_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏

        Returns:
            –ü–æ–¥—Ö–æ–¥—è—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–ª–∏ None
        """
        # –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        state_keyboards = {
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            "Registration:waiting_birth_date": lambda: get_birth_data_keyboard(
                context.get("birth_data"),
                "date"
            ),
            "Registration:waiting_birth_time": lambda: get_birth_data_keyboard(
                context.get("birth_data"),
                "time"
            ),
            "Registration:waiting_birth_place": lambda: get_birth_data_keyboard(
                context.get("birth_data"),
                "place"
            ),

            # –¢–∞—Ä–æ
            "TarotReading:selecting_spread": lambda: get_spread_selection_keyboard(
                context.get("user_subscription", "free")
            ),
            "TarotReading:selecting_cards": lambda: get_card_selection_keyboard(
                SpreadType(context["spread_type"]),
                context["current_position"],
                context["total_positions"],
                context.get("selected_cards", [])
            ),

            # –ü–æ–¥–ø–∏—Å–∫–∞
            "Subscription:selecting_plan": lambda: get_subscription_plans_keyboard(
                context.get("current_plan", "free"),
                context.get("selected_period", "monthly")
            ),
            "Subscription:selecting_payment": lambda: get_payment_method_keyboard(
                context["amount"],
                context["plan"],
                context["period"],
                context.get("saved_methods")
            )
        }

        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard_func = state_keyboards.get(state_name)

        if keyboard_func:
            try:
                return await keyboard_func()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è {state_name}: {e}")
                return None

        return None


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
class KeyboardUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏."""

    @staticmethod
    def extract_callback_action(callback_data: str) -> str:
        """
        –ò–∑–≤–ª–µ—á—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback data.

        Args:
            callback_data: –°—Ç—Ä–æ–∫–∞ callback data

        Returns:
            –î–µ–π—Å—Ç–≤–∏–µ
        """
        parsed = parse_callback_data(callback_data)
        return parsed.get("action", "unknown")

    @staticmethod
    def build_navigation_callback(
            section: str,
            page: Optional[str] = None,
            **kwargs
    ) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å callback –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

        Args:
            section: –†–∞–∑–¥–µ–ª
            page: –°—Ç—Ä–∞–Ω–∏—Ü–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        Returns:
            –°—Ç—Ä–æ–∫–∞ callback data
        """
        data = {
            "section": section,
            "page": page,
            **kwargs
        }
        return build_callback_data("navigate", **data)

    @staticmethod
    async def create_paginated_menu(
            items: List[Any],
            item_formatter: callable,
            page: int = 1,
            page_size: int = 10,
            menu_type: str = "default"
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é.

        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            item_formatter: –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            page_size: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            menu_type: –¢–∏–ø –º–µ–Ω—é

        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        """
        keyboard = PaginatedKeyboard(items, page_size, page, menu_type)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for item in keyboard.get_page_items():
            text, callback_data = item_formatter(item)
            keyboard.add_button(text, callback_data)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        if keyboard.total_pages > 1:
            keyboard.add_pagination_buttons()

        return await keyboard.build()


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
class KeyboardConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    MAX_INLINE_BUTTONS_PER_ROW = 8
    MAX_REPLY_BUTTONS_PER_ROW = 3
    MAX_CALLBACK_DATA_LENGTH = 64

    # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    EMOJI = {
        "back": "‚óÄÔ∏è",
        "forward": "‚ñ∂Ô∏è",
        "up": "‚¨ÜÔ∏è",
        "down": "‚¨áÔ∏è",
        "confirm": "‚úÖ",
        "cancel": "‚ùå",
        "edit": "‚úèÔ∏è",
        "delete": "üóë",
        "info": "‚ÑπÔ∏è",
        "settings": "‚öôÔ∏è",
        "star": "‚≠ê",
        "lock": "üîí",
        "unlock": "üîì",
        "warning": "‚ö†Ô∏è",
        "question": "‚ùì",
        "money": "üí∞",
        "gift": "üéÅ",
        "calendar": "üìÖ",
        "clock": "üïê",
        "location": "üìç",
        "search": "üîç",
        "refresh": "üîÑ"
    }

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
    TEXTS = {
        "back": "{emoji} –ù–∞–∑–∞–¥",
        "cancel": "{emoji} –û—Ç–º–µ–Ω–∞",
        "confirm": "{emoji} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        "yes": "{emoji} –î–∞",
        "no": "{emoji} –ù–µ—Ç",
        "save": "{emoji} –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        "edit": "{emoji} –ò–∑–º–µ–Ω–∏—Ç—å",
        "delete": "{emoji} –£–¥–∞–ª–∏—Ç—å",
        "more": "–ï—â—ë...",
        "loading": "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...",
        "error": "‚ùå –û—à–∏–±–∫–∞",
        "success": "‚úÖ –£—Å–ø–µ—à–Ω–æ",
        "locked": "üîí –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
        "premium": "‚≠ê Premium",
        "page": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current}/{total}"
    }


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def keyboard_error_handler(default_keyboard: Optional[callable] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä.

    Args:
        default_keyboard: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """

    def decorator(func):
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")

                if default_keyboard:
                    return await default_keyboard()

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
                keyboard = InlineKeyboard()
                keyboard.add_back_button()
                return await keyboard.build()

        return wrapper

    return decorator


# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
def init_keyboards():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    logger.info("–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    modules = [
        "base", "main_menu", "tarot",
        "astrology", "subscription"
    ]

    for module in modules:
        try:
            __import__(f"infrastructure.telegram.keyboards.{module}")
            logger.debug(f"–ú–æ–¥—É–ª—å {module} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {module}: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    # –§–∞–±—Ä–∏–∫–∏
    "Keyboards",
    "ContextKeyboards",
    "KeyboardUtils",
    "KeyboardConstants",

    # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    "BaseKeyboard",
    "InlineKeyboard",
    "ReplyKeyboard",
    "PaginatedKeyboard",
    "DynamicMenu",
    "ConfirmationKeyboard",
    "KeyboardFactory",

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    "MainMenuKeyboard",
    "QuickActionsKeyboard",
    "SectionMenuKeyboard",
    "WelcomeKeyboard",
    "TimeBasedGreetingKeyboard",
    "MainMenuSection",
    "QuickActionType",

    # –¢–∞—Ä–æ
    "SpreadSelectionKeyboard",
    "CardSelectionKeyboard",
    "ReadingResultKeyboard",
    "TarotHistoryKeyboard",
    "CardDetailKeyboard",
    "TarotLearningKeyboard",
    "TarotSection",
    "SpreadType",
    "CardSuit",

    # –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è
    "BirthDataKeyboard",
    "HoroscopeMenuKeyboard",
    "NatalChartKeyboard",
    "ChartSettingsKeyboard",
    "TransitsKeyboard",
    "SynastryKeyboard",
    "LunarCalendarKeyboard",
    "AstrologySection",
    "HoroscopeType",
    "HouseSystem",

    # –ü–æ–¥–ø–∏—Å–∫–∞
    "SubscriptionPlansKeyboard",
    "PaymentMethodKeyboard",
    "CurrentSubscriptionKeyboard",
    "PromoCodeKeyboard",
    "PaymentHistoryKeyboard",
    "SubscriptionPlan",
    "PaymentProvider",
    "PaymentPeriod",

    # Callback Data
    "BaseCallbackData",
    "PaginationCallbackData",
    "MenuCallbackData",
    "ConfirmCallbackData",
    "RefreshCallbackData",  # –î–û–ë–ê–í–õ–ï–ù –í –≠–ö–°–ü–û–†–¢
    "MainMenuCallbackData",
    "QuickActionCallbackData",
    "TarotCallbackData",
    "SpreadCallbackData",
    "CardCallbackData",
    "AstrologyCallbackData",
    "BirthDataCallbackData",
    "SubscriptionCallbackData",
    "PaymentCallbackData",

    # –§—É–Ω–∫—Ü–∏–∏
    "get_main_menu",
    "get_section_menu",
    "get_welcome_keyboard",
    "get_birth_data_keyboard",
    "get_promo_code_keyboard",

    # –£—Ç–∏–ª–∏—Ç—ã
    "parse_callback_data",
    "build_callback_data",
    "keyboard_error_handler"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
init_keyboards()
logger.info("–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")