"""
–ú–æ–¥—É–ª—å –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –∫–ª–∞–≤–∏–∞—Ç—É—Ä.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
- –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
- –§–∞–±—Ä–∏–∫—É –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
- –°–∏—Å—Ç–µ–º—É callback data –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π
- –ü–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–µ–Ω—é —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import List, Optional, Dict, Any, Callable, Union, Tuple
from dataclasses import dataclass, field
from enum import Enum
import json
from abc import ABC, abstractmethod

from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class ButtonStyle(Enum):
    """–°—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."""
    PRIMARY = "primary"  # –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    SECONDARY = "secondary"  # –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    SUCCESS = "success"  # –£—Å–ø–µ—à–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    DANGER = "danger"  # –û–ø–∞—Å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    INFO = "info"  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    BACK = "back"  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    CANCEL = "cancel"  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    CONFIRM = "confirm"  # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


@dataclass
class ButtonConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏."""
    text: str
    callback_data: Optional[Union[str, CallbackData]] = None
    url: Optional[str] = None
    style: ButtonStyle = ButtonStyle.PRIMARY
    row_width: int = 1
    emoji: Optional[str] = None

    def get_text(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏."""
        if self.emoji:
            return f"{self.emoji} {self.text}"

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–º–æ–¥–∑–∏ –ø–æ —Å—Ç–∏–ª—é
        style_emojis = {
            ButtonStyle.PRIMARY: "üîµ",
            ButtonStyle.SUCCESS: "‚úÖ",
            ButtonStyle.DANGER: "‚ùå",
            ButtonStyle.INFO: "‚ÑπÔ∏è",
            ButtonStyle.BACK: "‚óÄÔ∏è",
            ButtonStyle.CANCEL: "üö´",
            ButtonStyle.CONFIRM: "‚úîÔ∏è"
        }

        if self.style in style_emojis:
            return f"{style_emojis[self.style]} {self.text}"

        return self.text


class BaseCallbackData(CallbackData, prefix="base"):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è callback data."""
    action: str
    value: Optional[str] = None
    page: Optional[int] = None


class PaginationCallbackData(CallbackData, prefix="page"):
    """Callback data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    action: str  # next, prev, goto
    page: int
    total: int
    menu_type: str


class MenuCallbackData(CallbackData, prefix="menu"):
    """Callback data –¥–ª—è –º–µ–Ω—é."""
    action: str  # select, back, close
    menu_id: str
    item_id: Optional[str] = None
    level: int = 0


class ConfirmCallbackData(CallbackData, prefix="confirm"):
    """Callback data –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    action: str  # yes, no
    target: str
    value: Optional[str] = None


class BaseKeyboard(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        self.builder = None
        logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ {self.__class__.__name__}")

    @abstractmethod
    async def build(self, **kwargs) -> Union[InlineKeyboardMarkup, ReplyKeyboardMarkup]:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        pass

    def add_back_button(self, callback_data: str = "back") -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."""
        if isinstance(self.builder, InlineKeyboardBuilder):
            self.builder.button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=callback_data
            )

    def add_cancel_button(self, callback_data: str = "cancel") -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'."""
        if isinstance(self.builder, InlineKeyboardBuilder):
            self.builder.button(
                text="üö´ –û—Ç–º–µ–Ω–∞",
                callback_data=callback_data
            )


class InlineKeyboard(BaseKeyboard):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        super().__init__()
        self.builder = InlineKeyboardBuilder()

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        return self.builder.as_markup()

    def add_button(
            self,
            text: str,
            callback_data: Optional[Union[str, CallbackData]] = None,
            url: Optional[str] = None,
            row_width: int = 1
    ) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        button = InlineKeyboardButton(text=text)

        if callback_data:
            if isinstance(callback_data, CallbackData):
                button.callback_data = callback_data.pack()
            else:
                button.callback_data = callback_data
        elif url:
            button.url = url
        else:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å callback_data –∏–ª–∏ url")

        self.builder.add(button)

        if row_width > 1:
            self.builder.adjust(row_width)

    def add_buttons_from_config(self, configs: List[ButtonConfig]) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        for config in configs:
            self.add_button(
                text=config.get_text(),
                callback_data=config.callback_data,
                url=config.url,
                row_width=config.row_width
            )


class ReplyKeyboard(BaseKeyboard):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""

    def __init__(self, resize_keyboard: bool = True, one_time_keyboard: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

        Args:
            resize_keyboard: –ê–≤—Ç–æ–ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            one_time_keyboard: –°–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        super().__init__()
        self.builder = ReplyKeyboardBuilder()
        self.resize_keyboard = resize_keyboard
        self.one_time_keyboard = one_time_keyboard

    async def build(self, **kwargs) -> ReplyKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        return self.builder.as_markup(
            resize_keyboard=self.resize_keyboard,
            one_time_keyboard=self.one_time_keyboard
        )

    def add_button(
            self,
            text: str,
            request_contact: bool = False,
            request_location: bool = False,
            row_width: int = 1
    ) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        button = KeyboardButton(
            text=text,
            request_contact=request_contact,
            request_location=request_location
        )

        self.builder.add(button)

        if row_width > 1:
            self.builder.adjust(row_width)


class PaginatedKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""

    def __init__(
            self,
            items: List[Any],
            page_size: int = 10,
            current_page: int = 1,
            menu_type: str = "default"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            menu_type: –¢–∏–ø –º–µ–Ω—é –¥–ª—è callback
        """
        super().__init__()
        self.items = items
        self.page_size = page_size
        self.current_page = current_page
        self.menu_type = menu_type
        self.total_pages = (len(items) + page_size - 1) // page_size

        logger.debug(
            f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: "
            f"—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{self.total_pages}, "
            f"—ç–ª–µ–º–µ–Ω—Ç–æ–≤ {len(items)}"
        )

    def get_page_items(self) -> List[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        start_idx = (self.current_page - 1) * self.page_size
        end_idx = start_idx + self.page_size
        return self.items[start_idx:end_idx]

    def add_pagination_buttons(self) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
        buttons = []

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if self.current_page > 1:
            buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=PaginationCallbackData(
                        action="prev",
                        page=self.current_page - 1,
                        total=self.total_pages,
                        menu_type=self.menu_type
                    ).pack()
                )
            )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        buttons.append(
            InlineKeyboardButton(
                text=f"{self.current_page}/{self.total_pages}",
                callback_data="noop"
            )
        )

        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if self.current_page < self.total_pages:
            buttons.append(
                InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=PaginationCallbackData(
                        action="next",
                        page=self.current_page + 1,
                        total=self.total_pages,
                        menu_type=self.menu_type
                    ).pack()
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        for button in buttons:
            self.builder.add(button)

        self.builder.adjust(len(buttons))


class DynamicMenu(InlineKeyboard):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –º–µ–Ω—é."""

    def __init__(self, menu_id: str, level: int = 0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é.

        Args:
            menu_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ–Ω—é
            level: –£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        """
        super().__init__()
        self.menu_id = menu_id
        self.level = level
        self.menu_items: List[Dict[str, Any]] = []

        logger.debug(f"–°–æ–∑–¥–∞–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é {menu_id} —É—Ä–æ–≤–Ω—è {level}")

    def add_menu_item(
            self,
            item_id: str,
            text: str,
            emoji: Optional[str] = None,
            submenu: bool = False
    ) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é."""
        display_text = f"{emoji} {text}" if emoji else text

        self.add_button(
            text=display_text + (" ‚ñ∂Ô∏è" if submenu else ""),
            callback_data=MenuCallbackData(
                action="select",
                menu_id=self.menu_id,
                item_id=item_id,
                level=self.level + 1 if submenu else self.level
            ).pack()
        )

        self.menu_items.append({
            "id": item_id,
            "text": text,
            "emoji": emoji,
            "submenu": submenu
        })

    def add_navigation_buttons(self, show_back: bool = True) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏."""
        nav_buttons = []

        if show_back and self.level > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=MenuCallbackData(
                        action="back",
                        menu_id=self.menu_id,
                        level=self.level - 1
                    ).pack()
                )
            )

        nav_buttons.append(
            InlineKeyboardButton(
                text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                callback_data=MenuCallbackData(
                    action="close",
                    menu_id=self.menu_id,
                    level=0
                ).pack()
            )
        )

        for button in nav_buttons:
            self.builder.add(button)

        self.builder.adjust(len(nav_buttons))


class ConfirmationKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è."""

    def __init__(self, target: str, value: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

        Args:
            target: –¶–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            value: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        super().__init__()
        self.target = target
        self.value = value

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        self.add_button(
            text="‚úÖ –î–∞",
            callback_data=ConfirmCallbackData(
                action="yes",
                target=self.target,
                value=self.value
            ).pack()
        )

        self.add_button(
            text="‚ùå –ù–µ—Ç",
            callback_data=ConfirmCallbackData(
                action="no",
                target=self.target,
                value=self.value
            ).pack()
        )

        self.builder.adjust(2)

        return await super().build(**kwargs)


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
class KeyboardFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""

    @staticmethod
    def get_main_menu() -> ReplyKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        keyboard = ReplyKeyboard()

        keyboard.add_button("üé¥ –¢–∞—Ä–æ", row_width=2)
        keyboard.add_button("üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", row_width=2)
        keyboard.add_button("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", row_width=2)
        keyboard.add_button("üë§ –ü—Ä–æ—Ñ–∏–ª—å", row_width=2)
        keyboard.add_button("‚ÑπÔ∏è –ü–æ–º–æ—â—å", row_width=2)
        keyboard.add_button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", row_width=2)

        return keyboard.builder.as_markup(resize_keyboard=True)

    @staticmethod
    def get_remove_keyboard() -> ReplyKeyboardRemove:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        return ReplyKeyboardRemove()

    @staticmethod
    async def get_yes_no_keyboard(
            target: str,
            value: Optional[str] = None
    ) -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –î–∞/–ù–µ—Ç."""
        keyboard = ConfirmationKeyboard(target, value)
        return await keyboard.build()

    @staticmethod
    async def get_back_keyboard(callback_data: str = "back") -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥."""
        keyboard = InlineKeyboard()
        keyboard.add_back_button(callback_data)
        return await keyboard.build()


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å callback data
def parse_callback_data(callback_data: str) -> Dict[str, Any]:
    """
    –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å callback data.

    Args:
        callback_data: –°—Ç—Ä–æ–∫–∞ callback data

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ JSON
        return json.loads(callback_data)
    except json.JSONDecodeError:
        # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é
        parts = callback_data.split(":")
        if len(parts) >= 2:
            return {
                "action": parts[0],
                "value": parts[1] if len(parts) > 1 else None,
                "extra": parts[2:] if len(parts) > 2 else []
            }

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return {"action": callback_data}


def build_callback_data(action: str, **kwargs) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å callback data.

    Args:
        action: –î–µ–π—Å—Ç–≤–∏–µ
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    Returns:
        –°—Ç—Ä–æ–∫–∞ callback data
    """
    data = {"action": action, **kwargs}

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
    if len(kwargs) == 0:
        return action
    elif len(kwargs) == 1 and "value" in kwargs:
        return f"{action}:{kwargs['value']}"

    # JSON –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    return json.dumps(data, ensure_ascii=False, separators=(',', ':'))


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def log_keyboard_creation(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""

    async def wrapper(*args, **kwargs):
        keyboard_type = args[0].__class__.__name__ if args else "Unknown"
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã {keyboard_type}")

        try:
            result = await func(*args, **kwargs)
            logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ {keyboard_type} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã {keyboard_type}: {e}")
            raise

    return wrapper


logger.info("–ú–æ–¥—É–ª—å –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")