"""
–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –¢–∞—Ä–æ.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞—Å–∫–ª–∞–¥–æ–≤
- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π
- –û–±—É—á–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import List, Optional, Dict, Any, Tuple
from datetime import datetime
from enum import Enum

from aiogram.types import InlineKeyboardMarkup
from aiogram.filters.callback_data import CallbackData

from .base import (
    InlineKeyboard, PaginatedKeyboard, DynamicMenu,
    ButtonConfig, ButtonStyle
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class TarotSection(Enum):
    """–†–∞–∑–¥–µ–ª—ã –¢–∞—Ä–æ."""
    DAILY_CARD = "daily_card"
    SPREADS = "spreads"
    HISTORY = "history"
    LEARNING = "learning"
    FAVORITES = "favorites"
    DECK_BROWSER = "deck_browser"


class SpreadType(Enum):
    """–¢–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤."""
    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã
    ONE_CARD = "one_card"
    THREE_CARDS = "three_cards"

    # –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    CELTIC_CROSS = "celtic_cross"
    RELATIONSHIP = "relationship"
    CAREER = "career"

    # –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
    YEAR_AHEAD = "year_ahead"
    CHAKRAS = "chakras"
    SHADOW_WORK = "shadow_work"
    LIFE_PURPOSE = "life_purpose"

    # VIP –ø–æ–¥–ø–∏—Å–∫–∞
    GRAND_TABLEAU = "grand_tableau"
    ASTROLOGICAL = "astrological"
    CUSTOM = "custom"


class CardSuit(Enum):
    """–ú–∞—Å—Ç–∏ –∫–∞—Ä—Ç –¢–∞—Ä–æ."""
    MAJOR_ARCANA = "major"
    WANDS = "wands"
    CUPS = "cups"
    SWORDS = "swords"
    PENTACLES = "pentacles"


# Callback Data –∫–ª–∞—Å—Å—ã
class TarotCallbackData(CallbackData, prefix="tarot"):
    """–û—Å–Ω–æ–≤–Ω–æ–π callback –¥–ª—è –¢–∞—Ä–æ."""
    action: str  # select, view, draw, interpret
    section: Optional[str] = None
    value: Optional[str] = None
    extra: Optional[str] = None


class SpreadCallbackData(CallbackData, prefix="spread"):
    """Callback –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤."""
    action: str  # select, start, position, complete
    spread_type: str
    position: Optional[int] = None
    reading_id: Optional[str] = None


class CardCallbackData(CallbackData, prefix="card"):
    """Callback –¥–ª—è –∫–∞—Ä—Ç."""
    action: str  # select, view, flip, favorite
    card_id: Optional[int] = None
    suit: Optional[str] = None
    position: Optional[int] = None
    is_reversed: Optional[bool] = None


class HistoryCallbackData(CallbackData, prefix="history"):
    """Callback –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏."""
    action: str  # view, delete, favorite, share
    reading_id: str
    page: Optional[int] = None


class SpreadSelectionKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞."""

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–∫–ª–∞–¥–∞—Ö
    SPREAD_INFO = {
        SpreadType.ONE_CARD: {
            "name": "–ö–∞—Ä—Ç–∞ –¥–Ω—è",
            "emoji": "üé¥",
            "description": "–°–æ–≤–µ—Ç –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            "positions": 1,
            "duration": "2-3 –º–∏–Ω",
            "level": "free"
        },
        SpreadType.THREE_CARDS: {
            "name": "–¢—Ä–∏ –∫–∞—Ä—Ç—ã",
            "emoji": "üéØ",
            "description": "–ü—Ä–æ—à–ª–æ–µ - –ù–∞—Å—Ç–æ—è—â–µ–µ - –ë—É–¥—É—â–µ–µ",
            "positions": 3,
            "duration": "5-7 –º–∏–Ω",
            "level": "free"
        },
        SpreadType.CELTIC_CROSS: {
            "name": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
            "emoji": "‚ú®",
            "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥",
            "positions": 10,
            "duration": "15-20 –º–∏–Ω",
            "level": "basic"
        },
        SpreadType.RELATIONSHIP: {
            "name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
            "emoji": "üíï",
            "description": "–ê–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
            "positions": 7,
            "duration": "10-15 –º–∏–Ω",
            "level": "basic"
        },
        SpreadType.CAREER: {
            "name": "–ö–∞—Ä—å–µ—Ä–∞",
            "emoji": "üíº",
            "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏ —Ñ–∏–Ω–∞–Ω—Å—ã",
            "positions": 6,
            "duration": "10-12 –º–∏–Ω",
            "level": "basic"
        },
        SpreadType.YEAR_AHEAD: {
            "name": "–ì–æ–¥ –≤–ø–µ—Ä–µ–¥",
            "emoji": "üìÖ",
            "description": "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤",
            "positions": 13,
            "duration": "25-30 –º–∏–Ω",
            "level": "premium"
        },
        SpreadType.CHAKRAS: {
            "name": "–ß–∞–∫—Ä—ã",
            "emoji": "üßò",
            "description": "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å",
            "positions": 7,
            "duration": "15-20 –º–∏–Ω",
            "level": "premium"
        },
        SpreadType.SHADOW_WORK: {
            "name": "–†–∞–±–æ—Ç–∞ —Å —Ç–µ–Ω—å—é",
            "emoji": "üåë",
            "description": "–ì–ª—É–±–∏–Ω–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è",
            "positions": 8,
            "duration": "20-25 –º–∏–Ω",
            "level": "premium"
        },
        SpreadType.LIFE_PURPOSE: {
            "name": "–ñ–∏–∑–Ω–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
            "emoji": "üåü",
            "description": "–í–∞—à –ø—É—Ç—å –∏ –º–∏—Å—Å–∏—è",
            "positions": 9,
            "duration": "20-25 –º–∏–Ω",
            "level": "premium"
        },
        SpreadType.GRAND_TABLEAU: {
            "name": "–ë–æ–ª—å—à–æ–π —Ä–∞—Å–∫–ª–∞–¥",
            "emoji": "üëë",
            "description": "–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏",
            "positions": 36,
            "duration": "45-60 –º–∏–Ω",
            "level": "vip"
        },
        SpreadType.ASTROLOGICAL: {
            "name": "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π",
            "emoji": "üåå",
            "description": "–†–∞—Å–∫–ª–∞–¥ –ø–æ –¥–æ–º–∞–º –≥–æ—Ä–æ—Å–∫–æ–ø–∞",
            "positions": 12,
            "duration": "30-40 –º–∏–Ω",
            "level": "vip"
        }
    }

    def __init__(
            self,
            user_subscription: str = "free",
            show_descriptions: bool = True,
            category_filter: Optional[str] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞.

        Args:
            user_subscription: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            show_descriptions: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è
            category_filter: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        super().__init__()
        self.user_subscription = user_subscription
        self.show_descriptions = show_descriptions
        self.category_filter = category_filter

        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {user_subscription}")

    def _get_available_spreads(self) -> List[SpreadType]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¥–ª—è —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏."""
        subscription_levels = {
            "free": ["free"],
            "basic": ["free", "basic"],
            "premium": ["free", "basic", "premium"],
            "vip": ["free", "basic", "premium", "vip"]
        }

        allowed_levels = subscription_levels.get(self.user_subscription, ["free"])

        available = []
        for spread_type, info in self.SPREAD_INFO.items():
            if info["level"] in allowed_levels:
                if not self.category_filter or self._matches_category(spread_type):
                    available.append(spread_type)

        return available

    def _matches_category(self, spread_type: SpreadType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞—Å–∫–ª–∞–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        categories = {
            "quick": [SpreadType.ONE_CARD, SpreadType.THREE_CARDS],
            "relationship": [SpreadType.RELATIONSHIP],
            "career": [SpreadType.CAREER],
            "spiritual": [SpreadType.CHAKRAS, SpreadType.SHADOW_WORK, SpreadType.LIFE_PURPOSE],
            "complex": [SpreadType.CELTIC_CROSS, SpreadType.GRAND_TABLEAU, SpreadType.ASTROLOGICAL]
        }

        return spread_type in categories.get(self.category_filter, [])

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞."""
        available_spreads = self._get_available_spreads()

        for spread_type in available_spreads:
            info = self.SPREAD_INFO[spread_type]

            # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            button_text = f"{info['emoji']} {info['name']}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–∞—Ä—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
            if self.show_descriptions:
                button_text += f" ({info['positions']} –∫–∞—Ä—Ç)"

            self.add_button(
                text=button_text,
                callback_data=SpreadCallbackData(
                    action="select",
                    spread_type=spread_type.value
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        locked_spreads = self._get_locked_spreads()
        for spread_type in locked_spreads:
            info = self.SPREAD_INFO[spread_type]
            button_text = f"üîí {info['name']}"

            self.add_button(
                text=button_text,
                callback_data=SpreadCallbackData(
                    action="locked",
                    spread_type=spread_type.value
                )
            )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.builder.adjust(1)

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä)
        if not self.category_filter:
            self._add_category_buttons()

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        self.add_back_button("tarot:main")

        return await super().build(**kwargs)

    def _get_locked_spreads(self) -> List[SpreadType]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã."""
        all_spreads = set(self.SPREAD_INFO.keys())
        available = set(self._get_available_spreads())
        locked = list(all_spreads - available)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        return locked[:2]

    def _add_category_buttons(self) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        self.builder.adjust(1)  # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        self.add_button(
            text="‚Äî –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî",
            callback_data="noop"
        )

        categories = [
            ("‚ö° –ë—ã—Å—Ç—Ä—ã–µ", "quick"),
            ("üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è", "relationship"),
            ("üíº –ö–∞—Ä—å–µ—Ä–∞", "career"),
            ("üßò –î—É—Ö–æ–≤–Ω—ã–µ", "spiritual")
        ]

        for text, category in categories:
            self.add_button(
                text=text,
                callback_data=f"tarot:category:{category}"
            )

        self.builder.adjust(1, 1, 2, 2)  # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥


class CardSelectionKeyboard(PaginatedKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞."""

    def __init__(
            self,
            spread_type: SpreadType,
            position: int,
            total_positions: int,
            selected_cards: List[int],
            suit_filter: Optional[CardSuit] = None,
            page: int = 1
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç.

        Args:
            spread_type: –¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
            position: –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
            total_positions: –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π
            selected_cards: –£–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
            suit_filter: –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Å—Ç–∏
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç
        available_cards = self._get_available_cards(selected_cards, suit_filter)

        super().__init__(
            items=available_cards,
            page_size=8,
            current_page=page,
            menu_type="card_selection"
        )

        self.spread_type = spread_type
        self.position = position
        self.total_positions = total_positions
        self.suit_filter = suit_filter

    def _get_available_cards(
            self,
            selected_cards: List[int],
            suit_filter: Optional[CardSuit]
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç."""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î
        # –°–µ–π—á–∞—Å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        cards = []

        # –°—Ç–∞—Ä—à–∏–µ –∞—Ä–∫–∞–Ω—ã
        if not suit_filter or suit_filter == CardSuit.MAJOR_ARCANA:
            major_arcana = [
                {"id": 0, "name": "–î—É—Ä–∞–∫", "suit": "major"},
                {"id": 1, "name": "–ú–∞–≥", "suit": "major"},
                {"id": 2, "name": "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "suit": "major"},
                {"id": 3, "name": "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "suit": "major"},
                {"id": 4, "name": "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "suit": "major"},
                {"id": 5, "name": "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "suit": "major"},
                {"id": 6, "name": "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "suit": "major"},
                {"id": 7, "name": "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "suit": "major"},
                {"id": 8, "name": "–°–∏–ª–∞", "suit": "major"},
                {"id": 9, "name": "–û—Ç—à–µ–ª—å–Ω–∏–∫", "suit": "major"},
                {"id": 10, "name": "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "suit": "major"},
                # –ò —Ç–∞–∫ –¥–∞–ª–µ–µ...
            ]
            cards.extend(major_arcana)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        available = [c for c in cards if c["id"] not in selected_cards]

        return available

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–∑–∏—Ü–∏–µ–π
        self.add_button(
            text=f"–ü–æ–∑–∏—Ü–∏—è {self.position} –∏–∑ {self.total_positions}",
            callback_data="noop"
        )

        # –ö–∞—Ä—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_cards = self.get_page_items()

        for card in page_cards:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –º–∞—Å—Ç–∏
            suit_emoji = {
                "major": "üåü",
                "wands": "üî•",
                "cups": "üíß",
                "swords": "‚öîÔ∏è",
                "pentacles": "üí∞"
            }.get(card["suit"], "üé¥")

            self.add_button(
                text=f"{suit_emoji} {card['name']}",
                callback_data=CardCallbackData(
                    action="select",
                    card_id=card["id"],
                    position=self.position
                )
            )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –¥–ª—è –∫–∞—Ä—Ç
        self.builder.adjust(1, 2, 2, 2, 2)  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ, –∫–∞—Ä—Ç—ã –ø–æ 2

        # –§–∏–ª—å—Ç—Ä—ã –ø–æ –º–∞—Å—Ç—è–º
        self._add_suit_filters()

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if self.total_pages > 1:
            self.add_pagination_buttons()

        # –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞
        self.add_button(
            text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞",
            callback_data=CardCallbackData(
                action="random",
                position=self.position
            )
        )

        # –û—Ç–º–µ–Ω–∞
        self.add_button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥",
            callback_data=SpreadCallbackData(
                action="cancel",
                spread_type=self.spread_type.value
            )
        )

        return await super().build(**kwargs)

    def _add_suit_filters(self) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –º–∞—Å—Ç—è–º."""
        # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è builder
        current_row_items = len(self.builder._markup)

        suit_buttons = [
            ("üåü", CardSuit.MAJOR_ARCANA),
            ("üî•", CardSuit.WANDS),
            ("üíß", CardSuit.CUPS),
            ("‚öîÔ∏è", CardSuit.SWORDS),
            ("üí∞", CardSuit.PENTACLES)
        ]

        for emoji, suit in suit_buttons:
            # –í—ã–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            text = f"[{emoji}]" if self.suit_filter == suit else emoji

            self.add_button(
                text=text,
                callback_data=f"card:filter:{suit.value}"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        if self.suit_filter:
            self.add_button(
                text="‚ùå",
                callback_data="card:filter:none"
            )

            # 6 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
            self.builder.adjust(*([2] * (current_row_items // 2)), 6)
        else:
            # 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
            self.builder.adjust(*([2] * (current_row_items // 2)), 5)


class ReadingResultKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–∫–ª–∞–¥–∞."""

    def __init__(
            self,
            reading_id: str,
            spread_type: SpreadType,
            is_favorite: bool = False,
            can_save: bool = True,
            show_learning: bool = True
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

        Args:
            reading_id: ID —Ä–∞—Å–∫–ª–∞–¥–∞
            spread_type: –¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
            is_favorite: –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–∏
            can_save: –ú–æ–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            show_learning: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –æ–±—É—á–µ–Ω–∏–µ
        """
        super().__init__()
        self.reading_id = reading_id
        self.spread_type = spread_type
        self.is_favorite = is_favorite
        self.can_save = can_save
        self.show_learning = show_learning

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if self.can_save:
            favorite_text = "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º" if self.is_favorite else "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
            self.add_button(
                text=favorite_text,
                callback_data=HistoryCallbackData(
                    action="favorite",
                    reading_id=self.reading_id
                )
            )

        # –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
        self.add_button(
            text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
            callback_data=HistoryCallbackData(
                action="share",
                reading_id=self.reading_id
            )
        )

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç
        self.add_button(
            text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞—Ä—Ç–∞—Ö",
            callback_data=f"reading:cards:{self.reading_id}"
        )

        # –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥
        self.add_button(
            text="üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥",
            callback_data=SpreadCallbackData(
                action="new",
                spread_type=self.spread_type.value
            )
        )

        # –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        if self.show_learning:
            self.add_button(
                text="üìö –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
                callback_data=f"learning:spread:{self.spread_type.value}"
            )

        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        self.add_button(
            text="üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
            callback_data=f"feedback:reading:{self.reading_id}"
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.builder.adjust(2, 1, 2, 1)

        return await super().build(**kwargs)


class TarotHistoryKeyboard(PaginatedKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤."""

    def __init__(
            self,
            readings: List[Dict[str, Any]],
            page: int = 1,
            filter_type: Optional[str] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏.

        Args:
            readings: –°–ø–∏—Å–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            filter_type: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        """
        super().__init__(
            items=readings,
            page_size=5,
            current_page=page,
            menu_type="tarot_history"
        )
        self.filter_type = filter_type

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏—Å—Ç–æ—Ä–∏–∏."""
        # –§–∏–ª—å—Ç—Ä—ã
        self._add_filters()

        # –†–∞—Å–∫–ª–∞–¥—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_readings = self.get_page_items()

        if not page_readings:
            self.add_button(
                text="üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞",
                callback_data="noop"
            )
        else:
            for reading in page_readings:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                date_str = reading["created_at"].strftime("%d.%m %H:%M")
                spread_name = SpreadSelectionKeyboard.SPREAD_INFO.get(
                    SpreadType(reading["spread_type"]),
                    {"name": "–†–∞—Å–∫–ª–∞–¥", "emoji": "üé¥"}
                )

                # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                button_text = f"{spread_name['emoji']} {date_str} - {spread_name['name']}"
                if reading.get("is_favorite"):
                    button_text = f"‚≠ê {button_text}"

                self.add_button(
                    text=button_text,
                    callback_data=HistoryCallbackData(
                        action="view",
                        reading_id=reading["id"]
                    )
                )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        filter_count = 3 if not self.filter_type else 4
        self.builder.adjust(filter_count, *([1] * len(page_readings)))

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if self.total_pages > 1:
            self.add_pagination_buttons()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.add_button(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="tarot:statistics"
        )

        # –ù–∞–∑–∞–¥
        self.add_back_button("tarot:main")

        return await super().build(**kwargs)

    def _add_filters(self) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏."""
        filters = [
            ("–í—Å–µ", None),
            ("‚≠ê", "favorites"),
            ("üïê", "recent")
        ]

        if self.filter_type:
            filters.append(("‚ùå", "clear"))

        for text, filter_value in filters:
            # –í—ã–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            if filter_value == self.filter_type:
                text = f"[{text}]"

            callback_data = f"history:filter:{filter_value or 'all'}"
            self.add_button(text=text, callback_data=callback_data)


class CardDetailKeyboard(InlineKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç—ã."""

    def __init__(
            self,
            card_id: int,
            card_name: str,
            is_reversed: bool = False,
            in_reading: bool = False,
            reading_id: Optional[str] = None,
            position: Optional[int] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ä—Ç—ã.

        Args:
            card_id: ID –∫–∞—Ä—Ç—ã
            card_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
            is_reversed: –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –ª–∏
            in_reading: –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∞
            reading_id: ID —Ä–∞—Å–∫–ª–∞–¥–∞
            position: –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ
        """
        super().__init__()
        self.card_id = card_id
        self.card_name = card_name
        self.is_reversed = is_reversed
        self.in_reading = in_reading
        self.reading_id = reading_id
        self.position = position

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
        # –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç—ã
        flip_text = "üîÑ –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å" if not self.is_reversed else "üîÑ –ü—Ä—è–º–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ"
        self.add_button(
            text=flip_text,
            callback_data=CardCallbackData(
                action="flip",
                card_id=self.card_id,
                is_reversed=not self.is_reversed
            )
        )

        # –ó–Ω–∞—á–µ–Ω–∏—è
        self.add_button(
            text="üìñ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è",
            callback_data=f"card:meanings:{self.card_id}"
        )

        # –û–±—É—á–µ–Ω–∏–µ
        self.add_button(
            text="üéì –ò–∑—É—á–∏—Ç—å –∫–∞—Ä—Ç—É",
            callback_data=f"learning:card:{self.card_id}"
        )

        # –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        self.add_button(
            text="‚≠ê –í –ª—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã",
            callback_data=f"card:favorite:{self.card_id}"
        )

        # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∞
        if self.in_reading and self.reading_id:
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å–∫–ª–∞–¥—É
            self.add_button(
                text="‚Ü©Ô∏è –ö —Ä–∞—Å–∫–ª–∞–¥—É",
                callback_data=f"reading:view:{self.reading_id}"
            )

            # –°–æ—Å–µ–¥–Ω–∏–µ –∫–∞—Ä—Ç—ã
            if self.position and self.position > 1:
                self.add_button(
                    text="‚óÄÔ∏è",
                    callback_data=f"reading:card:{self.reading_id}:{self.position - 1}"
                )

            self.add_button(
                text=f"–ü–æ–∑–∏—Ü–∏—è {self.position}",
                callback_data="noop"
            )

            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            self.add_button(
                text="‚ñ∂Ô∏è",
                callback_data=f"reading:card:{self.reading_id}:{self.position + 1}"
            )
        else:
            # –ù–∞–∑–∞–¥ –∫ –±—Ä–∞—É–∑–µ—Ä—É –∫–∞—Ä—Ç
            self.add_back_button("tarot:deck")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        if self.in_reading:
            self.builder.adjust(2, 2, 1, 3)
        else:
            self.builder.adjust(2, 2, 1)

        return await super().build(**kwargs)


class TarotLearningKeyboard(DynamicMenu):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""

    def __init__(self, section: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ –º–µ–Ω—é.

        Args:
            section: –¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è
        """
        menu_id = f"learning_{section}" if section else "learning_main"
        super().__init__(menu_id=menu_id, level=0 if not section else 1)
        self.section = section

    async def build(self, **kwargs) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–±—É—á–∞—é—â–µ–µ –º–µ–Ω—é."""
        if not self.section:
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è
            self.add_menu_item("basics", "–û—Å–Ω–æ–≤—ã –¢–∞—Ä–æ", "üìö")
            self.add_menu_item("major_arcana", "–°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã", "üåü", submenu=True)
            self.add_menu_item("minor_arcana", "–ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã", "üé¥", submenu=True)
            self.add_menu_item("spreads", "–†–∞—Å–∫–ª–∞–¥—ã", "üìä", submenu=True)
            self.add_menu_item("interpretation", "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è", "üîÆ")
            self.add_menu_item("practice", "–ü—Ä–∞–∫—Ç–∏–∫–∞", "üéØ")
            self.add_menu_item("history", "–ò—Å—Ç–æ—Ä–∏—è –¢–∞—Ä–æ", "üìú")
            self.add_menu_item("ethics", "–≠—Ç–∏–∫–∞ –≥–∞–¥–∞–Ω–∏—è", "‚öñÔ∏è")

        elif self.section == "major_arcana":
            # –ü–æ–¥–º–µ–Ω—é –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤
            self.add_menu_item("fool_magician", "0-I: –î—É—Ä–∞–∫ –∏ –ú–∞–≥", "üé≠")
            self.add_menu_item("priestess_empress", "II-III: –ñ—Ä–∏—Ü–∞ –∏ –ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "üëë")
            self.add_menu_item("emperor_hierophant", "IV-V: –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –∏ –ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "üèõ")
            # –ò —Ç–∞–∫ –¥–∞–ª–µ–µ...

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        self.add_navigation_buttons(show_back=self.level > 0)

        return await super().build(**kwargs)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
async def get_spread_selection_keyboard(
        user_subscription: str = "free",
        category: Optional[str] = None
) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞."""
    keyboard = SpreadSelectionKeyboard(
        user_subscription=user_subscription,
        category_filter=category
    )
    return await keyboard.build()


async def get_card_selection_keyboard(
        spread_type: SpreadType,
        position: int,
        total_positions: int,
        selected_cards: List[int],
        suit_filter: Optional[CardSuit] = None,
        page: int = 1
) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç."""
    keyboard = CardSelectionKeyboard(
        spread_type=spread_type,
        position=position,
        total_positions=total_positions,
        selected_cards=selected_cards,
        suit_filter=suit_filter,
        page=page
    )
    return await keyboard.build()


async def get_reading_result_keyboard(
        reading_id: str,
        spread_type: SpreadType,
        is_favorite: bool = False,
        can_save: bool = True
) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–∫–ª–∞–¥–∞."""
    keyboard = ReadingResultKeyboard(
        reading_id=reading_id,
        spread_type=spread_type,
        is_favorite=is_favorite,
        can_save=can_save
    )
    return await keyboard.build()


logger.info("–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¢–∞—Ä–æ –∑–∞–≥—Ä—É–∂–µ–Ω")