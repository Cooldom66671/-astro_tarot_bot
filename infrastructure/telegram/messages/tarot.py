"""
–ú–æ–¥—É–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –¢–∞—Ä–æ.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç –¢–∞—Ä–æ
- –û–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–∞–¥–∞–Ω–∏–π
- –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import Optional, Dict, Any, List, Tuple
from datetime import datetime
from enum import Enum
import random

from .base import (
    BaseMessage, TemplateMessage, MessageBuilder,
    MessageStyle, MessageEmoji, MessageFormatter
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class TarotContext(Enum):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç."""
    GENERAL = "general"
    LOVE = "love"
    CAREER = "career"
    HEALTH = "health"
    SPIRITUAL = "spiritual"
    ADVICE = "advice"


class CardPosition(Enum):
    """–ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã."""
    UPRIGHT = "upright"
    REVERSED = "reversed"


class SpreadPosition:
    """–ü–æ–∑–∏—Ü–∏–∏ –≤ —Ä–∞—Å–∫–ª–∞–¥–∞—Ö."""

    # –¢—Ä–∏ –∫–∞—Ä—Ç—ã
    THREE_CARDS = {
        1: "–ü—Ä–æ—à–ª–æ–µ",
        2: "–ù–∞—Å—Ç–æ—è—â–µ–µ",
        3: "–ë—É–¥—É—â–µ–µ"
    }

    # –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç
    CELTIC_CROSS = {
        1: "–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
        2: "–í—ã–∑–æ–≤/–ö—Ä–µ—Å—Ç",
        3: "–î–∞–ª—ë–∫–æ–µ –ø—Ä–æ—à–ª–æ–µ",
        4: "–ù–µ–¥–∞–≤–Ω–µ–µ –ø—Ä–æ—à–ª–æ–µ",
        5: "–í–æ–∑–º–æ–∂–Ω–æ–µ –±—É–¥—É—â–µ–µ",
        6: "–ë–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ",
        7: "–í–∞—à –ø–æ–¥—Ö–æ–¥",
        8: "–í–Ω–µ—à–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è",
        9: "–ù–∞–¥–µ–∂–¥—ã –∏ —Å—Ç—Ä–∞—Ö–∏",
        10: "–ò—Ç–æ–≥"
    }

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    RELATIONSHIP = {
        1: "–í—ã",
        2: "–ü–∞—Ä—Ç–Ω—ë—Ä",
        3: "–û—Å–Ω–æ–≤–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        4: "–ü—Ä–æ—à–ª–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        5: "–ù–∞—Å—Ç–æ—è—â–µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        6: "–ë—É–¥—É—â–µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        7: "–°–æ–≤–µ—Ç"
    }

    # –ö–∞—Ä—å–µ—Ä–∞
    CAREER = {
        1: "–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
        2: "–í–∞—à–∏ –∞–º–±–∏—Ü–∏–∏",
        3: "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è",
        4: "–í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã",
        5: "–í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã",
        6: "–°–æ–≤–µ—Ç"
    }


class TarotCardMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ."""

    def __init__(
            self,
            card_data: Dict[str, Any],
            position: CardPosition = CardPosition.UPRIGHT,
            context: TarotContext = TarotContext.GENERAL,
            spread_position: Optional[str] = None,
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã.

        Args:
            card_data: –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
            position: –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            spread_position: –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.card_data = card_data
        self.position = position
        self.context = context
        self.spread_position = spread_position

        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã {card_data.get('name')}")

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞—Ä—Ç–µ."""
        builder = MessageBuilder(self.style)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ä—Ç—ã
        self._add_card_header(builder)

        # –û—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        self._add_general_meaning(builder)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if self.context != TarotContext.GENERAL:
            self._add_context_meaning(builder)

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        self._add_keywords(builder)

        # –°–æ–≤–µ—Ç –¥–Ω—è (–µ—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—Ç–∞ –¥–Ω—è)
        if kwargs.get("is_daily_card"):
            self._add_daily_advice(builder)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if kwargs.get("show_extended"):
            self._add_extended_info(builder)

        return builder.build()

    def _add_card_header(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç—ã."""
        card_name = self.card_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞")
        arcana = self.card_data.get("arcana", "")

        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∞—Ä–∫–∞–Ω–æ–≤
        arcana_emoji = "üåü" if arcana == "major" else "üé¥"

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        header = f"{arcana_emoji} {card_name}"

        # –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        if self.position == CardPosition.REVERSED:
            header += " (–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)"

        builder.add_bold(header).add_line()

        # –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ
        if self.spread_position:
            builder.add_italic(f"–ü–æ–∑–∏—Ü–∏—è: {self.spread_position}").add_line()

        builder.add_separator().add_line()

    def _add_general_meaning(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –æ–±—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã."""
        if self.position == CardPosition.UPRIGHT:
            meaning = self.card_data.get("meaning_upright", "")
        else:
            meaning = self.card_data.get("meaning_reversed", "")

        if meaning:
            builder.add_line(meaning)
            builder.add_empty_line()

    def _add_context_meaning(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."""
        context_meanings = self.card_data.get("context_meanings", {})
        context_meaning = context_meanings.get(self.context.value, {})

        if self.position == CardPosition.UPRIGHT:
            meaning = context_meaning.get("upright", "")
        else:
            meaning = context_meaning.get("reversed", "")

        if meaning:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context_titles = {
                TarotContext.LOVE: "üíï –í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö",
                TarotContext.CAREER: "üíº –í –∫–∞—Ä—å–µ—Ä–µ",
                TarotContext.HEALTH: "üåø –í –∑–¥–æ—Ä–æ–≤—å–µ",
                TarotContext.SPIRITUAL: "üßò –í –¥—É—Ö–æ–≤–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏",
                TarotContext.ADVICE: "üí° –°–æ–≤–µ—Ç"
            }

            title = context_titles.get(self.context, "–ó–Ω–∞—á–µ–Ω–∏–µ")
            builder.add_bold(title).add_line()
            builder.add_line(meaning)
            builder.add_empty_line()

    def _add_keywords(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."""
        if self.position == CardPosition.UPRIGHT:
            keywords = self.card_data.get("keywords_upright", [])
        else:
            keywords = self.card_data.get("keywords_reversed", [])

        if keywords:
            builder.add_bold("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:").add_line()
            builder.add_text(", ".join(keywords))
            builder.add_empty_line()

    def _add_daily_advice(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç –¥–Ω—è."""
        builder.add_bold("üí´ –°–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:").add_line()

        # –°–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ä—Ç—ã –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è
        if self.position == CardPosition.UPRIGHT:
            advice = self.card_data.get("daily_advice_upright", "")
        else:
            advice = self.card_data.get("daily_advice_reversed", "")

        if not advice:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π —Å–æ–≤–µ—Ç
            advice = self._generate_daily_advice()

        builder.add_italic(advice).add_line()
        builder.add_empty_line()

    def _add_extended_info(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
        # –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        astro = self.card_data.get("astrology")
        if astro:
            builder.add_text("üåå ").add_bold("–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è: ")
            builder.add_text(astro).add_line()

        # –°—Ç–∏—Ö–∏—è
        element = self.card_data.get("element")
        if element:
            elements = {
                "fire": "üî• –û–≥–æ–Ω—å",
                "water": "üíß –í–æ–¥–∞",
                "air": "üí® –í–æ–∑–¥—É—Ö",
                "earth": "üåç –ó–µ–º–ª—è",
                "spirit": "‚ú® –î—É—Ö"
            }
            builder.add_text(f"{elements.get(element, element)}").add_line()

        # –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
        number = self.card_data.get("number")
        if number is not None:
            builder.add_text("üî¢ ").add_bold("–ù–æ–º–µ—Ä: ")
            builder.add_text(str(number)).add_line()

    def _generate_daily_advice(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π —Å–æ–≤–µ—Ç –¥–Ω—è."""
        if self.position == CardPosition.UPRIGHT:
            advices = [
                "–°–µ–≥–æ–¥–Ω—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π",
                "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏",
                "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ",
                "–û—Ç–∫—Ä–æ–π—Ç–µ—Å—å –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º",
                "–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É"
            ]
        else:
            advices = [
                "–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –¥–µ—Ç–∞–ª—è–º",
                "–í—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏—è",
                "–ù–µ —Å–ø–µ—à–∏—Ç–µ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏",
                "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ —É–ø—É—Å–∫–∞–µ—Ç–µ",
                "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã"
            ]

        return random.choice(advices)


class TarotSpreadMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ä–∞—Å–∫–ª–∞–¥–∞—Ö."""

    def __init__(
            self,
            spread_type: str,
            cards: List[Dict[str, Any]],
            question: Optional[str] = None,
            interpretation: Optional[str] = None,
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞.

        Args:
            spread_type: –¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
            cards: –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            interpretation: –û–±—â–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.spread_type = spread_type
        self.cards = cards
        self.question = question
        self.interpretation = interpretation

        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ {spread_type}")

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞."""
        builder = MessageBuilder(self.style)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–∞
        self._add_spread_header(builder)

        # –í–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if self.question:
            self._add_question(builder)

        # –ö–∞—Ä—Ç—ã —Ä–∞—Å–∫–ª–∞–¥–∞
        self._add_cards_summary(builder)

        # –û–±—â–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
        if self.interpretation:
            self._add_interpretation(builder)

        # –†–µ–∑—é–º–µ
        self._add_summary(builder)

        return builder.build()

    def _add_spread_header(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–∞."""
        spread_names = {
            "one_card": "üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è",
            "three_cards": "üéØ –¢—Ä–∏ –∫–∞—Ä—Ç—ã",
            "celtic_cross": "‚ú® –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
            "relationship": "üíï –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            "career": "üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥",
            "year_ahead": "üìÖ –ì–æ–¥ –≤–ø–µ—Ä—ë–¥",
            "chakras": "üßò –†–∞—Å–∫–ª–∞–¥ –ß–∞–∫—Ä—ã",
            "shadow_work": "üåë –†–∞–±–æ—Ç–∞ —Å —Ç–µ–Ω—å—é",
            "life_purpose": "üåü –ñ–∏–∑–Ω–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"
        }

        spread_name = spread_names.get(self.spread_type, "–†–∞—Å–∫–ª–∞–¥")
        builder.add_bold(spread_name).add_line()

        # –í—Ä–µ–º—è —Ä–∞—Å–∫–ª–∞–¥–∞
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
        builder.add_italic(f"üìÖ {timestamp}").add_line()

        builder.add_separator().add_line()

    def _add_question(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        builder.add_bold("‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å:").add_line()
        builder.add_quote(self.question).add_line()
        builder.add_empty_line()

    def _add_cards_summary(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö."""
        builder.add_bold("üé¥ –í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã:").add_line()
        builder.add_empty_line()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
        positions = self._get_spread_positions()

        for i, card in enumerate(self.cards, 1):
            position_name = positions.get(i, f"–ü–æ–∑–∏—Ü–∏—è {i}")
            card_name = card.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞")
            is_reversed = card.get("is_reversed", False)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞—Ä—Ç—ã
            if is_reversed:
                card_str = f"{card_name} (R)"
            else:
                card_str = card_name

            builder.add_text(f"{i}. ").add_bold(position_name)
            builder.add_text(": ").add_text(card_str)
            builder.add_line()

        builder.add_empty_line()

    def _add_interpretation(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –æ–±—â—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é."""
        builder.add_bold("üîÆ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:").add_line()
        builder.add_empty_line()

        # –†–∞–∑–±–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–∞ –∞–±–∑–∞—Ü—ã
        paragraphs = self.interpretation.split("\n\n")
        for paragraph in paragraphs:
            builder.add_line(paragraph)
            builder.add_empty_line()

    def _add_summary(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ —Ä–∞—Å–∫–ª–∞–¥–∞."""
        builder.add_bold("üìå –†–µ–∑—é–º–µ:").add_line()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä—Ç
        summary_points = self._generate_summary_points()
        builder.add_list(summary_points)

        builder.add_empty_line()

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        builder.add_italic("üí° –ü–æ–º–Ω–∏—Ç–µ: –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∞ –Ω–µ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å. ")
        builder.add_italic("–í–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –±—É–¥—É—â–µ–µ.")

    def _get_spread_positions(self) -> Dict[int, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞."""
        if self.spread_type == "three_cards":
            return SpreadPosition.THREE_CARDS
        elif self.spread_type == "celtic_cross":
            return SpreadPosition.CELTIC_CROSS
        elif self.spread_type == "relationship":
            return SpreadPosition.RELATIONSHIP
        elif self.spread_type == "career":
            return SpreadPosition.CAREER
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            return {i: f"–ö–∞—Ä—Ç–∞ {i}" for i in range(1, len(self.cards) + 1)}

    def _generate_summary_points(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã —Ä–µ–∑—é–º–µ."""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ
        major_count = sum(1 for card in self.cards if card.get("arcana") == "major")
        reversed_count = sum(1 for card in self.cards if card.get("is_reversed"))

        points = []

        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞—Ä—à–∏–º –∞—Ä–∫–∞–Ω–∞–º
        if major_count >= len(self.cards) // 2:
            points.append("–°–∏—Ç—É–∞—Ü–∏—è –∏–º–µ–µ—Ç –≤–∞–∂–Ω–æ–µ –∫–∞—Ä–º–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–º –∫–∞—Ä—Ç–∞–º
        if reversed_count >= len(self.cards) // 2:
            points.append("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–±–æ—Ç–∞")
        elif reversed_count == 0:
            points.append("–≠–Ω–µ—Ä–≥–∏–∏ —Ç–µ–∫—É—Ç —Å–≤–æ–±–æ–¥–Ω–æ –∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ø–æ —Ç–∏–ø—É —Ä–∞—Å–∫–ª–∞–¥–∞
        if self.spread_type == "relationship":
            points.append("–§–æ–∫—É—Å –Ω–∞ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∏ –æ–±—â–µ–Ω–∏–∏")
        elif self.spread_type == "career":
            points.append("–í—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞")

        # –ï—Å–ª–∏ –ø—É–Ω–∫—Ç–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ
        if len(points) < 2:
            points.extend([
                "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å—É —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π",
                "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏–∏ –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π"
            ])

        return points[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—É–Ω–∫—Ç–∞


class TarotEducationalMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—É—á–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –¢–∞—Ä–æ."""

    def __init__(
            self,
            topic: str,
            content_type: str = "lesson",
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

        Args:
            topic: –¢–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è
            content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (lesson, tip, history)
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.topic = topic
        self.content_type = content_type

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        builder = MessageBuilder(self.style)

        if self.content_type == "lesson":
            return self._format_lesson(builder)
        elif self.content_type == "tip":
            return self._format_tip(builder)
        elif self.content_type == "history":
            return self._format_history(builder)

        return builder.build()

    def _format_lesson(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫."""
        lessons = {
            "intro": {
                "title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –¢–∞—Ä–æ",
                "content": [
                    "–¢–∞—Ä–æ ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–º–æ–≥–∞—é—â–∞—è –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ —Å–∏—Ç—É–∞—Ü–∏—é.",
                    "",
                    "**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–¥—ã:**",
                    "‚Ä¢ 78 –∫–∞—Ä—Ç –≤—Å–µ–≥–æ",
                    "‚Ä¢ 22 –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–∞ (–≥–ª–∞–≤–Ω—ã–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã)",
                    "‚Ä¢ 56 –ú–ª–∞–¥—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤ (–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏)",
                    "",
                    "**–ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞:**",
                    "‚Ä¢ –ñ–µ–∑–ª—ã (–û–≥–æ–Ω—å) ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ, —ç–Ω–µ—Ä–≥–∏—è",
                    "‚Ä¢ –ö—É–±–∫–∏ (–í–æ–¥–∞) ‚Äî —ç–º–æ—Ü–∏–∏, —á—É–≤—Å—Ç–≤–∞",
                    "‚Ä¢ –ú–µ—á–∏ (–í–æ–∑–¥—É—Ö) ‚Äî –º—ã—Å–ª–∏, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã",
                    "‚Ä¢ –ü–µ–Ω—Ç–∞–∫–ª–∏ (–ó–µ–º–ª—è) ‚Äî –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
                ]
            },
            "reading_basics": {
                "title": "–û—Å–Ω–æ–≤—ã —á—Ç–µ–Ω–∏—è –∫–∞—Ä—Ç",
                "content": [
                    "**–ö–∞–∫ —á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç—ã:**",
                    "",
                    "1. **–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å**",
                    "   –ß—ë—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞",
                    "",
                    "2. **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥**",
                    "   –û—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É",
                    "",
                    "3. **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã**",
                    "   –ö–∞—Ä—Ç—ã –≥–æ–≤–æ—Ä—è—Ç —è–∑—ã–∫–æ–º –æ–±—Ä–∞–∑–æ–≤",
                    "",
                    "4. **–°–≤—è–∂–∏—Ç–µ –≤ –∏—Å—Ç–æ—Ä–∏—é**",
                    "   –ö–∞—Ä—Ç—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç –µ–¥–∏–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é",
                    "",
                    "üí° –°–æ–≤–µ—Ç: –î–æ–≤–µ—Ä—è–π—Ç–µ –ø–µ—Ä–≤–æ–º—É –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—é!"
                ]
            },
            "reversed_cards": {
                "title": "–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã",
                "content": [
                    "–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã ‚Äî —ç—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω–µ–≥–∞—Ç–∏–≤!",
                    "",
                    "**–í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è:**",
                    "‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å",
                    "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏",
                    "‚Ä¢ –¢–µ–Ω–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞",
                    "‚Ä¢ –û—Å–ª–∞–±–ª–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è",
                    "‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –∏–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ",
                    "",
                    "**–ü—Ä–∏–º–µ—Ä:**",
                    "–°–æ–ª–Ω—Ü–µ (–ø—Ä—è–º–∞—è) ‚Äî —Ä–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö",
                    "–°–æ–ª–Ω—Ü–µ (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è) ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–¥–æ—Å—Ç—å, —Å–∫—Ä—ã—Ç—ã–π —É—Å–ø–µ—Ö"
                ]
            }
        }

        lesson = lessons.get(self.topic, lessons["intro"])

        builder.add_bold(f"üìö {lesson['title']}").add_line()
        builder.add_separator().add_line()

        for line in lesson["content"]:
            if line.startswith("**") and line.endswith("**"):
                # –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                text = line.strip("**")
                builder.add_bold(text).add_line()
            elif line.startswith("‚Ä¢"):
                # –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
                builder.add_text("  ").add_line(line)
            elif line.startswith("   "):
                # –ü–æ–¥–ø—É–Ω–∫—Ç
                builder.add_text("    ").add_italic(line.strip()).add_line()
            else:
                builder.add_line(line)

        return builder.build()

    def _format_tip(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ç."""
        tips = {
            "daily": [
                "üí° –î–µ–ª–∞–π—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ –≤ —Å–ø–æ–∫–æ–π–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ",
                "üí° –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Å–≤–æ–∏—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤",
                "üí° –ò–∑—É—á–∞–π—Ç–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –≤ –¥–µ–Ω—å",
                "üí° –ú–µ–¥–∏—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
                "üí° –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –∫–æ–ª–æ–¥—ã"
            ],
            "interpretation": [
                "üí° –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ü–≤–µ—Ç–∞ –∏ —Å–∏–º–≤–æ–ª—ã",
                "üí° –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ä—Ç—ã –≤ —Ä–∞—Å–∫–ª–∞–¥–µ",
                "üí° –°–≤—è–∑—ã–≤–∞–π—Ç–µ –∫–∞—Ä—Ç—ã –≤ –µ–¥–∏–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é",
                "üí° –î–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏–∏",
                "üí° –ü—Ä–∞–∫—Ç–∏–∫–∞ ‚Äî –∫–ª—é—á –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É"
            ]
        }

        tip_list = tips.get(self.topic, tips["daily"])
        tip = random.choice(tip_list)

        builder.add_bold("–°–æ–≤–µ—Ç –¥–Ω—è").add_line()
        builder.add_separator().add_line()
        builder.add_line(tip)

        return builder.build()

    def _format_history(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å–ø—Ä–∞–≤–∫—É."""
        builder.add_bold("üìú –ò—Å—Ç–æ—Ä–∏—è –¢–∞—Ä–æ").add_line()
        builder.add_separator().add_line()

        builder.add_line("–¢–∞—Ä–æ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ –ò—Ç–∞–ª–∏–∏ –≤ XV –≤–µ–∫–µ –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞.")
        builder.add_line("–≠–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –≤ XVIII –≤–µ–∫–µ.")
        builder.add_empty_line()

        builder.add_bold("–ö–ª—é—á–µ–≤—ã–µ –¥–∞—Ç—ã:").add_line()
        builder.add_list([
            "1440 ‚Äî –ø–µ—Ä–≤—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            "1781 ‚Äî –ö—É—Ä –¥–µ –ñ–µ–±–µ–ª–µ–Ω —Å–≤—è–∑–∞–ª –¢–∞—Ä–æ —Å –ï–≥–∏–ø—Ç–æ–º",
            "1910 ‚Äî –∫–æ–ª–æ–¥–∞ –†–∞–π–¥–µ—Ä–∞-–£—ç–π—Ç–∞",
            "–°–µ–≥–æ–¥–Ω—è ‚Äî —Å–æ—Ç–Ω–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–ª–æ–¥"
        ])

        return builder.build()


class TarotStatisticsMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""

    def __init__(
            self,
            stats_data: Dict[str, Any],
            period: str = "all_time",
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

        Args:
            stats_data: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            period: –ü–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.stats_data = stats_data
        self.period = period

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        builder = MessageBuilder(self.style)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        period_names = {
            "all_time": "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è",
            "month": "–ó–∞ –º–µ—Å—è—Ü",
            "week": "–ó–∞ –Ω–µ–¥–µ–ª—é",
            "today": "–°–µ–≥–æ–¥–Ω—è"
        }

        period_name = period_names.get(self.period, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        builder.add_bold(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢–∞—Ä–æ").add_line()
        builder.add_italic(period_name).add_line()
        builder.add_separator().add_line()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_readings = self.stats_data.get("total_readings", 0)
        favorite_spread = self.stats_data.get("favorite_spread", "–¢—Ä–∏ –∫–∞—Ä—Ç—ã")
        most_common_card = self.stats_data.get("most_common_card", {})

        builder.add_key_value("–í—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤", total_readings)
        builder.add_key_value("–õ—é–±–∏–º—ã–π —Ä–∞—Å–∫–ª–∞–¥", favorite_spread)

        if most_common_card:
            card_text = f"{most_common_card['name']} ({most_common_card['count']} —Ä–∞–∑)"
            builder.add_key_value("–ß–∞—Å—Ç–∞—è –∫–∞—Ä—Ç–∞", card_text)

        builder.add_empty_line()

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞—Ä–∫–∞–Ω–∞–º
        arcana_stats = self.stats_data.get("arcana_distribution", {})
        if arcana_stats:
            builder.add_bold("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä–∫–∞–Ω–æ–≤:").add_line()
            major_percent = arcana_stats.get("major_percent", 0)
            minor_percent = arcana_stats.get("minor_percent", 0)

            builder.add_text(f"–°—Ç–∞—Ä—à–∏–µ: {major_percent}% | –ú–ª–∞–¥—à–∏–µ: {minor_percent}%")
            builder.add_line()
            builder.add_empty_line()

        # –¢–æ–ø –∫–∞—Ä—Ç
        top_cards = self.stats_data.get("top_cards", [])
        if top_cards:
            builder.add_bold("üé¥ –¢–æ–ø-5 –∫–∞—Ä—Ç:").add_line()
            for i, card in enumerate(top_cards[:5], 1):
                builder.add_text(f"{i}. {card['name']} ‚Äî {card['count']} —Ä–∞–∑")
                builder.add_line()

        return builder.build()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def format_card_message(
        card_data: Dict[str, Any],
        position: str = "upright",
        context: str = "general",
        spread_position: Optional[str] = None,
        **kwargs
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã.

    Args:
        card_data: –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
        position: –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        spread_position: –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–∞—Å–∫–ª–∞–¥–µ
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message = TarotCardMessage(
        card_data=card_data,
        position=CardPosition(position),
        context=TarotContext(context),
        spread_position=spread_position
    )
    return await message.format(**kwargs)


async def format_spread_message(
        spread_type: str,
        cards: List[Dict[str, Any]],
        question: Optional[str] = None,
        interpretation: Optional[str] = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞.

    Args:
        spread_type: –¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
        cards: –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç
        question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        interpretation: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message = TarotSpreadMessage(
        spread_type=spread_type,
        cards=cards,
        question=question,
        interpretation=interpretation
    )
    return await message.format()


async def format_educational_message(
        topic: str,
        content_type: str = "lesson"
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        topic: –¢–µ–º–∞
        content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message = TarotEducationalMessage(topic, content_type)
    return await message.format()


async def format_statistics_message(
        stats_data: Dict[str, Any],
        period: str = "all_time"
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

    Args:
        stats_data: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        period: –ü–µ—Ä–∏–æ–¥

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message = TarotStatisticsMessage(stats_data, period)
    return await message.format()


# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
class TarotMessages:
    """–ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¢–∞—Ä–æ."""

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
    SECTION_WELCOME = """
üé¥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–∞—Ä–æ!

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è
‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã
‚Ä¢ –ò–∑—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏–π

–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
"""

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É
    SPREAD_PREPARATION = """
üïØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥—É...

–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Å–≤–æ—ë–º –≤–æ–ø—Ä–æ—Å–µ.
–ö–∞—Ä—Ç—ã –æ—Ç–∫—Ä–æ—é—Ç —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å.

‚ú® –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–æ–ª–æ–¥—É...
"""

    # –ü–æ—Å–ª–µ —Ä–∞—Å–∫–ª–∞–¥–∞
    SPREAD_COMPLETE = """
‚úÖ –†–∞—Å–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!

–ü–æ–º–Ω–∏: –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∞ –Ω–µ –Ω–µ–∏–∑–±–µ–∂–Ω–æ—Å—Ç—å.
–¢–≤–æ–∏ —Ä–µ—à–µ–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –±—É–¥—É—â–µ–µ.

–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?
"""

    # –û—à–∏–±–∫–∏
    ERROR_DAILY_LIMIT = """
‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤

–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ 3 —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –¥–µ–Ω—å.
–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—Å–∫–ª–∞–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞.

–•–æ—á–µ—à—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã? –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É!
"""

    ERROR_PREMIUM_SPREAD = """
üîí –≠—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π

–†–∞—Å–∫–ª–∞–¥ "{spread_name}" ‚Äî —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø!
"""


# –¶–∏—Ç–∞—Ç—ã –æ –¢–∞—Ä–æ
TAROT_QUOTES = [
    "¬´–¢–∞—Ä–æ ‚Äî —ç—Ç–æ –∑–µ—Ä–∫–∞–ª–æ –¥—É—à–∏¬ª ‚Äî –ê–ª–∏—Å—Ç–µ—Ä –ö—Ä–æ—É–ª–∏",
    "¬´–ö–∞—Ä—Ç—ã –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –±—É–¥—É—â–µ–µ, –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å¬ª",
    "¬´–í –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ —Å–∫—Ä—ã—Ç–∞ –≤—Å–µ–ª–µ–Ω–Ω–∞—è —Å–º—ã—Å–ª–æ–≤¬ª",
    "¬´–¢–∞—Ä–æ ‚Äî —ç—Ç–æ —è–∑—ã–∫ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è¬ª",
    "¬´–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª—ã¬ª",
    "¬´–ö–∞—Ä—Ç—ã ‚Äî —ç—Ç–æ –∫–ª—é—á–∏ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –¥–≤–µ—Ä—è–º¬ª",
    "¬´–¢–∞—Ä–æ —É—á–∏—Ç –Ω–∞—Å –≤–∏–¥–µ—Ç—å –Ω–µ–≤–∏–¥–∏–º–æ–µ¬ª",
    "¬´–ö–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ ‚Äî —ç—Ç–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è¬ª"
]


def get_random_tarot_quote() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –æ –¢–∞—Ä–æ."""
    return random.choice(TAROT_QUOTES)


logger.info("–ú–æ–¥—É–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –¢–∞—Ä–æ –∑–∞–≥—Ä—É–∂–µ–Ω")