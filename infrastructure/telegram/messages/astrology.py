"""
–ú–æ–¥—É–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
- –û–ø–∏—Å–∞–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
- –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
- –õ—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
- –°–∏–Ω–∞—Å—Ç—Ä–∏—è –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import Optional, Dict, Any, List, Tuple
from datetime import datetime, date, timedelta
from enum import Enum
import math

from .base import (
    BaseMessage, TemplateMessage, MessageBuilder,
    MessageStyle, MessageEmoji, MessageFormatter
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class ZodiacSign(Enum):
    """–ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞."""
    ARIES = ("aries", "–û–≤–µ–Ω", "‚ôà", "21.03-19.04")
    TAURUS = ("taurus", "–¢–µ–ª–µ—Ü", "‚ôâ", "20.04-20.05")
    GEMINI = ("gemini", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "‚ôä", "21.05-20.06")
    CANCER = ("cancer", "–†–∞–∫", "‚ôã", "21.06-22.07")
    LEO = ("leo", "–õ–µ–≤", "‚ôå", "23.07-22.08")
    VIRGO = ("virgo", "–î–µ–≤–∞", "‚ôç", "23.08-22.09")
    LIBRA = ("libra", "–í–µ—Å—ã", "‚ôé", "23.09-22.10")
    SCORPIO = ("scorpio", "–°–∫–æ—Ä–ø–∏–æ–Ω", "‚ôè", "23.10-21.11")
    SAGITTARIUS = ("sagittarius", "–°—Ç—Ä–µ–ª–µ—Ü", "‚ôê", "22.11-21.12")
    CAPRICORN = ("capricorn", "–ö–æ–∑–µ—Ä–æ–≥", "‚ôë", "22.12-19.01")
    AQUARIUS = ("aquarius", "–í–æ–¥–æ–ª–µ–π", "‚ôí", "20.01-18.02")
    PISCES = ("pisces", "–†—ã–±—ã", "‚ôì", "19.02-20.03")

    def __init__(self, code: str, name: str, symbol: str, dates: str):
        self.code = code
        self.rus_name = name
        self.symbol = symbol
        self.dates = dates


class Planet(Enum):
    """–ü–ª–∞–Ω–µ—Ç—ã."""
    SUN = ("sun", "–°–æ–ª–Ω—Ü–µ", "‚òâ", "–ª–∏—á–Ω–æ—Å—Ç—å")
    MOON = ("moon", "–õ—É–Ω–∞", "‚òΩ", "—ç–º–æ—Ü–∏–∏")
    MERCURY = ("mercury", "–ú–µ—Ä–∫—É—Ä–∏–π", "‚òø", "–æ–±—â–µ–Ω–∏–µ")
    VENUS = ("venus", "–í–µ–Ω–µ—Ä–∞", "‚ôÄ", "–ª—é–±–æ–≤—å")
    MARS = ("mars", "–ú–∞—Ä—Å", "‚ôÇ", "–¥–µ–π—Å—Ç–≤–∏–µ")
    JUPITER = ("jupiter", "–Æ–ø–∏—Ç–µ—Ä", "‚ôÉ", "—É–¥–∞—á–∞")
    SATURN = ("saturn", "–°–∞—Ç—É—Ä–Ω", "‚ôÑ", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
    URANUS = ("uranus", "–£—Ä–∞–Ω", "‚ôÖ", "–ø–µ—Ä–µ–º–µ–Ω—ã")
    NEPTUNE = ("neptune", "–ù–µ–ø—Ç—É–Ω", "‚ôÜ", "–∏–ª–ª—é–∑–∏–∏")
    PLUTO = ("pluto", "–ü–ª—É—Ç–æ–Ω", "‚ôá", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è")

    def __init__(self, code: str, name: str, symbol: str, sphere: str):
        self.code = code
        self.rus_name = name
        self.symbol = symbol
        self.sphere = sphere


class AspectType(Enum):
    """–¢–∏–ø—ã –∞—Å–ø–µ–∫—Ç–æ–≤."""
    CONJUNCTION = ("conjunction", "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "‚òå", 0, "—Å–∏–ª—å–Ω—ã–π")
    SEXTILE = ("sextile", "–°–µ–∫—Å—Ç–∏–ª—å", "‚öπ", 60, "–≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π")
    SQUARE = ("square", "–ö–≤–∞–¥—Ä–∞—Ç", "‚ñ°", 90, "–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π")
    TRINE = ("trine", "–¢—Ä–∏–Ω", "‚ñ≥", 120, "–≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π")
    OPPOSITION = ("opposition", "–û–ø–ø–æ–∑–∏—Ü–∏—è", "‚òç", 180, "–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π")

    def __init__(self, code: str, name: str, symbol: str, angle: int, nature: str):
        self.code = code
        self.rus_name = name
        self.symbol = symbol
        self.angle = angle
        self.nature = nature


class MoonPhase(Enum):
    """–§–∞–∑—ã –ª—É–Ω—ã."""
    NEW_MOON = ("new_moon", "–ù–æ–≤–æ–ª—É–Ω–∏–µ", "üåë", "–Ω–∞—á–∏–Ω–∞–Ω–∏—è")
    WAXING_CRESCENT = ("waxing_crescent", "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø", "üåí", "—Ä–æ—Å—Ç")
    FIRST_QUARTER = ("first_quarter", "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å", "üåì", "–¥–µ–π—Å—Ç–≤–∏–µ")
    WAXING_GIBBOUS = ("waxing_gibbous", "–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞", "üåî", "—Ä–∞–∑–≤–∏—Ç–∏–µ")
    FULL_MOON = ("full_moon", "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "üåï", "–∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è")
    WANING_GIBBOUS = ("waning_gibbous", "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞", "üåñ", "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å")
    LAST_QUARTER = ("last_quarter", "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å", "üåó", "–æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ")
    WANING_CRESCENT = ("waning_crescent", "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø", "üåò", "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")

    def __init__(self, code: str, name: str, emoji: str, keywords: str):
        self.code = code
        self.rus_name = name
        self.emoji = emoji
        self.keywords = keywords


class HoroscopeMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤."""

    def __init__(
            self,
            sign: ZodiacSign,
            horoscope_type: str,
            horoscope_data: Dict[str, Any],
            is_personal: bool = False,
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞.

        Args:
            sign: –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
            horoscope_type: –¢–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞ (daily, weekly, etc.)
            horoscope_data: –î–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
            is_personal: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏ –≥–æ—Ä–æ—Å–∫–æ–ø
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.sign = sign
        self.horoscope_type = horoscope_type
        self.horoscope_data = horoscope_data
        self.is_personal = is_personal

        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {sign.rus_name}")

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        builder = MessageBuilder(self.style)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self._add_header(builder)

        # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑
        self._add_main_forecast(builder)

        # –°—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
        self._add_life_spheres(builder)

        # –°–æ–≤–µ—Ç—ã
        self._add_advice(builder)

        # –ß–∏—Å–ª–∞ –∏ —Ü–≤–µ—Ç–∞
        self._add_lucky_items(builder)

        # –†–µ–π—Ç–∏–Ω–≥ –¥–Ω—è (–¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ)
        if self.horoscope_type == "daily":
            self._add_day_rating(builder)

        return builder.build()

    def _add_header(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        # –¢–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞
        type_names = {
            "daily": "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            "weekly": "–Ω–∞ –Ω–µ–¥–µ–ª—é",
            "monthly": "–Ω–∞ –º–µ—Å—è—Ü",
            "yearly": "–Ω–∞ –≥–æ–¥",
            "love": "–ª—é–±–æ–≤–Ω—ã–π",
            "career": "–¥–µ–ª–æ–≤–æ–π"
        }

        type_name = type_names.get(self.horoscope_type, "")
        personal_prefix = "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π " if self.is_personal else ""

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = f"{self.sign.symbol} {personal_prefix}–ì–æ—Ä–æ—Å–∫–æ–ø {type_name}"
        builder.add_bold(header).add_line()

        # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ - –∏–º—è
        if self.is_personal and "user_name" in self.horoscope_data:
            builder.add_italic(f"–¥–ª—è {self.horoscope_data['user_name']}").add_line()

        # –ü–µ—Ä–∏–æ–¥
        if "period" in self.horoscope_data:
            builder.add_text(f"üìÖ {self.horoscope_data['period']}").add_line()

        builder.add_separator().add_line()

    def _add_main_forecast(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑."""
        forecast = self.horoscope_data.get("main_forecast", "")

        if forecast:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
            paragraphs = forecast.split("\n\n")
            for paragraph in paragraphs:
                builder.add_line(paragraph)
                builder.add_empty_line()

    def _add_life_spheres(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å—Ñ–µ—Ä–∞–º –∂–∏–∑–Ω–∏."""
        spheres = self.horoscope_data.get("spheres", {})

        if spheres:
            builder.add_bold("üéØ –ü–æ —Å—Ñ–µ—Ä–∞–º –∂–∏–∑–Ω–∏:").add_line()
            builder.add_empty_line()

            sphere_emojis = {
                "love": "üíï",
                "career": "üíº",
                "health": "üåø",
                "finance": "üí∞",
                "family": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶"
            }

            for sphere, forecast in spheres.items():
                emoji = sphere_emojis.get(sphere, "‚Ä¢")
                sphere_names = {
                    "love": "–õ—é–±–æ–≤—å",
                    "career": "–ö–∞—Ä—å–µ—Ä–∞",
                    "health": "–ó–¥–æ—Ä–æ–≤—å–µ",
                    "finance": "–§–∏–Ω–∞–Ω—Å—ã",
                    "family": "–°–µ–º—å—è"
                }

                name = sphere_names.get(sphere, sphere)
                builder.add_text(f"{emoji} ").add_bold(f"{name}:")
                builder.add_text(f" {forecast}").add_line()

            builder.add_empty_line()

    def _add_advice(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç—ã."""
        advice = self.horoscope_data.get("advice", "")

        if advice:
            builder.add_bold("üí° –°–æ–≤–µ—Ç:").add_line()
            builder.add_italic(advice).add_line()
            builder.add_empty_line()

    def _add_lucky_items(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∏—Å–ª–∞ –∏ —Ü–≤–µ—Ç–∞."""
        lucky_items = self.horoscope_data.get("lucky_items", {})

        if lucky_items:
            items_text = []

            if "numbers" in lucky_items:
                numbers = ", ".join(str(n) for n in lucky_items["numbers"])
                items_text.append(f"üî¢ –ß–∏—Å–ª–∞: {numbers}")

            if "colors" in lucky_items:
                colors = ", ".join(lucky_items["colors"])
                items_text.append(f"üé® –¶–≤–µ—Ç–∞: {colors}")

            if "time" in lucky_items:
                items_text.append(f"‚è∞ –í—Ä–µ–º—è: {lucky_items['time']}")

            if items_text:
                builder.add_text(" | ".join(items_text)).add_line()
                builder.add_empty_line()

    def _add_day_rating(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥–Ω—è."""
        ratings = self.horoscope_data.get("ratings", {})

        if ratings:
            builder.add_bold("üìä –†–µ–π—Ç–∏–Ω–≥ –¥–Ω—è:").add_line()

            for category, rating in ratings.items():
                stars = "‚≠ê" * rating + "‚òÜ" * (5 - rating)
                category_names = {
                    "overall": "–û–±—â–∏–π",
                    "love": "–õ—é–±–æ–≤—å",
                    "work": "–†–∞–±–æ—Ç–∞",
                    "health": "–ó–¥–æ—Ä–æ–≤—å–µ"
                }

                name = category_names.get(category, category)
                builder.add_text(f"{name}: {stars}").add_line()


class NatalChartMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã."""

    def __init__(
            self,
            chart_data: Dict[str, Any],
            section: Optional[str] = None,
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.

        Args:
            chart_data: –î–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
            section: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∫–∞—Ä—Ç—ã
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.chart_data = chart_data
        self.section = section

        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã, —Ä–∞–∑–¥–µ–ª: {section}")

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã."""
        builder = MessageBuilder(self.style)

        if not self.section:
            # –û–±—â–∏–π –æ–±–∑–æ—Ä
            return self._format_overview(builder)
        elif self.section == "planets_in_signs":
            return self._format_planets_in_signs(builder)
        elif self.section == "planets_in_houses":
            return self._format_planets_in_houses(builder)
        elif self.section == "aspects":
            return self._format_aspects(builder)
        elif self.section == "summary":
            return self._format_summary(builder)

        return builder.build()

    def _format_overview(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π –æ–±–∑–æ—Ä."""
        user_name = self.chart_data.get("user_name", "")
        birth_date = self.chart_data.get("birth_date", "")
        birth_time = self.chart_data.get("birth_time", "")
        birth_place = self.chart_data.get("birth_place", "")

        builder.add_bold("üó∫ –í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞").add_line()

        if user_name:
            builder.add_italic(user_name).add_line()

        builder.add_separator().add_line()

        # –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è
        builder.add_bold("üìã –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è:").add_line()
        builder.add_text(f"üìÖ –î–∞—Ç–∞: {birth_date}").add_line()
        builder.add_text(f"‚è∞ –í—Ä–µ–º—è: {birth_time}").add_line()
        builder.add_text(f"üìç –ú–µ—Å—Ç–æ: {birth_place}").add_line()

        builder.add_empty_line()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        builder.add_bold("üåü –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:").add_line()

        # –°–æ–ª–Ω—Ü–µ, –õ—É–Ω–∞, –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç
        sun = self.chart_data.get("sun_sign", "")
        moon = self.chart_data.get("moon_sign", "")
        asc = self.chart_data.get("ascendant", "")

        if sun:
            builder.add_text(f"‚òâ –°–æ–ª–Ω—Ü–µ –≤ {sun}").add_line()
        if moon:
            builder.add_text(f"‚òΩ –õ—É–Ω–∞ –≤ {moon}").add_line()
        if asc:
            builder.add_text(f"‚ÜóÔ∏è –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç –≤ {asc}").add_line()

        builder.add_empty_line()

        # –î–æ–º–∏–Ω–∞–Ω—Ç—ã
        dominants = self.chart_data.get("dominants", {})
        if dominants:
            builder.add_bold("üéØ –î–æ–º–∏–Ω–∞–Ω—Ç—ã:").add_line()

            if "element" in dominants:
                builder.add_text(f"–°—Ç–∏—Ö–∏—è: {dominants['element']}").add_line()
            if "quality" in dominants:
                builder.add_text(f"–ö–∞—á–µ—Å—Ç–≤–æ: {dominants['quality']}").add_line()
            if "hemisphere" in dominants:
                builder.add_text(f"–ü–æ–ª—É—Å—Ñ–µ—Ä–∞: {dominants['hemisphere']}").add_line()

        return builder.build()

    def _format_planets_in_signs(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–µ—Ç—ã –≤ –∑–Ω–∞–∫–∞—Ö."""
        builder.add_bold("ü™ê –ü–ª–∞–Ω–µ—Ç—ã –≤ –∑–Ω–∞–∫–∞—Ö").add_line()
        builder.add_separator().add_line()

        planets = self.chart_data.get("planets", [])

        for planet_data in planets:
            planet_name = planet_data.get("name", "")
            sign = planet_data.get("sign", "")
            degree = planet_data.get("degree", 0)
            is_retrograde = planet_data.get("is_retrograde", False)

            # –ü–ª–∞–Ω–µ—Ç–∞ –∏ –∑–Ω–∞–∫
            planet_line = f"{planet_name} –≤ {sign} "
            planet_line += f"({degree}¬∞)"

            if is_retrograde:
                planet_line += " ‚Ñû"

            builder.add_bold(planet_line).add_line()

            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
            interpretation = planet_data.get("interpretation", "")
            if interpretation:
                builder.add_line(interpretation)

            builder.add_empty_line()

        return builder.build()

    def _format_planets_in_houses(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–µ—Ç—ã –≤ –¥–æ–º–∞—Ö."""
        builder.add_bold("üè† –ü–ª–∞–Ω–µ—Ç—ã –≤ –¥–æ–º–∞—Ö").add_line()
        builder.add_separator().add_line()

        houses = self.chart_data.get("houses", [])

        for house_data in houses:
            house_num = house_data.get("number", 0)
            sign = house_data.get("sign", "")
            planets = house_data.get("planets", [])

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–º–∞
            house_meanings = {
                1: "–õ–∏—á–Ω–æ—Å—Ç—å",
                2: "–†–µ—Å—É—Ä—Å—ã",
                3: "–û–±—â–µ–Ω–∏–µ",
                4: "–î–æ–º –∏ —Å–µ–º—å—è",
                5: "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
                6: "–†–∞–±–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
                7: "–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ",
                8: "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è",
                9: "–§–∏–ª–æ—Å–æ—Ñ–∏—è",
                10: "–ö–∞—Ä—å–µ—Ä–∞",
                11: "–î—Ä—É–∂–±–∞",
                12: "–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ"
            }

            meaning = house_meanings.get(house_num, "")
            builder.add_bold(f"{house_num} –¥–æ–º - {meaning}").add_line()
            builder.add_text(f"–ó–Ω–∞–∫: {sign}").add_line()

            if planets:
                builder.add_text("–ü–ª–∞–Ω–µ—Ç—ã: ")
                builder.add_text(", ".join(planets)).add_line()

                # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                interpretation = house_data.get("interpretation", "")
                if interpretation:
                    builder.add_empty_line()
                    builder.add_line(interpretation)
            else:
                builder.add_text("–ü–ª–∞–Ω–µ—Ç –Ω–µ—Ç").add_line()

            builder.add_empty_line()

        return builder.build()

    def _format_aspects(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Å–ø–µ–∫—Ç—ã."""
        builder.add_bold("üìê –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã").add_line()
        builder.add_separator().add_line()

        aspects = self.chart_data.get("aspects", [])

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∞—Å–ø–µ–∫—Ç–∞
        grouped_aspects = {}
        for aspect in aspects:
            aspect_type = aspect.get("type", "")
            if aspect_type not in grouped_aspects:
                grouped_aspects[aspect_type] = []
            grouped_aspects[aspect_type].append(aspect)

        # –í—ã–≤–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º
        aspect_order = ["conjunction", "trine", "sextile", "square", "opposition"]

        for aspect_type in aspect_order:
            if aspect_type in grouped_aspects:
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π AspectType
                for at in AspectType:
                    if at.code == aspect_type:
                        builder.add_bold(f"{at.symbol} {at.rus_name}").add_line()
                        break

                for aspect in grouped_aspects[aspect_type]:
                    planet1 = aspect.get("planet1", "")
                    planet2 = aspect.get("planet2", "")
                    orb = aspect.get("orb", 0)

                    builder.add_text(f"‚Ä¢ {planet1} - {planet2} ")
                    builder.add_text(f"(–æ—Ä–±–∏—Å {orb}¬∞)").add_line()

                builder.add_empty_line()

        return builder.build()

    def _format_summary(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–µ–µ —Ä–µ–∑—é–º–µ."""
        builder.add_bold("üìä –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏").add_line()
        builder.add_separator().add_line()

        summary = self.chart_data.get("summary", {})

        # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        strengths = summary.get("strengths", [])
        if strengths:
            builder.add_bold("üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:").add_line()
            builder.add_list(strengths)
            builder.add_empty_line()

        # –û–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
        challenges = summary.get("challenges", [])
        if challenges:
            builder.add_bold("üéØ –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:").add_line()
            builder.add_list(challenges)
            builder.add_empty_line()

        # –ñ–∏–∑–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
        life_purpose = summary.get("life_purpose", "")
        if life_purpose:
            builder.add_bold("üåü –ñ–∏–∑–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞:").add_line()
            builder.add_line(life_purpose)
            builder.add_empty_line()

        # –°–æ–≤–µ—Ç
        advice = summary.get("advice", "")
        if advice:
            builder.add_bold("üí° –°–æ–≤–µ—Ç:").add_line()
            builder.add_italic(advice)

        return builder.build()


class TransitMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ç—Ä–∞–Ω–∑–∏—Ç–∞—Ö."""

    def __init__(
            self,
            transits: List[Dict[str, Any]],
            period: str,
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤.

        Args:
            transits: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
            period: –ü–µ—Ä–∏–æ–¥ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.transits = transits
        self.period = period

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤."""
        builder = MessageBuilder(self.style)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        period_names = {
            "today": "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            "week": "–Ω–∞ –Ω–µ–¥–µ–ª—é",
            "month": "–Ω–∞ –º–µ—Å—è—Ü",
            "year": "–Ω–∞ –≥–æ–¥"
        }

        period_name = period_names.get(self.period, self.period)
        builder.add_bold(f"üåå –¢—Ä–∞–Ω–∑–∏—Ç—ã {period_name}").add_line()
        builder.add_separator().add_line()

        if not self.transits:
            builder.add_italic("–ó–Ω–∞—á–∏–º—ã—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç").add_line()
            return builder.build()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∏—Ç—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        important_transits = []
        regular_transits = []

        for transit in self.transits:
            if transit.get("is_important", False):
                important_transits.append(transit)
            else:
                regular_transits.append(transit)

        # –í–∞–∂–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã
        if important_transits:
            builder.add_bold("‚ö° –í–∞–∂–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã:").add_line()
            builder.add_empty_line()

            for transit in important_transits:
                self._format_transit(builder, transit, detailed=True)
                builder.add_empty_line()

        # –û–±—ã—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã
        if regular_transits:
            builder.add_bold("üåü –î—Ä—É–≥–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã:").add_line()
            builder.add_empty_line()

            for transit in regular_transits:
                self._format_transit(builder, transit, detailed=False)

        # –û–±—â–∏–π —Å–æ–≤–µ—Ç
        builder.add_empty_line()
        builder.add_italic("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–µ–ª!")

        return builder.build()

    def _format_transit(self, builder: MessageBuilder, transit: Dict[str, Any], detailed: bool) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç—Ä–∞–Ω–∑–∏—Ç."""
        transiting_planet = transit.get("transiting_planet", "")
        aspect = transit.get("aspect", "")
        natal_planet = transit.get("natal_planet", "")
        date_range = transit.get("date_range", "")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–∞–Ω–∑–∏—Ç–∞
        transit_text = f"{transiting_planet} {aspect} {natal_planet}"

        if detailed:
            builder.add_bold(transit_text).add_line()
            if date_range:
                builder.add_text(f"üìÖ {date_range}").add_line()

            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
            interpretation = transit.get("interpretation", "")
            if interpretation:
                builder.add_line(interpretation)

            # –°—Ñ–µ—Ä—ã –≤–ª–∏—è–Ω–∏—è
            spheres = transit.get("spheres", [])
            if spheres:
                builder.add_text("–°—Ñ–µ—Ä—ã –≤–ª–∏—è–Ω–∏—è: ")
                builder.add_text(", ".join(spheres)).add_line()
        else:
            # –ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            builder.add_text(f"‚Ä¢ {transit_text}")
            if date_range:
                builder.add_text(f" ({date_range})")
            builder.add_line()


class MoonPhaseMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ñ–∞–∑–∞—Ö –ª—É–Ω—ã."""

    def __init__(
            self,
            phase_data: Dict[str, Any],
            include_calendar: bool = False,
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ–∞–∑—ã –ª—É–Ω—ã.

        Args:
            phase_data: –î–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∑–µ –ª—É–Ω—ã
            include_calendar: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.phase_data = phase_data
        self.include_calendar = include_calendar

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–∞–∑–µ –ª—É–Ω—ã."""
        builder = MessageBuilder(self.style)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É
        phase_name = self.phase_data.get("phase_name", "")
        phase_emoji = self.phase_data.get("phase_emoji", "üåô")
        illumination = self.phase_data.get("illumination", 0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        builder.add_bold(f"{phase_emoji} –õ—É–Ω–∞ —Å–µ–≥–æ–¥–Ω—è").add_line()
        builder.add_separator().add_line()

        # –§–∞–∑–∞ –∏ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å
        builder.add_text(f"–§–∞–∑–∞: ").add_bold(phase_name).add_line()
        builder.add_text(f"–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: {illumination}%").add_line()

        # –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
        moon_sign = self.phase_data.get("moon_sign", "")
        if moon_sign:
            builder.add_text(f"–õ—É–Ω–∞ –≤ –∑–Ω–∞–∫–µ: {moon_sign}").add_line()

        builder.add_empty_line()

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–∑—ã
        self._add_phase_recommendations(builder)

        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        if self.include_calendar:
            self._add_lunar_calendar(builder)

        return builder.build()

    def _add_phase_recommendations(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–∑—ã."""
        recommendations = self.phase_data.get("recommendations", {})

        if recommendations:
            builder.add_bold("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:").add_line()
            builder.add_empty_line()

            # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = [
                ("general", "üåü –û–±—â–∏–µ", "general"),
                ("health", "üåø –ó–¥–æ—Ä–æ–≤—å–µ", "health"),
                ("beauty", "üíÑ –ö—Ä–∞—Å–æ—Ç–∞", "beauty"),
                ("garden", "üå± –°–∞–¥ –∏ –æ–≥–æ—Ä–æ–¥", "garden"),
                ("business", "üíº –î–µ–ª–∞", "business")
            ]

            for key, title, _ in categories:
                if key in recommendations and recommendations[key]:
                    builder.add_bold(title).add_line()

                    if isinstance(recommendations[key], list):
                        builder.add_list(recommendations[key])
                    else:
                        builder.add_line(recommendations[key])

                    builder.add_empty_line()

    def _add_lunar_calendar(self, builder: MessageBuilder) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
        calendar_data = self.phase_data.get("calendar", {})

        if calendar_data:
            builder.add_bold("üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Ñ–∞–∑—ã:").add_line()
            builder.add_empty_line()

            phases = calendar_data.get("upcoming_phases", [])
            for phase in phases[:4]:  # –ú–∞–∫—Å–∏–º—É–º 4 —Ñ–∞–∑—ã
                date = phase.get("date", "")
                name = phase.get("name", "")
                emoji = phase.get("emoji", "üåô")

                builder.add_text(f"{emoji} {date} ‚Äî {name}").add_line()


class SynastryMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–∏–Ω–∞—Å—Ç—Ä–∏–∏."""

    def __init__(
            self,
            synastry_data: Dict[str, Any],
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏–Ω–∞—Å—Ç—Ä–∏–∏.

        Args:
            synastry_data: –î–∞–Ω–Ω—ã–µ —Å–∏–Ω–∞—Å—Ç—Ä–∏–∏
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.synastry_data = synastry_data

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–Ω–∞—Å—Ç—Ä–∏–∏."""
        builder = MessageBuilder(self.style)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        person1 = self.synastry_data.get("person1_name", "–ü–∞—Ä—Ç–Ω–µ—Ä 1")
        person2 = self.synastry_data.get("person2_name", "–ü–∞—Ä—Ç–Ω–µ—Ä 2")

        builder.add_bold(f"üíë –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å").add_line()
        builder.add_text(f"{person1} –∏ {person2}").add_line()
        builder.add_separator().add_line()

        # –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        overall_rating = self.synastry_data.get("overall_rating", 0)
        builder.add_bold("–û–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ")
        builder.add_text(f"{overall_rating}/10 ")
        builder.add_text("‚≠ê" * (overall_rating // 2)).add_line()
        builder.add_empty_line()

        # –ü–æ —Å—Ñ–µ—Ä–∞–º
        spheres = self.synastry_data.get("spheres", {})
        if spheres:
            builder.add_bold("–ü–æ —Å—Ñ–µ—Ä–∞–º –∂–∏–∑–Ω–∏:").add_line()
            builder.add_empty_line()

            sphere_info = [
                ("emotional", "üíï –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å"),
                ("intellectual", "üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"),
                ("physical", "üî• –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ"),
                ("values", "üíé –û–±—â–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏"),
                ("communication", "üí¨ –û–±—â–µ–Ω–∏–µ"),
                ("longterm", "üè° –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã")
            ]

            for key, title in sphere_info:
                if key in spheres:
                    rating = spheres[key].get("rating", 0)
                    description = spheres[key].get("description", "")

                    builder.add_bold(title).add_line()
                    builder.add_text("–û—Ü–µ–Ω–∫–∞: ")
                    builder.add_text("‚≠ê" * rating).add_line()

                    if description:
                        builder.add_line(description)

                    builder.add_empty_line()

        # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        strengths = self.synastry_data.get("strengths", [])
        if strengths:
            builder.add_bold("üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–æ—é–∑–∞:").add_line()
            builder.add_list(strengths)
            builder.add_empty_line()

        # –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
        challenges = self.synastry_data.get("challenges", [])
        if challenges:
            builder.add_bold("üéØ –ù–∞–¥ —á–µ–º —Å—Ç–æ–∏—Ç –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:").add_line()
            builder.add_list(challenges)
            builder.add_empty_line()

        # –°–æ–≤–µ—Ç
        advice = self.synastry_data.get("advice", "")
        if advice:
            builder.add_bold("üí° –°–æ–≤–µ—Ç:").add_line()
            builder.add_italic(advice)

        return builder.build()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def format_horoscope_message(
        sign: str,
        horoscope_type: str,
        horoscope_data: Dict[str, Any],
        is_personal: bool = False
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
    # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
    zodiac_sign = None
    for zs in ZodiacSign:
        if zs.code == sign:
            zodiac_sign = zs
            break

    if not zodiac_sign:
        zodiac_sign = ZodiacSign.ARIES  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    message = HoroscopeMessage(
        sign=zodiac_sign,
        horoscope_type=horoscope_type,
        horoscope_data=horoscope_data,
        is_personal=is_personal
    )
    return await message.format()


async def format_natal_chart_message(
        chart_data: Dict[str, Any],
        section: Optional[str] = None
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã."""
    message = NatalChartMessage(chart_data, section)
    return await message.format()


async def format_transit_message(
        transits: List[Dict[str, Any]],
        period: str = "today"
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤."""
    message = TransitMessage(transits, period)
    return await message.format()


async def format_moon_phase_message(
        phase_data: Dict[str, Any],
        include_calendar: bool = False
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∞–∑—ã –ª—É–Ω—ã."""
    message = MoonPhaseMessage(phase_data, include_calendar)
    return await message.format()


async def format_synastry_message(
        synastry_data: Dict[str, Any]
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏–Ω–∞—Å—Ç—Ä–∏–∏."""
    message = SynastryMessage(synastry_data)
    return await message.format()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_zodiac_sign_by_date(birth_date: date) -> ZodiacSign:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è.

    Args:
        birth_date: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è

    Returns:
        –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
    """
    day = birth_date.day
    month = birth_date.month

    # –ì—Ä–∞–Ω–∏—Ü—ã –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
    if (month == 3 and day >= 21) or (month == 4 and day <= 19):
        return ZodiacSign.ARIES
    elif (month == 4 and day >= 20) or (month == 5 and day <= 20):
        return ZodiacSign.TAURUS
    elif (month == 5 and day >= 21) or (month == 6 and day <= 20):
        return ZodiacSign.GEMINI
    elif (month == 6 and day >= 21) or (month == 7 and day <= 22):
        return ZodiacSign.CANCER
    elif (month == 7 and day >= 23) or (month == 8 and day <= 22):
        return ZodiacSign.LEO
    elif (month == 8 and day >= 23) or (month == 9 and day <= 22):
        return ZodiacSign.VIRGO
    elif (month == 9 and day >= 23) or (month == 10 and day <= 22):
        return ZodiacSign.LIBRA
    elif (month == 10 and day >= 23) or (month == 11 and day <= 21):
        return ZodiacSign.SCORPIO
    elif (month == 11 and day >= 22) or (month == 12 and day <= 21):
        return ZodiacSign.SAGITTARIUS
    elif (month == 12 and day >= 22) or (month == 1 and day <= 19):
        return ZodiacSign.CAPRICORN
    elif (month == 1 and day >= 20) or (month == 2 and day <= 18):
        return ZodiacSign.AQUARIUS
    else:
        return ZodiacSign.PISCES


def calculate_moon_phase(date_obj: date) -> MoonPhase:
    """
    –í—ã—á–∏—Å–ª–∏—Ç—å —Ñ–∞–∑—É –ª—É–Ω—ã –¥–ª—è –¥–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º).

    Args:
        date_obj: –î–∞—Ç–∞

    Returns:
        –§–∞–∑–∞ –ª—É–Ω—ã
    """
    # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã

    year = date_obj.year
    month = date_obj.month
    day = date_obj.day

    if month < 3:
        year -= 1
        month += 12

    a = year // 100
    b = a // 4
    c = 2 - a + b
    e = int(365.25 * (year + 4716))
    f = int(30.6001 * (month + 1))
    jd = c + day + e + f - 1524.5

    # –ù–æ–≤–æ–ª—É–Ω–∏–µ 2000-01-06
    days_since_new = (jd - 2451549.5) % 29.53059

    phase = days_since_new / 29.53059

    if phase < 0.0625:
        return MoonPhase.NEW_MOON
    elif phase < 0.1875:
        return MoonPhase.WAXING_CRESCENT
    elif phase < 0.3125:
        return MoonPhase.FIRST_QUARTER
    elif phase < 0.4375:
        return MoonPhase.WAXING_GIBBOUS
    elif phase < 0.5625:
        return MoonPhase.FULL_MOON
    elif phase < 0.6875:
        return MoonPhase.WANING_GIBBOUS
    elif phase < 0.8125:
        return MoonPhase.LAST_QUARTER
    elif phase < 0.9375:
        return MoonPhase.WANING_CRESCENT
    else:
        return MoonPhase.NEW_MOON


# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
class AstrologyMessages:
    """–ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    SECTION_WELCOME = """
üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–∏!

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
‚Ä¢ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
‚Ä¢ –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ —Ñ–∞–∑–∞–º–∏ –ª—É–Ω—ã

–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
"""

    # –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è
    BIRTH_DATA_REQUIRED = """
üìã –î–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:
‚Ä¢ –î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ç–æ—á–Ω–æ–µ)
‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º–∏.
"""

    # –†–∞—Å—á—ë—Ç –∫–∞—Ä—Ç—ã
    CALCULATING_CHART = """
üåå –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...

–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è.
"""

    # –û—à–∏–±–∫–∏
    ERROR_INVALID_TIME = """
‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30
"""

    ERROR_PREMIUM_FEATURE = """
üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π

{feature_name} ‚Äî —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å.
–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!
"""


logger.info("–ú–æ–¥—É–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")