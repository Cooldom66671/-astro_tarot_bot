"""
–ú–æ–¥—É–ª—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- Onboarding –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
- –û–±—É—á–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import Optional, Dict, Any, List
from datetime import datetime
from enum import Enum
import random

from .base import (
    BaseMessage, TemplateMessage, MessageBuilder,
    MessageStyle, MessageEmoji, MessageFormatter
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class WelcomeMessageType(Enum):
    """–¢–∏–ø—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    FIRST_START = "first_start"
    RETURNING_USER = "returning_user"
    AFTER_BLOCK = "after_block"
    REFERRAL = "referral"
    WITH_PROMO = "with_promo"
    QUICK_START = "quick_start"


class OnboardingStep(Enum):
    """–®–∞–≥–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    WELCOME = "welcome"
    INTRODUCTION = "introduction"
    BIRTH_DATA = "birth_data"
    FEATURES = "features"
    FIRST_READING = "first_reading"
    SUBSCRIPTION = "subscription"
    COMPLETE = "complete"


class WelcomeMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""

    def __init__(
            self,
            message_type: WelcomeMessageType,
            user_data: Optional[Dict[str, Any]] = None,
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

        Args:
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.message_type = message_type
        self.user_data = user_data or {}

        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ {message_type.value}")

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        builder = MessageBuilder(self.style)

        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É
        if self.message_type == WelcomeMessageType.FIRST_START:
            return self._format_first_start(builder)
        elif self.message_type == WelcomeMessageType.RETURNING_USER:
            return self._format_returning_user(builder)
        elif self.message_type == WelcomeMessageType.AFTER_BLOCK:
            return self._format_after_block(builder)
        elif self.message_type == WelcomeMessageType.REFERRAL:
            return self._format_referral(builder)
        elif self.message_type == WelcomeMessageType.WITH_PROMO:
            return self._format_with_promo(builder)
        elif self.message_type == WelcomeMessageType.QUICK_START:
            return self._format_quick_start(builder)

        return builder.build()

    def _format_first_start(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞."""
        name = self.user_data.get("first_name", "–¥—Ä—É–≥")

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greetings = [
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ç–∞–π–Ω –∏ –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–π, {name}! ‚ú®",
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {name}! üåü –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å!",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name}! üîÆ –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–≤–µ–ª–∞ —Ç–µ–±—è —Å—é–¥–∞ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ..."
        ]

        builder.add_line(random.choice(greetings))
        builder.add_empty_line()

        # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
        builder.add_line("–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –¢–∞—Ä–æ –∏ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.")
        builder.add_line("–ü–æ–º–æ–≥—É —Ç–µ–±–µ:")
        builder.add_list([
            "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ª–Ω—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã üé¥",
            "–£–∑–Ω–∞—Ç—å, —á—Ç–æ –≥–æ—Ç–æ–≤—è—Ç –∑–≤—ë–∑–¥—ã ‚≠ê",
            "–†–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã üó∫",
            "–ù–∞–π—Ç–∏ –≥–∞—Ä–º–æ–Ω–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–µ–±—è üßò"
        ])

        builder.add_empty_line()

        # –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏
        builder.add_bold("–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:").add_line()
        builder.add_text("‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å ").add_bold("–ö–∞—Ä—Ç—É –¥–Ω—è").add_text(" ‚Äî —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è").add_line()
        builder.add_text("‚Ä¢ –°–¥–µ–ª–∞—Ç—å ").add_bold("–†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ").add_text(" –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å").add_line()
        builder.add_text("‚Ä¢ –ü—Ä–æ—á–∏—Ç–∞—Ç—å ").add_bold("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø").add_line()

        builder.add_empty_line()
        builder.add_italic("–í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º —Ç–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! üëá")

        return builder.build()

    def _format_returning_user(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        name = self.user_data.get("first_name", "–¥—Ä—É–≥")
        days_away = self.user_data.get("days_away", 0)

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if days_away == 0:
            builder.add_line(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! üåü")
        elif days_away == 1:
            builder.add_line(f"–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, {name}! ‚ú®")
        elif days_away < 7:
            builder.add_line(f"–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, {name}! üåô")
            builder.add_line(f"–ü—Ä–æ—à–ª–æ {days_away} {MessageFormatter.pluralize(days_away, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')}...")
        else:
            builder.add_line(f"–ö–∞–∫–∞—è —Ä–∞–¥–æ—Å—Ç—å –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞, {name}! üéâ")
            builder.add_line("–°—Ç–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è!")

        builder.add_empty_line()

        # –ß—Ç–æ –Ω–æ–≤–æ–≥–æ
        if days_away > 7:
            builder.add_bold("–ü–æ–∫–∞ —Ç–µ–±—è –Ω–µ –±—ã–ª–æ:").add_line()
            builder.add_list([
                "–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ üé¥",
                "–£–ª—É—á—à–µ–Ω—ã –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã ‚≠ê",
                "–ü–æ—è–≤–∏–ª—Å—è –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å üåô"
            ])
            builder.add_empty_line()

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        last_action = self.user_data.get("last_action")
        if last_action == "tarot_reading":
            builder.add_line("–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –¢–∞—Ä–æ? –£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¥–ª—è —Ç–µ–±—è!")
        elif last_action == "horoscope":
            builder.add_line("–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —É–∂–µ –≥–æ—Ç–æ–≤! –£–∑–Ω–∞–π, —á—Ç–æ –∂–¥—ë—Ç —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è.")
        else:
            builder.add_line("–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? –í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!")

        return builder.build()

    def _format_after_block(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        name = self.user_data.get("first_name", "–¥—Ä—É–≥")

        builder.add_line(f"–ü—Ä–∏–≤–µ—Ç, {name}! –†–∞–¥, —á—Ç–æ —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è! ü§ó")
        builder.add_empty_line()

        builder.add_line("–Ø –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã.")
        builder.add_line("–í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.")

        builder.add_empty_line()
        builder.add_italic("–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è?")

        return builder.build()

    def _format_referral(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        name = self.user_data.get("first_name", "–¥—Ä—É–≥")
        referrer_name = self.user_data.get("referrer_name", "—Ç–≤–æ–π –¥—Ä—É–≥")

        builder.add_line(f"–ü—Ä–∏–≤–µ—Ç, {name}! üåü")
        builder.add_line(f"–¢–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª(–∞) {referrer_name} ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!")

        builder.add_empty_line()

        builder.add_bold("üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:").add_line()
        builder.add_list([
            "3 –¥–Ω—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫",
            "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ ¬´–ü—É—Ç—å –∫ —Å–µ–±–µ¬ª",
            "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑"
        ])

        builder.add_empty_line()
        builder.add_line("–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ç–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è!")

        return builder.build()

    def _format_with_promo(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º."""
        name = self.user_data.get("first_name", "–¥—Ä—É–≥")
        promo_code = self.user_data.get("promo_code", "WELCOME")
        discount = self.user_data.get("discount", 10)

        builder.add_line(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! ‚ú®")
        builder.add_empty_line()

        builder.add_line(f"üéÅ –¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ {self._format_code(promo_code)} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        builder.add_line(f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–∫–∏–¥–∫—É {discount}% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É!")

        builder.add_empty_line()

        builder.add_line("–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:")
        builder.add_list([
            "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ",
            "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã",
            "–ê–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã",
            "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
        ])

        builder.add_empty_line()
        builder.add_italic("–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏ –º–∞–∫—Å–∏–º—É–º! üöÄ")

        return builder.build()

    def _format_quick_start(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞."""
        builder.add_bold("–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç üöÄ").add_line()
        builder.add_empty_line()

        builder.add_line("–•–æ—á–µ—à—å —Å—Ä–∞–∑—É –∫ –¥–µ–ª—É? –û—Ç–ª–∏—á–Ω–æ!")
        builder.add_line("–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ç–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:")

        builder.add_empty_line()

        builder.add_text("üé¥ ").add_bold("/card").add_text(" ‚Äî –∫–∞—Ä—Ç–∞ –¥–Ω—è").add_line()
        builder.add_text("üîÆ ").add_bold("/spread").add_text(" ‚Äî —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ").add_line()
        builder.add_text("‚≠ê ").add_bold("/horoscope").add_text(" ‚Äî –≥–æ—Ä–æ—Å–∫–æ–ø").add_line()
        builder.add_text("üåô ").add_bold("/moon").add_text(" ‚Äî —Ñ–∞–∑–∞ –ª—É–Ω—ã").add_line()

        builder.add_empty_line()
        builder.add_italic("–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –≤–Ω–∏–∑—É üëá")

        return builder.build()


class OnboardingMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""

    # –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
    STEP_TEMPLATES = {
        OnboardingStep.WELCOME: {
            "title": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! üåü",
            "content": [
                "–Ø –ø—Ä–æ–≤–µ–¥—É —Ç–µ–±—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤,",
                "—á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—ë –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥ —Ç–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏."
            ],
            "footer": "–≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ 2-3 –º–∏–Ω—É—Ç—ã ‚è±"
        },
        OnboardingStep.INTRODUCTION: {
            "title": "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ ü§ù",
            "content": [
                "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç.",
                "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:",
                "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ",
                "‚Ä¢ –ü–æ–Ω–∏–º–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å",
                "‚Ä¢ –†–∞—Å–∫—Ä—ã–≤–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —á–µ—Ä–µ–∑ –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É",
                "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"
            ],
            "footer": "–ê –∫–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
        },
        OnboardingStep.BIRTH_DATA: {
            "title": "–î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è üéÇ",
            "content": [
                "–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã",
                "–º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ—ë–º —Ä–æ–∂–¥–µ–Ω–∏–∏.",
                "",
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ —Ä–∞—Å—á—ë—Ç—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º–∏",
                "–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è."
            ],
            "footer": "–ù–µ –≤–æ–ª–Ω—É–π—Å—è, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥—ë–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã üîí"
        },
        OnboardingStep.FEATURES: {
            "title": "–ß—Ç–æ —è —É–º–µ—é üéØ",
            "content": [
                "üé¥ **–¢–∞—Ä–æ** ‚Äî –æ—Ç –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—Ç—ã –¥–Ω—è –¥–æ —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤",
                "üîÆ **–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è** ‚Äî –≥–æ—Ä–æ—Å–∫–æ–ø—ã, –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞, —Ç—Ä–∞–Ω–∑–∏—Ç—ã",
                "üíë **–°–∏–Ω–∞—Å—Ç—Ä–∏—è** ‚Äî –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
                "üåô **–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å** ‚Äî –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏",
                "üìö **–û–±—É—á–µ–Ω–∏–µ** ‚Äî —Å—Ç–∞—Ç—å–∏ –∏ —É—Ä–æ–∫–∏"
            ],
            "footer": "–ò —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ! üöÄ"
        },
        OnboardingStep.FIRST_READING: {
            "title": "–¢–≤–æ–π –ø–µ—Ä–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ üé¥",
            "content": [
                "–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å —Å –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ ¬´–ö–∞—Ä—Ç–∞ –¥–Ω—è¬ª.",
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:",
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –¥–µ–Ω—å",
                "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π",
                "‚Ä¢ –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞—Ä—Ç–∞–º–∏ –¢–∞—Ä–æ"
            ],
            "footer": "–ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è?"
        },
        OnboardingStep.SUBSCRIPTION: {
            "title": "–†–∞—Å—à–∏—Ä—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ üíé",
            "content": [
                "–° –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:",
                "‚Ä¢ 1 –∫–∞—Ä—Ç—É –¥–Ω—è",
                "‚Ä¢ 3 –ø—Ä–æ—Å—Ç—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –¥–µ–Ω—å",
                "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã",
                "",
                "–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç:",
                "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã",
                "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã",
                "‚Ä¢ –ù–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É",
                "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
            ],
            "footer": "–ü–æ–ø—Ä–æ–±—É–π 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ! üéÅ"
        },
        OnboardingStep.COMPLETE: {
            "title": "–í—Å—ë –≥–æ—Ç–æ–≤–æ! üéâ",
            "content": [
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤",
                "–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –º–∏—Ä —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è.",
                "",
                "–ü–æ–º–Ω–∏: —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ",
                "–Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª."
            ],
            "footer": "–£–¥–∞—á–∏ –Ω–∞ —Ç–≤–æ—ë–º –ø—É—Ç–∏! ‚ú®"
        }
    }

    def __init__(
            self,
            step: OnboardingStep,
            user_data: Optional[Dict[str, Any]] = None,
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.

        Args:
            step: –®–∞–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.step = step
        self.user_data = user_data or {}

        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è —à–∞–≥–∞ {step.value}")

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
        template = self.STEP_TEMPLATES.get(self.step, {})
        builder = MessageBuilder(self.style)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress = self._get_progress()
        if progress:
            builder.add_line(progress).add_empty_line()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if "title" in template:
            builder.add_bold(template["title"]).add_line()
            builder.add_empty_line()

        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if "content" in template:
            for line in template["content"]:
                if line.startswith("‚Ä¢"):
                    # –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
                    builder.add_text("  ").add_line(line)
                elif "**" in line:
                    # –°—Ç—Ä–æ–∫–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
                    parts = line.split("**")
                    for i, part in enumerate(parts):
                        if i % 2 == 0:
                            builder.add_text(part)
                        else:
                            builder.add_bold(part)
                    builder.add_line()
                else:
                    builder.add_line(line)

        # –ü–æ–¥–≤–∞–ª
        if "footer" in template:
            builder.add_empty_line()
            builder.add_italic(template["footer"])

        return builder.build()

    def _get_progress(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        steps = list(OnboardingStep)
        current_index = steps.index(self.step)
        total_steps = len(steps) - 1  # –ò—Å–∫–ª—é—á–∞–µ–º COMPLETE

        if self.step == OnboardingStep.COMPLETE:
            return ""

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        filled = "‚ñì" * (current_index + 1)
        empty = "‚ñë" * (total_steps - current_index - 1)

        return f"–®–∞–≥ {current_index + 1}/{total_steps} {filled}{empty}"


class WelcomeInfoMessage(BaseMessage):
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–æ—Ç–µ."""

    def __init__(
            self,
            info_type: str,
            style: MessageStyle = MessageStyle.MARKDOWN_V2
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

        Args:
            info_type: –¢–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (about, features, privacy, etc.)
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        super().__init__(style)
        self.info_type = info_type

    async def format(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        builder = MessageBuilder(self.style)

        if self.info_type == "about":
            return self._format_about(builder)
        elif self.info_type == "features":
            return self._format_features(builder)
        elif self.info_type == "privacy":
            return self._format_privacy(builder)
        elif self.info_type == "commands":
            return self._format_commands(builder)
        elif self.info_type == "support":
            return self._format_support(builder)

        return builder.build()

    def _format_about(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."""
        builder.add_bold("ü§ñ –û –±–æ—Ç–µ").add_line()
        builder.add_separator().add_line()

        builder.add_line("–ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Äî —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
        builder.add_line("–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—é.")

        builder.add_empty_line()

        builder.add_bold("–ù–∞—à–∞ –º–∏—Å—Å–∏—è:").add_line()
        builder.add_line("–°–¥–µ–ª–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –¢–∞—Ä–æ –∏ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–∞–∂–¥–æ–º—É,")
        builder.add_line("–ø–æ–º–æ–≥–∞—è –ª—é–¥—è–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–π –ø—É—Ç—å.")

        builder.add_empty_line()

        builder.add_bold("–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—Å –æ—Å–æ–±–µ–Ω–Ω—ã–º–∏:").add_line()
        builder.add_list([
            "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏",
            "–£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
            "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ"
        ])

        builder.add_empty_line()

        builder.add_italic("–í–µ—Ä—Å–∏—è: 2.0.0 | –û–±–Ω–æ–≤–ª–µ–Ω–æ: –¥–µ–∫–∞–±—Ä—å 2024")

        return builder.build()

    def _format_features(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
        builder.add_bold("‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞").add_line()
        builder.add_separator().add_line()

        # –¢–∞—Ä–æ
        builder.add_bold("üé¥ –¢–∞—Ä–æ:").add_line()
        builder.add_list([
            "–ö–∞—Ä—Ç–∞ –¥–Ω—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π",
            "15+ –≤–∏–¥–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤",
            "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã",
            "–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤",
            "–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
        ])

        builder.add_empty_line()

        # –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è
        builder.add_bold("üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è:").add_line()
        builder.add_list([
            "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø",
            "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞",
            "–¢—Ä–∞–Ω–∑–∏—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏",
            "–°–∏–Ω–∞—Å—Ç—Ä–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)",
            "–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
        ])

        builder.add_empty_line()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        builder.add_bold("üåü –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:").add_line()
        builder.add_list([
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö",
            "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"
        ])

        return builder.build()

    def _format_privacy(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."""
        builder.add_bold("üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å").add_line()
        builder.add_separator().add_line()

        builder.add_line("–ú—ã —Å–µ—Ä—å—ë–∑–Ω–æ –æ—Ç–Ω–æ—Å–∏–º—Å—è –∫ –∑–∞—â–∏—Ç–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")

        builder.add_empty_line()

        builder.add_bold("–ß—Ç–æ –º—ã —Ö—Ä–∞–Ω–∏–º:").add_line()
        builder.add_list([
            "–ò–º—è –∏ ID Telegram (–¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)",
            "–î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤)",
            "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"
        ])

        builder.add_empty_line()

        builder.add_bold("–ú—ã –ù–ï:").add_line()
        builder.add_list([
            "–ù–µ –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º",
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ä–µ–∫–ª–∞–º—ã",
            "–ù–µ —Ö—Ä–∞–Ω–∏–º –ø–ª–∞—Ç—ë–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "–ù–µ —á–∏—Ç–∞–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        ])

        builder.add_empty_line()

        builder.add_line("–¢—ã –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç:")
        builder.add_list([
            "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ",
            "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
        ])

        builder.add_empty_line()
        builder.add_italic("–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /privacy_policy")

        return builder.build()

    def _format_commands(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
        builder.add_bold("üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞").add_line()
        builder.add_separator().add_line()

        commands = [
            ("/start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            ("/menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            ("/card", "–ö–∞—Ä—Ç–∞ –¥–Ω—è"),
            ("/spread", "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥"),
            ("/horoscope", "–ì–æ—Ä–æ—Å–∫–æ–ø"),
            ("/natal", "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"),
            ("/moon", "–§–∞–∑–∞ –ª—É–Ω—ã"),
            ("/history", "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤"),
            ("/profile", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
            ("/subscription", "–ü–æ–¥–ø–∏—Å–∫–∞"),
            ("/settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            ("/help", "–ü–æ–º–æ—â—å"),
            ("/support", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
        ]

        for cmd, description in commands:
            builder.add_text(self._format_code(cmd))
            builder.add_text(" ‚Äî ")
            builder.add_text(description)
            builder.add_line()

        builder.add_empty_line()
        builder.add_italic("–°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ üëá")

        return builder.build()

    def _format_support(self, builder: MessageBuilder) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."""
        builder.add_bold("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞").add_line()
        builder.add_separator().add_line()

        builder.add_line("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!")

        builder.add_empty_line()

        builder.add_bold("–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:").add_line()
        builder.add_text("üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: ")
        builder.add_link("@astrotaro_support", "https://t.me/astrotaro_support")
        builder.add_line()

        builder.add_text("üìß Email: ")
        builder.add_code("support@astrotaro.bot")
        builder.add_line()

        builder.add_empty_line()

        builder.add_bold("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:").add_line()
        builder.add_list([
            "–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è? ‚Üí /settings",
            "–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? ‚Üí /subscription",
            "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç–∞? ‚Üí –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            "–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç? ‚Üí /settings ‚Üí –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
        ])

        builder.add_empty_line()

        builder.add_bold("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:").add_line()
        builder.add_text("–û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2-4 —á–∞—Å–æ–≤")
        builder.add_line()
        builder.add_text("VIP-–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")

        return builder.build()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def get_welcome_message(
        message_type: WelcomeMessageType,
        user_data: Optional[Dict[str, Any]] = None
) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message = WelcomeMessage(message_type, user_data)
    return await message.format()


async def get_onboarding_message(
        step: OnboardingStep,
        user_data: Optional[Dict[str, Any]] = None
) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.

    Args:
        step: –®–∞–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message = OnboardingMessage(step, user_data)
    return await message.format()


async def get_info_message(info_type: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        info_type: –¢–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message = WelcomeInfoMessage(info_type)
    return await message.format()


# –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
def get_time_based_greeting(name: Optional[str] = None) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫.

    Args:
        name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    """
    hour = datetime.now().hour

    if 5 <= hour < 12:
        greetings = [
            "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ{name}! ‚òÄÔ∏è",
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —É—Ç—Ä–æ{name}! üåÖ",
            "–ß—É–¥–µ—Å–Ω–æ–≥–æ —É—Ç—Ä–∞{name}! ‚õÖ"
        ]
    elif 12 <= hour < 17:
        greetings = [
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å{name}! üåû",
            "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è{name}! ‚òÄÔ∏è",
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å{name}! üå§"
        ]
    elif 17 <= hour < 22:
        greetings = [
            "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä{name}! üåÜ",
            "–ß—É–¥–µ—Å–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞{name}! üåá",
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞{name}! üåÉ"
        ]
    else:
        greetings = [
            "–î–æ–±—Ä–æ–π –Ω–æ—á–∏{name}! üåô",
            "–í–æ–ª—à–µ–±–Ω–æ–π –Ω–æ—á–∏{name}! ‚ú®",
            "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏{name}! üåü"
        ]

    greeting = random.choice(greetings)
    name_part = f", {name}" if name else ""

    return greeting.format(name=name_part)


# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
WELCOME_QUOTES = [
    "¬´–ó–≤—ë–∑–¥—ã —Å–∫–ª–æ–Ω—è—é—Ç, –Ω–æ –Ω–µ –æ–±—è–∑—ã–≤–∞—é—Ç¬ª ‚Äî –ö–ª–∞–≤–¥–∏–π –ü—Ç–æ–ª–µ–º–µ–π",
    "¬´–í –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ —Å—É–¥—å–±–∞, –∞ –ø—É—Ç—å –∫ –Ω–µ–π¬ª",
    "¬´–ü–æ–∑–Ω–∞–π —Å–µ–±—è¬ª ‚Äî –î–µ–ª—å—Ñ–∏–π—Å–∫–∏–π –æ—Ä–∞–∫—É–ª",
    "¬´–ö–∞–∫ –≤–≤–µ—Ä—Ö—É, —Ç–∞–∫ –∏ –≤–Ω–∏–∑—É¬ª ‚Äî –ì–µ—Ä–º–µ—Å –¢—Ä–∏—Å–º–µ–≥–∏—Å—Ç",
    "¬´–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã¬ª ‚Äî –≠–ª–µ–æ–Ω–æ—Ä–∞ –†—É–∑–≤–µ–ª—å—Ç",
    "¬´–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ ‚Äî —ç—Ç–æ –¥–≤–µ—Ä—å –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è¬ª",
    "¬´–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è ‚Äî —ç—Ç–æ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≥–æ–≤–æ—Ä–∏—Ç –í—Å–µ–ª–µ–Ω–Ω–∞—è¬ª",
    "¬´–ú—É–¥—Ä–æ—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —É–¥–∏–≤–ª–µ–Ω–∏—è¬ª ‚Äî –°–æ–∫—Ä–∞—Ç"
]


def get_random_welcome_quote() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É."""
    return random.choice(WELCOME_QUOTES)


logger.info("–ú–æ–¥—É–ª—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω")