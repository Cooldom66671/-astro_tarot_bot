"""
–ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
- –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
- –û–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
- –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import Optional, Dict, Any, List, Union
from datetime import datetime, date
from enum import Enum

# –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from .base import (
    # –ö–ª–∞—Å—Å—ã
    BaseMessage,
    TemplateMessage,
    MessageBuilder,
    MessageFormatter,

    # –≠–Ω—É–º—ã
    MessageStyle,
    MessageType,

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    MessageEmoji
)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
from .welcome import (
    # –ö–ª–∞—Å—Å—ã
    WelcomeMessage,
    OnboardingMessage,
    WelcomeInfoMessage,

    # –≠–Ω—É–º—ã
    WelcomeMessageType,
    OnboardingStep,

    # –§—É–Ω–∫—Ü–∏–∏
    get_welcome_message,
    get_onboarding_message,
    get_info_message,
    get_time_based_greeting,
    get_random_welcome_quote,

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    WELCOME_QUOTES
)

# –°–æ–æ–±—â–µ–Ω–∏—è –¢–∞—Ä–æ
from .tarot import (
    # –ö–ª–∞—Å—Å—ã
    TarotCardMessage,
    TarotSpreadMessage,
    TarotEducationalMessage,
    TarotStatisticsMessage,

    # –≠–Ω—É–º—ã
    TarotContext,
    CardPosition,

    # –î–∞–Ω–Ω—ã–µ
    SpreadPosition,

    # –§—É–Ω–∫—Ü–∏–∏
    format_card_message,
    format_spread_message,
    format_educational_message,
    format_statistics_message,
    get_random_tarot_quote,

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    TarotMessages,
    TAROT_QUOTES
)

# –°–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
from .astrology import (
    # –ö–ª–∞—Å—Å—ã
    HoroscopeMessage,
    NatalChartMessage,
    TransitMessage,
    MoonPhaseMessage,
    SynastryMessage,

    # –≠–Ω—É–º—ã
    ZodiacSign,
    Planet,
    AspectType,
    MoonPhase,

    # –§—É–Ω–∫—Ü–∏–∏
    format_horoscope_message,
    format_natal_chart_message,
    format_transit_message,
    format_moon_phase_message,
    format_synastry_message,
    get_zodiac_sign_by_date,
    calculate_moon_phase,

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    AstrologyMessages
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


# –§–∞–±—Ä–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
class MessageFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""

    @staticmethod
    async def create_welcome(
            message_type: Union[str, WelcomeMessageType],
            user_data: Optional[Dict[str, Any]] = None
    ) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        if isinstance(message_type, str):
            message_type = WelcomeMessageType(message_type)
        return await get_welcome_message(message_type, user_data)

    @staticmethod
    async def create_onboarding(
            step: Union[str, OnboardingStep],
            user_data: Optional[Dict[str, Any]] = None
    ) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
        if isinstance(step, str):
            step = OnboardingStep(step)
        return await get_onboarding_message(step, user_data)

    @staticmethod
    async def create_tarot_card(
            card_data: Dict[str, Any],
            **kwargs
    ) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ."""
        return await format_card_message(card_data, **kwargs)

    @staticmethod
    async def create_tarot_spread(
            spread_type: str,
            cards: List[Dict[str, Any]],
            **kwargs
    ) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞."""
        return await format_spread_message(spread_type, cards, **kwargs)

    @staticmethod
    async def create_horoscope(
            sign: str,
            horoscope_type: str,
            horoscope_data: Dict[str, Any],
            **kwargs
    ) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        return await format_horoscope_message(sign, horoscope_type, horoscope_data, **kwargs)

    @staticmethod
    async def create_natal_chart(
            chart_data: Dict[str, Any],
            section: Optional[str] = None
    ) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã."""
        return await format_natal_chart_message(chart_data, section)


# –û–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
class CommonMessages:
    """–û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤."""

    # –û—à–∏–±–∫–∏
    ERROR_GENERIC = """
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""

    ERROR_NOT_FOUND = """
‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ

–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
"""

    ERROR_ACCESS_DENIED = """
üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω

–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
"""

    ERROR_LIMIT_REACHED = """
‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç

–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.
"""

    # –ó–∞–≥—Ä—É–∑–∫–∞
    LOADING = "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞..."
    PROCESSING = "‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞..."
    CALCULATING = "üßÆ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ..."
    GENERATING = "‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è..."

    # –£—Å–ø–µ—Ö
    SUCCESS_SAVED = "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ"
    SUCCESS_DELETED = "‚úÖ –£–¥–∞–ª–µ–Ω–æ"
    SUCCESS_UPDATED = "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ"
    SUCCESS_SENT = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    CONFIRM_DELETE = """
‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?
–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
"""

    CONFIRM_CANCEL = """
‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–º–µ–Ω—É

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?
–í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.
"""

    # –ü–æ–º–æ—â—å
    HELP_COMMAND_NOT_FOUND = """
‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
"""

    HELP_CONTACT_SUPPORT = """
üÜò –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:
@astrotaro_support
"""

    # –ü–æ–¥–ø–∏—Å–∫–∞
    SUBSCRIPTION_REQUIRED = """
‚≠ê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞

–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π.
–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!
"""

    SUBSCRIPTION_EXPIRED = """
‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.
–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.
"""

    # –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    MAINTENANCE_MODE = """
üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã

–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏—è–º–∏!
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
"""


# –®–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π."""

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    GREETING = TemplateMessage(
        "–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n\n{message}",
        MessageStyle.MARKDOWN_V2
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    NOTIFICATION = TemplateMessage(
        "üîî {title}\n\n{content}\n\n{footer}",
        MessageStyle.MARKDOWN_V2
    )

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    RESULT = TemplateMessage(
        "üìä {title}\n\n{result}\n\n–í—Ä–µ–º—è: {duration}",
        MessageStyle.MARKDOWN_V2
    )

    # –û—à–∏–±–∫–∏
    ERROR = TemplateMessage(
        "‚ùå –û—à–∏–±–∫–∞: {error_type}\n\n{error_message}\n\n–ö–æ–¥: {error_code}",
        MessageStyle.MARKDOWN_V2
    )

    # –ü–ª–∞—Ç–µ–∂–∏
    PAYMENT = TemplateMessage(
        "üí≥ –ü–ª–∞—Ç—ë–∂ #{payment_id}\n\n–°—É–º–º–∞: {amount} ‚ÇΩ\n–°—Ç–∞—Ç—É—Å: {status}\n–î–∞—Ç–∞: {date}",
        MessageStyle.MARKDOWN_V2
    )


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
class MessageUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""

    @staticmethod
    def create_progress_bar(current: int, total: int, length: int = 10) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä.

        Args:
            current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            total: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            length: –î–ª–∏–Ω–∞ –±–∞—Ä–∞

        Returns:
            –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        """
        if total == 0:
            return "‚ñë" * length

        filled = int(length * current / total)
        empty = length - filled

        return "‚ñì" * filled + "‚ñë" * empty

    @staticmethod
    def create_rating_stars(rating: float, max_rating: int = 5) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∑–≤—ë–∑–¥–∞–º–∏.

        Args:
            rating: –†–µ–π—Ç–∏–Ω–≥
            max_rating: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å–æ –∑–≤—ë–∑–¥–∞–º–∏
        """
        full_stars = int(rating)
        half_star = 1 if rating - full_stars >= 0.5 else 0
        empty_stars = max_rating - full_stars - half_star

        result = "‚≠ê" * full_stars
        if half_star:
            result += "‚ú®"
        result += "‚òÜ" * empty_stars

        return result

    @staticmethod
    def truncate_message(text: str, max_length: int = 4096) -> str:
        """
        –û–±—Ä–µ–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.

        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

        Returns:
            –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if len(text) <= max_length:
            return text

        # –û–±—Ä–µ–∑–∞–µ–º —Å —É—á—ë—Ç–æ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
        truncated = text[:max_length - 3] + "..."

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–µ–∑–∞—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏
        last_newline = truncated.rfind('\n', 0, -3)
        if last_newline > max_length // 2:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å –≤ —Ä–∞–∑—É–º–Ω–æ–º –º–µ—Å—Ç–µ
            truncated = truncated[:last_newline] + "\n..."

        return truncated

    @staticmethod
    def split_long_message(text: str, max_length: int = 4096) -> List[str]:
        """
        –†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏.

        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏

        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π
        """
        if len(text) <= max_length:
            return [text]

        parts = []
        current_part = ""

        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
        paragraphs = text.split('\n\n')

        for paragraph in paragraphs:
            # –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å–∞–º –ø–æ —Å–µ–±–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(paragraph) > max_length:
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                sentences = paragraph.split('. ')
                for sentence in sentences:
                    if len(current_part) + len(sentence) + 2 <= max_length:
                        if current_part:
                            current_part += ". " + sentence
                        else:
                            current_part = sentence
                    else:
                        if current_part:
                            parts.append(current_part + ".")
                        current_part = sentence
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–ª–µ–∑–µ—Ç –ª–∏ –∞–±–∑–∞—Ü
                if len(current_part) + len(paragraph) + 2 <= max_length:
                    if current_part:
                        current_part += "\n\n" + paragraph
                    else:
                        current_part = paragraph
                else:
                    if current_part:
                        parts.append(current_part)
                    current_part = paragraph

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            parts.append(current_part)

        return parts


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
class MessageConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π."""

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–ª–∏–Ω—ã
    MAX_MESSAGE_LENGTH = 4096
    MAX_CAPTION_LENGTH = 1024
    MAX_CALLBACK_DATA_LENGTH = 64

    # –¢–∞–π–º–∞—É—Ç—ã
    TYPING_DURATION = 2  # –°–µ–∫—É–Ω–¥—ã

    # –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    EMOJI_CATEGORIES = {
        "success": ["‚úÖ", "‚úîÔ∏è", "üëç", "üéâ", "üåü"],
        "error": ["‚ùå", "‚ö†Ô∏è", "üö´", "‚ùó", "‚õî"],
        "info": ["‚ÑπÔ∏è", "üí°", "üìã", "üìå", "üîç"],
        "loading": ["‚è≥", "‚è∞", "üîÑ", "‚öôÔ∏è", "üîß"],
        "question": ["‚ùì", "‚ùî", "ü§î", "üí≠", "üó®Ô∏è"],
        "warning": ["‚ö†Ô∏è", "üö®", "üì£", "üîî", "‚ùó"],
        "money": ["üí∞", "üíµ", "üí≥", "üíé", "üè¶"],
        "time": ["‚è∞", "üïê", "üìÖ", "üìÜ", "‚è±"],
        "magic": ["‚ú®", "üîÆ", "üåü", "üí´", "üåô"],
        "love": ["‚ù§Ô∏è", "üíï", "üíñ", "üíó", "üíù"]
    }

    # –°—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    TEXT_STYLES = {
        "bold": "*{}*",
        "italic": "_{}_",
        "code": "`{}`",
        "pre": "```\n{}\n```",
        "quote": ">{}"
    }


# –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
class MessageManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""

    def __init__(self, default_style: MessageStyle = MessageStyle.MARKDOWN_V2):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.

        Args:
            default_style: –°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        self.default_style = default_style
        self.factory = MessageFactory()
        self.templates = MessageTemplates()
        self.utils = MessageUtils()

        logger.debug("MessageManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def create(self, message_type: str, **kwargs) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞.

        Args:
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –Ω–∞ –º–µ—Ç–æ–¥—ã —Ñ–∞–±—Ä–∏–∫–∏
        creators = {
            "welcome": self.factory.create_welcome,
            "onboarding": self.factory.create_onboarding,
            "tarot_card": self.factory.create_tarot_card,
            "tarot_spread": self.factory.create_tarot_spread,
            "horoscope": self.factory.create_horoscope,
            "natal_chart": self.factory.create_natal_chart
        }

        creator = creators.get(message_type)
        if creator:
            return await creator(**kwargs)

        # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
        return CommonMessages.ERROR_GENERIC

    def format_error(self, error: Exception) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.

        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        error_type = type(error).__name__
        error_message = str(error)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_errors = {
            "ValueError": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "KeyError": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ",
            "PermissionError": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞",
            "TimeoutError": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        }

        user_error_type = user_errors.get(error_type, "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É
        logger.error(f"{error_type}: {error_message}", exc_info=True)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return self.templates.ERROR.format(
            error_type=user_error_type,
            error_message="–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è",
            error_code=f"ERR_{hash(error_message) % 10000:04d}"
        )


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
def with_typing(duration: int = 2):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞.

    Args:
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–±–æ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """

    def decorator(func):
        async def wrapper(message, *args, **kwargs):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
            await message.answer_chat_action("typing")

            # –ñ–¥—ë–º
            import asyncio
            await asyncio.sleep(duration)

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            return await func(message, *args, **kwargs)

        return wrapper

    return decorator


def split_if_long(max_length: int = 4096):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    Args:
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """

    def decorator(func):
        async def wrapper(*args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = await func(*args, **kwargs)

            # –ï—Å–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if not isinstance(text, str):
                return text

            # –†–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(text) > max_length:
                return MessageUtils.split_long_message(text, max_length)

            return text

        return wrapper

    return decorator


# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    # –§–∞–±—Ä–∏–∫–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    "MessageFactory",
    "MessageManager",

    # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    "BaseMessage",
    "TemplateMessage",
    "MessageBuilder",
    "MessageFormatter",

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    "WelcomeMessage",
    "OnboardingMessage",
    "WelcomeInfoMessage",
    "WelcomeMessageType",
    "OnboardingStep",

    # –¢–∞—Ä–æ
    "TarotCardMessage",
    "TarotSpreadMessage",
    "TarotEducationalMessage",
    "TarotStatisticsMessage",
    "TarotContext",
    "CardPosition",

    # –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è
    "HoroscopeMessage",
    "NatalChartMessage",
    "TransitMessage",
    "MoonPhaseMessage",
    "SynastryMessage",
    "ZodiacSign",
    "Planet",
    "MoonPhase",

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —à–∞–±–ª–æ–Ω—ã
    "CommonMessages",
    "MessageTemplates",
    "MessageConstants",
    "MessageEmoji",

    # –£—Ç–∏–ª–∏—Ç—ã
    "MessageUtils",
    "MessageStyle",
    "MessageType",

    # –§—É–Ω–∫—Ü–∏–∏
    "get_welcome_message",
    "get_time_based_greeting",
    "get_zodiac_sign_by_date",
    "calculate_moon_phase",

    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    "with_typing",
    "split_if_long"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logger.info("–ú–æ–¥—É–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")