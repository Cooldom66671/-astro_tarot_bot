"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å:
- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ë–î
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
- –°–æ–¥–µ—Ä–∂–∏—Ç —Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
- –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
"""

from typing import Dict, Any, Optional
import asyncio
from datetime import datetime

from config import logger, settings

# –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
from infrastructure.database.connection import (
    db_connection, Base, DatabaseConnection,
    get_db_session, init_database, shutdown_database
)

# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
from infrastructure.database.models import (
    # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    BaseModel, BaseUserModel, BaseTransactionModel, BaseCachedModel,
    TimestampMixin, SoftDeleteMixin, UUIDMixin, AuditMixin,

    # –ú–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    User, UserStatus, UserBirthData, UserSettings, UserConsent,

    # –ú–æ–¥–µ–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    Subscription, Payment, PromoCode, SubscriptionPlan, PaymentMethod,
    PaymentStatus, PaymentProvider, PromoCodeType,

    # –ú–æ–¥–µ–ª–∏ –¢–∞—Ä–æ
    TarotDeck, TarotCard, TarotSpread, TarotReading, SavedReading,
    CardType, ReadingType,

    # –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
    NatalChart, PlanetPosition, AspectData, HouseData,
    Transit, Synastry, AstroForecast,
    Planet, ZodiacSign, AspectType, HouseSystem, ForecastType,

    # –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
    create_all_tables, drop_all_tables, recreate_all_tables,
    check_database_schema, init_default_data, get_database_stats
)

# –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ UoW
from infrastructure.database.repositories import (
    BaseRepository, UserRepository, TarotRepository, SubscriptionRepository,
    UnitOfWork, get_unit_of_work, RepositoryFactory,
    get_user_by_telegram_id, create_or_update_user_from_telegram,
    create_tarot_reading
)

# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    'db_connection', 'Base', 'DatabaseConnection',
    'get_db_session', 'init_database', 'shutdown_database',

    # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –º–æ–¥–µ–ª–µ–π
    'BaseModel', 'BaseUserModel', 'BaseTransactionModel', 'BaseCachedModel',
    'TimestampMixin', 'SoftDeleteMixin', 'UUIDMixin', 'AuditMixin',

    # –ú–æ–¥–µ–ª–∏
    'User', 'UserStatus', 'UserBirthData', 'UserSettings', 'UserConsent',
    'Subscription', 'Payment', 'PromoCode', 'SubscriptionPlan', 'PaymentMethod',
    'PaymentStatus', 'PaymentProvider', 'PromoCodeType',
    'TarotDeck', 'TarotCard', 'TarotSpread', 'TarotReading', 'SavedReading',
    'CardType', 'ReadingType',
    'NatalChart', 'PlanetPosition', 'AspectData', 'HouseData',
    'Transit', 'Synastry', 'AstroForecast',
    'Planet', 'ZodiacSign', 'AspectType', 'HouseSystem', 'ForecastType',

    # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    'BaseRepository', 'UserRepository', 'TarotRepository', 'SubscriptionRepository',
    'UnitOfWork', 'get_unit_of_work', 'RepositoryFactory',

    # –ì–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    'setup_database', 'reset_database', 'check_database_health',
    'run_migrations', 'backup_database', 'restore_database'
]


# –ì–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î

async def setup_database(
        create_tables: bool = True,
        init_data: bool = True
) -> Dict[str, Any]:
    """
    –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Args:
        create_tables: –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
        init_data: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    """
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    start_time = datetime.utcnow()
    result = {
        "status": "success",
        "steps": [],
        "duration_seconds": 0
    }

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info("–®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        await init_database()
        result["steps"].append({
            "step": "connection",
            "status": "completed"
        })

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã
        logger.info("–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –ë–î")
        schema_info = await check_database_schema()
        result["schema_check"] = schema_info

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if create_tables and schema_info.get("missing_tables"):
            logger.info("–®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü")
            await create_all_tables()
            result["steps"].append({
                "step": "create_tables",
                "status": "completed",
                "tables_created": len(schema_info["missing_tables"])
            })

        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if init_data:
            logger.info("–®–∞–≥ 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            await init_default_data()
            result["steps"].append({
                "step": "init_data",
                "status": "completed"
            })

        # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        logger.info("–®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        health = await check_database_health()
        result["health_check"] = health

        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
        duration = (datetime.utcnow() - start_time).total_seconds()
        result["duration_seconds"] = duration

        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: {e}")
        result["status"] = "error"
        result["error"] = str(e)

    return result


async def reset_database(
        confirm: bool = False
) -> Dict[str, Any]:
    """
    –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!

    Args:
        confirm: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±—Ä–æ—Å–µ
    """
    if not confirm:
        return {
            "status": "cancelled",
            "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ë–î"
        }

    logger.warning("‚ö†Ô∏è  –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # 1. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        await drop_all_tables()

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∑–∞–Ω–æ–≤–æ
        await create_all_tables()

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        await init_default_data()

        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞")

        return {
            "status": "success",
            "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ë–î: {e}")
        return {
            "status": "error",
            "error": str(e)
        }


async def check_database_health() -> Dict[str, Any]:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î.

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    """
    health_report = {
        "status": "unknown",
        "timestamp": datetime.utcnow().isoformat(),
        "checks": {},
        "warnings": [],
        "errors": []
    }

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_health = await db_connection.health_check()
        health_report["checks"]["connection"] = connection_health

        if connection_health.get("status") != "healthy":
            health_report["errors"].append("–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã
        schema_info = await check_database_schema()
        health_report["checks"]["schema"] = {
            "complete": schema_info.get("is_complete", False),
            "missing_tables": schema_info.get("missing_tables", [])
        }

        if schema_info.get("missing_tables"):
            health_report["warnings"].append(
                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(schema_info['missing_tables'])}"
            )

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = await get_database_stats()
        health_report["checks"]["statistics"] = stats

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        async with get_unit_of_work() as uow:
            start = datetime.utcnow()
            count = await uow.users.count()
            query_time = (datetime.utcnow() - start).total_seconds()

            health_report["checks"]["performance"] = {
                "sample_query_time": query_time,
                "is_slow": query_time > 1.0
            }

            if query_time > 1.0:
                health_report["warnings"].append(
                    f"–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {query_time:.2f}s"
                )

        # 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if health_report["errors"]:
            health_report["status"] = "unhealthy"
        elif health_report["warnings"]:
            health_report["status"] = "degraded"
        else:
            health_report["status"] = "healthy"

    except Exception as e:
        health_report["status"] = "error"
        health_report["errors"].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")

    return health_report


async def run_migrations(
        migration_name: Optional[str] = None
) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î.

    Args:
        migration_name: –ò–º—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
    """
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Alembic
    logger.info(f"–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π{f': {migration_name}' if migration_name else ''}")

    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    schema_info = await check_database_schema()

    if schema_info.get("missing_tables"):
        await create_all_tables()
        return {
            "status": "success",
            "migrations_applied": 1,
            "tables_created": len(schema_info["missing_tables"])
        }

    return {
        "status": "success",
        "migrations_applied": 0,
        "message": "–í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    }


async def backup_database(
        backup_path: Optional[str] = None
) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î.

    Args:
        backup_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    """
    if not backup_path:
        backup_path = f"backups/db_backup_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.sql"

    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_path}")

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ pg_dump
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
        "status": "success",
        "backup_path": backup_path,
        "size_mb": 0,
        "tables_backed_up": 0,
        "message": "–§—É–Ω–∫—Ü–∏—è backup –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å pg_dump"
    }


async def restore_database(
        backup_path: str,
        confirm: bool = False
) -> Dict[str, Any]:
    """
    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.

    Args:
        backup_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        confirm: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
    """
    if not confirm:
        return {
            "status": "cancelled",
            "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î"
        }

    logger.warning(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑: {backup_path}")

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ pg_restore
    return {
        "status": "success",
        "restored_from": backup_path,
        "message": "–§—É–Ω–∫—Ü–∏—è restore –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å pg_restore"
    }


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def get_table_sizes() -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü.

    Returns:
        –°–ª–æ–≤–∞—Ä—å {–∏–º—è_—Ç–∞–±–ª–∏—Ü—ã: —Ä–∞–∑–º–µ—Ä_–≤_–ú–ë}
    """
    stats = await get_database_stats()

    sizes = {}
    for table_name, table_stats in stats.get("tables", {}).items():
        sizes[table_name] = table_stats.get("size_mb", 0)

    return sizes


async def vacuum_database() -> Dict[str, Any]:
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î (VACUUM).

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    logger.info("–ó–∞–ø—É—Å–∫ VACUUM –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î")

    try:
        async with db_connection.get_session() as session:
            # VACUUM –Ω–µ–ª—å–∑—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await session.execute("COMMIT")
            await session.execute("VACUUM ANALYZE")

        return {
            "status": "success",
            "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ VACUUM: {e}")
        return {
            "status": "error",
            "error": str(e)
        }


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if settings.is_production():
    logger.info("üè≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PRODUCTION —Ä–µ–∂–∏–º–µ")
elif settings.is_testing():
    logger.info("üß™ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ TESTING —Ä–µ–∂–∏–º–µ")
else:
    logger.info("üîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ DEVELOPMENT —Ä–µ–∂–∏–º–µ")


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ development —Ä–µ–∂–∏–º–µ
async def auto_init_development():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."""
    if settings.is_development() and settings.database.auto_init:
        logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        await setup_database()

# –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
# asyncio.create_task(auto_init_development())