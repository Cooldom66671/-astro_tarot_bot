"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–æ–µ–∫—Ç–∞.
"""

import asyncio
import sys
import os
from pathlib import Path


async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from infrastructure.database import db_connection

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        health = await db_connection.health_check()
        if health.get('status') == 'healthy':
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            print(f"   –í–µ—Ä—Å–∏—è: {health.get('version', 'unknown')}")
            return True
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            print(f"   –°—Ç–∞—Ç—É—Å: {health}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω:")
        print("   brew services start postgresql@16  # macOS")
        print("   sudo systemctl start postgresql    # Linux")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç:")
        print("   createdb astrotarot_db")
        return False


async def check_redis_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
    try:
        import redis.asyncio as redis
        from config import settings

        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        redis_url = os.getenv('REDIS_URL', 'redis://localhost:6379/0')

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        r = redis.from_url(redis_url)
        await r.ping()
        await r.close()

        print("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω:")
        print("   brew services start redis  # macOS")
        print("   sudo systemctl start redis # Linux")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ REDIS_URL –≤ .env —Ñ–∞–π–ª–µ")
        return False


def check_bot_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")
    try:
        from config import settings

        token = settings.bot.token.get_secret_value()

        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        if ':' not in token or len(token) < 40:
            print("‚ùå –¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return False

        print("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        print(f"   ID –±–æ—Ç–∞: {token.split(':')[0]}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {e}")
        return False


def check_migrations():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π Alembic...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ alembic.ini
    if not Path('alembic.ini').exists():
        print("‚ùå –§–∞–π–ª alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ Alembic:")
        print("   alembic init alembic")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π
    versions_dir = Path('alembic/versions')
    if not versions_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è alembic/versions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:")
        print("   mkdir -p alembic/versions")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    migrations = list(versions_dir.glob('*.py'))
    if not migrations:
        print("‚ö†Ô∏è  –ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π")
        print("\nüí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é:")
        print("   alembic revision --autogenerate -m 'Initial migration'")
        return False

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(migrations)}")
    return True


def check_external_apis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–Ω–µ—à–Ω–∏—Ö API."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö API...")

    apis = {
        'OPENAI_API_KEY': 'OpenAI API',
        'ANTHROPIC_API_KEY': 'Anthropic API',
        'YOOKASSA_SHOP_ID': '–ÆKassa',
        'TELEGRAM_PAYMENTS_TOKEN': 'Telegram Payments'
    }

    configured = []
    missing = []

    for env_var, name in apis.items():
        if os.getenv(env_var):
            configured.append(name)
        else:
            missing.append(name)

    if configured:
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã: {', '.join(configured)}")

    if missing:
        print(f"‚ö†Ô∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {', '.join(missing)}")
        print("   (–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—ã –∏—Ö –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ)")

    return True


def check_file_permissions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º...")

    dirs_to_check = ['logs', 'uploads', 'backups']
    all_ok = True

    for dir_name in dirs_to_check:
        dir_path = Path(dir_name)
        if dir_path.exists():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
            test_file = dir_path / '.test_write'
            try:
                test_file.touch()
                test_file.unlink()
                print(f"‚úÖ {dir_name}/ - –∑–∞–ø–∏—Å—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå {dir_name}/ - –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {e}")
                all_ok = False
        else:
            print(f"‚ùå {dir_name}/ - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            all_ok = False

    if not all_ok:
        print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞:")
        print("   mkdir -p logs uploads backups")
        print("   chmod 755 logs uploads backups")

    return all_ok


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    print("=" * 60)
    print("üîç –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–ò–°–¢–ï–ú")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("–¢–æ–∫–µ–Ω –±–æ—Ç–∞", check_bot_token),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database_connection),
        ("Redis", check_redis_connection),
        ("–ú–∏–≥—Ä–∞—Ü–∏–∏", check_migrations),
        ("–í–Ω–µ—à–Ω–∏–µ API", check_external_apis),
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", check_file_permissions),
    ]

    results = {}

    for name, check_func in checks:
        try:
            if asyncio.iscoroutinefunction(check_func):
                results[name] = await check_func()
            else:
                results[name] = check_func()
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")
            results[name] = False

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 60)

    failed = []
    for name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {name}")
        if not result:
            failed.append(name)

    print("=" * 60)

    if not failed:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π")
        print("   alembic upgrade head")
        print("\nü§ñ –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞:")
        print("   python main.py")
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏: {', '.join(failed)}")
        print("\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞.")

    return len(failed) == 0


if __name__ == "__main__":
    # –î–ª—è Windows
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    success = asyncio.run(main())
    sys.exit(0 if success else 1)