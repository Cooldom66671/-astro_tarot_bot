"""
–ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ë–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ù–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
- –†–æ—Ç–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –≤—Ä–µ–º–µ–Ω–∏
- –û—Ç–ø—Ä–∞–≤–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram
- –¶–≤–µ—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ JSON –¥–ª—è production
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    from config.logging_config import setup_logging

    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setup_logging()

    # –í –º–æ–¥—É–ª—è—Ö
    import logging
    logger = logging.getLogger(__name__)
"""

import logging
import logging.handlers
import sys
import json
import re
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, Optional
from functools import lru_cache

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–∂–µ)
from config.settings import settings


# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª."""
    RESET = '\033[0m'
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    GRAY = '\033[90m'

    # –°—Ç–∏–ª–∏
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


class SensitiveDataFilter(logging.Filter):
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–≥–∞—Ö.

    –ó–∞–º–µ–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∫–ª—é—á–∏ API, –ø–∞—Ä–æ–ª–∏ –∏ –¥—Ä—É–≥–∏–µ sensitive –¥–∞–Ω–Ω—ã–µ
    –Ω–∞ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
    """

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    PATTERNS = [
        # Telegram —Ç–æ–∫–µ–Ω—ã
        (r'(\d{8,10}:[a-zA-Z0-9_-]{35})', 'TELEGRAM_TOKEN'),
        # API –∫–ª—é—á–∏ (–æ–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω)
        (r'(api[_-]?key["\']?\s*[:=]\s*["\']?)([a-zA-Z0-9_-]{20,})', r'\1***API_KEY***'),
        # –ü–∞—Ä–æ–ª–∏
        (r'(password["\']?\s*[:=]\s*["\']?)([^"\']+)', r'\1***PASSWORD***'),
        # Email –∞–¥—Ä–µ—Å–∞ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ)
        (r'([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})',
         lambda m: f"{m.group(1)[:3]}***@{m.group(2)}"),
        # –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        (r'(\+?\d{1,3}[-.\s]?)?\d{3,4}[-.\s]?\d{3,4}[-.\s]?\d{3,4}', '***PHONE***'),
        # –ù–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç
        (r'\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b', '****-****-****-****'),
    ]

    def filter(self, record: logging.LogRecord) -> bool:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –º–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        # –ú–∞—Å–∫–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if hasattr(record, 'msg'):
            record.msg = self._mask_sensitive_data(str(record.msg))

        # –ú–∞—Å–∫–∏—Ä—É–µ–º –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        if hasattr(record, 'args') and record.args:
            record.args = tuple(
                self._mask_sensitive_data(str(arg)) for arg in record.args
            )

        return True

    def _mask_sensitive_data(self, text: str) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        for pattern, replacement in self.PATTERNS:
            if callable(replacement):
                text = re.sub(pattern, replacement, text)
            else:
                text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)
        return text


class ColoredFormatter(logging.Formatter):
    """
    –§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    –∏ –≤–∞–∂–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è.
    """

    # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LEVEL_COLORS = {
        'DEBUG': Colors.GRAY,
        'INFO': Colors.GREEN,
        'WARNING': Colors.YELLOW,
        'ERROR': Colors.RED,
        'CRITICAL': Colors.RED + Colors.BOLD,
    }

    def format(self, record: logging.LogRecord) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å —Å —Ü–≤–µ—Ç–∞–º–∏."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        original_format = self._style._fmt

        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è
        level_color = self.LEVEL_COLORS.get(record.levelname, Colors.WHITE)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = Colors.GRAY + '%(asctime)s' + Colors.RESET

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å —Å —Ü–≤–µ—Ç–æ–º
        level_str = level_color + '%(levelname)-8s' + Colors.RESET

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –º–æ–¥—É–ª—è
        name_str = Colors.CYAN + '%(name)s' + Colors.RESET

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if record.levelname in ['ERROR', 'CRITICAL']:
            msg_str = level_color + '%(message)s' + Colors.RESET
        else:
            msg_str = '%(message)s'

        # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        self._style._fmt = f'{time_str} | {level_str} | {name_str} | {msg_str}'

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        result = super().format(record)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        self._style._fmt = original_format

        return result


class JSONFormatter(logging.Formatter):
    """
    –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ production –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
    –∫–æ—Ç–æ—Ä–æ–µ –ª–µ–≥–∫–æ –ø–∞—Ä—Å–∏—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.
    """

    def format(self, record: logging.LogRecord) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ JSON."""
        log_data = {
            'timestamp': datetime.utcnow().isoformat(),
            'level': record.levelname,
            'logger': record.name,
            'module': record.module,
            'function': record.funcName,
            'line': record.lineno,
            'message': record.getMessage(),
            'environment': settings.environment,
        }

        # –î–æ–±–∞–≤–ª—è–µ–º exception info –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info:
            log_data['exception'] = self.formatException(record.exc_info)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ record
        for key, value in record.__dict__.items():
            if key not in ['name', 'msg', 'args', 'created', 'filename',
                           'funcName', 'levelname', 'levelno', 'lineno',
                           'module', 'msecs', 'pathname', 'process',
                           'processName', 'relativeCreated', 'thread',
                           'threadName', 'exc_info', 'exc_text', 'stack_info']:
                log_data[key] = value

        return json.dumps(log_data, ensure_ascii=False)


class TelegramHandler(logging.Handler):
    """
    Handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ Telegram.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞
    –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤ production.
    """

    def __init__(self, admin_chat_id: Optional[int] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è handler.

        Args:
            admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram
        """
        super().__init__()
        self.admin_chat_id = admin_chat_id
        self._bot = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ

    async def emit_async(self, record: logging.LogRecord) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
        if not self.admin_chat_id or not self._bot:
            return

        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            message = f"""
üö® <b>{record.levelname}</b> –≤ {record.name}

<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
<b>–ú–æ–¥—É–ª—å:</b> {record.module}:{record.lineno}
<b>–§—É–Ω–∫—Ü–∏—è:</b> {record.funcName}

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>{record.getMessage()[:3000]}</code>
"""

            # –î–æ–±–∞–≤–ª—è–µ–º traceback –µ—Å–ª–∏ –µ—Å—Ç—å
            if record.exc_info:
                exc_text = self.format(record)[-1000:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
                message += f"\n<b>Traceback:</b>\n<pre>{exc_text}</pre>"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._bot.send_message(
                chat_id=self.admin_chat_id,
                text=message,
                parse_mode="HTML"
            )

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ stderr
            sys.stderr.write(f"Failed to send log to Telegram: {e}\n")

    def emit(self, record: logging.LogRecord) -> None:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è emit."""
        # –í —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤ async –≤–µ—Ä—Å–∏–∏
        pass


def setup_logging() -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç:
    - –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    - –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –¥–ª—è production
    - JSON –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    - –û—Ç–ø—Ä–∞–≤–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ Telegram
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π logger
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, settings.log_level))

    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    root_logger.handlers = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    sensitive_filter = SensitiveDataFilter()

    # 1. –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.DEBUG if settings.debug else logging.INFO)

    if settings.environment == "development":
        # –¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        console_formatter = ColoredFormatter(
            '%(asctime)s | %(levelname)-8s | %(name)s | %(message)s',
            datefmt='%H:%M:%S'
        )
    else:
        # JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è production
        console_formatter = JSONFormatter()

    console_handler.setFormatter(console_formatter)
    console_handler.addFilter(sensitive_filter)
    root_logger.addHandler(console_handler)

    # 2. –§–∞–π–ª–æ–≤—ã–π handler —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ —Ä–∞–∑–º–µ—Ä—É
    if settings.log_file:
        settings.log_file.parent.mkdir(parents=True, exist_ok=True)

        file_handler = logging.handlers.RotatingFileHandler(
            filename=str(settings.log_file),
            maxBytes=10 * 1024 * 1024,  # 10 MB
            backupCount=5,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.INFO)

        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON –¥–ª—è —Ñ–∞–π–ª–æ–≤
        file_formatter = JSONFormatter()
        file_handler.setFormatter(file_formatter)
        file_handler.addFilter(sensitive_filter)
        root_logger.addHandler(file_handler)

    # 3. Handler –¥–ª—è –æ—à–∏–±–æ–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    error_log_file = settings.logs_dir / "errors.log"
    error_handler = logging.handlers.TimedRotatingFileHandler(
        filename=str(error_log_file),
        when='midnight',
        interval=1,
        backupCount=30,  # –•—Ä–∞–Ω–∏–º 30 –¥–Ω–µ–π
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(JSONFormatter())
    error_handler.addFilter(sensitive_filter)
    root_logger.addHandler(error_handler)

    # 4. Telegram handler –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (–±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–∑–∂–µ)
    # telegram_handler = TelegramHandler()
    # telegram_handler.setLevel(logging.CRITICAL)
    # root_logger.addHandler(telegram_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('aiogram').setLevel(logging.INFO)
    logging.getLogger('asyncio').setLevel(logging.WARNING)
    logging.getLogger('sqlalchemy.engine').setLevel(
        logging.INFO if settings.database.echo else logging.WARNING
    )

    # –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ–±–∞–≥ –ª–æ–≥–∏ –æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    for logger_name in ['urllib3', 'httpx', 'httpcore']:
        logging.getLogger(logger_name).setLevel(logging.WARNING)

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    logger = logging.getLogger(__name__)
    logger.info(
        f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{settings.environment}' "
        f"—Å —É—Ä–æ–≤–Ω–µ–º '{settings.log_level}'"
    )


@lru_cache()
def get_logger(name: str) -> logging.Logger:
    """
    –ü–æ–ª—É—á–∏—Ç—å logger —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º.

    Args:
        name: –ò–º—è logger'–∞ (–æ–±—ã—á–Ω–æ __name__)

    Returns:
        logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π logger
    """
    return logging.getLogger(name)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_event(logger: logging.Logger, event: str, **kwargs) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

    Args:
        logger: Logger –¥–ª—è –∑–∞–ø–∏—Å–∏
        event: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    """
    logger.info(event, extra={'event_type': event, 'event_data': kwargs})


def log_error(logger: logging.Logger, error: Exception, **kwargs) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

    Args:
        logger: Logger –¥–ª—è –∑–∞–ø–∏—Å–∏
        error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    logger.error(
        f"{error.__class__.__name__}: {str(error)}",
        exc_info=True,
        extra={
            'error_type': error.__class__.__name__,
            'error_context': kwargs
        }
    )


__all__ = [
    "setup_logging",
    "get_logger",
    "log_event",
    "log_error",
    "SensitiveDataFilter",
    "ColoredFormatter",
    "JSONFormatter",
    "TelegramHandler",
]