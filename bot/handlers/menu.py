"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
- –ù–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –±–æ—Ç–∞
- –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
- –ê–¥–∞–ø—Ç–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
- –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from bot.handlers.base import (
    BaseHandler,
    error_handler,
    log_action,
    get_or_create_user,
    answer_callback_query,
    edit_or_send_message
)
from infrastructure import get_unit_of_work
from config import settings

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–†
from infrastructure.telegram.keyboards import (
    get_main_menu,
    get_section_menu,
    MainMenuSection,
    QuickActionsKeyboard,
    SectionMenuKeyboard,
    MainMenuCallbackData,
    QuickActionCallbackData,
    Keyboards
)

logger = logging.getLogger(__name__)


class MenuHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""

    def register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é."""
        # –ö–æ–º–∞–Ω–¥–∞ /menu
        self.router.message.register(
            self.cmd_menu,
            Command("menu")
        )

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback
        self.router.callback_query.register(
            self.show_main_menu,
            F.data == "main_menu"
        )

        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π callback data
        self.router.callback_query.register(
            self.quick_action_handler,
            QuickActionCallbackData.filter()
        )

        # –†–∞–∑–¥–µ–ª—ã –º–µ–Ω—é —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π callback data
        self.router.callback_query.register(
            self.section_handler,
            MainMenuCallbackData.filter()
        )

        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ callback
        self.router.callback_query.register(
            self.show_quick_actions,
            F.data == "quick_actions"
        )

        # –°—Ç–∞—Ä—ã–µ callback –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        for section in ["tarot", "astrology", "subscription", "profile", "settings"]:
            self.router.callback_query.register(
                self.legacy_section_handler,
                F.data == f"section_{section}"
            )

        # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        self.router.callback_query.register(
            self.show_admin_panel,
            F.data == "admin_panel"
        )

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è "–ù–∞–∑–∞–¥"
        self.router.callback_query.register(
            self.go_back,
            F.data.startswith("back_to_")
        )

    @error_handler()
    @log_action("menu_command")
    async def cmd_menu(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu."""
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user(message.from_user)

        async with get_unit_of_work() as uow:
            user_db = await uow.users.get_by_telegram_id(message.from_user.id)

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
            keyboard = await get_main_menu(
                user_subscription=user_db.subscription_plan if hasattr(user_db, 'subscription_plan') else 'free',
                is_admin=message.from_user.id in settings.bot.admin_ids,
                user_name=message.from_user.first_name
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            greeting = self._get_personalized_greeting(user_db)

            await message.answer(
                greeting,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    @error_handler()
    async def show_main_menu(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback."""
        await state.clear()

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user:
                user = await get_or_create_user(callback.from_user)

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ
            keyboard = await get_main_menu(
                user_subscription=user.subscription_plan if hasattr(user, 'subscription_plan') else 'free',
                is_admin=callback.from_user.id in settings.bot.admin_ids,
                user_name=callback.from_user.first_name
            )

            greeting = self._get_personalized_greeting(user)

            await edit_or_send_message(
                callback.message,
                greeting,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def quick_action_handler(
            self,
            callback: CallbackQuery,
            callback_data: QuickActionCallbackData,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π callback data."""
        action = callback_data.action_type

        if action == "daily_card":
            await callback.answer("üé¥ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–∞—Ä—Ç–µ –¥–Ω—è...")
            # TODO: –≤—ã–∑–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞—Ä–æ

        elif action == "daily_horoscope":
            await callback.answer("‚≠ê –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–æ—Ä–æ—Å–∫–æ–ø—É...")
            # TODO: –≤—ã–∑–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏

        elif action == "quick_spread":
            await callback.answer("üîÆ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –±—ã—Å—Ç—Ä–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É...")
            # TODO: –≤—ã–∑–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞

        elif action == "moon_phase":
            await callback.answer("üåô –ó–∞–≥—Ä—É–∑–∫–∞ –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
            # TODO: –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–∑—É –ª—É–Ω—ã

    @error_handler()
    async def section_handler(
            self,
            callback: CallbackQuery,
            callback_data: MainMenuCallbackData,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π callback data."""
        section = callback_data.section

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ enum
        try:
            section_enum = MainMenuSection(section)
        except ValueError:
            await answer_callback_query(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª", show_alert=True)
            return

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ú–ï–ù–Æ –†–ê–ó–î–ï–õ–ê
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            keyboard = await get_section_menu(
                section_enum,
                user_subscription=user.subscription_plan if user and hasattr(user, 'subscription_plan') else 'free'
            )

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
            text = self._get_section_text(section_enum, user)

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def legacy_section_handler(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—ã—Ö callback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        section_name = callback.data.replace("section_", "")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback data
        try:
            section_enum = MainMenuSection(section_name.upper())
            new_callback_data = MainMenuCallbackData(
                action="select",
                section=section_enum.value
            )

            # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            await self.section_handler(callback, new_callback_data, state, **kwargs)
        except ValueError:
            await self.show_legacy_section(callback, state, **kwargs)

    @error_handler()
    async def show_quick_actions(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£
            keyboard = QuickActionsKeyboard(
                user_subscription=user.subscription_plan if user and hasattr(user, 'subscription_plan') else 'free'
            )

            kb = await keyboard.build()

            text = (
                "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:"
            )

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=kb,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def show_legacy_section(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)."""
        section = callback.data.replace("section_", "")

        if section == "tarot":
            await self.show_tarot_section(callback, state, **kwargs)
        elif section == "astrology":
            await self.show_astrology_section(callback, state, **kwargs)
        elif section == "subscription":
            await self.show_subscription_section(callback, state, **kwargs)
        elif section == "profile":
            await self.show_profile_section(callback, state, **kwargs)
        elif section == "settings":
            await self.show_settings_section(callback, state, **kwargs)

    @error_handler()
    async def show_tarot_section(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª –¢–∞—Ä–æ."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await uow.tarot.get_user_statistics(user.id) if user else {}

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´
            from infrastructure.telegram.keyboards import TarotSection
            keyboard = await get_section_menu(
                MainMenuSection.TAROT,
                user_subscription=user.subscription_plan if user and hasattr(user, 'subscription_plan') else 'free'
            )

            text = self._format_tarot_menu(user, stats)

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def show_astrology_section(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await uow.astrology.get_user_statistics(user.id) if user else {}

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´
            keyboard = await get_section_menu(
                MainMenuSection.ASTROLOGY,
                user_subscription=user.subscription_plan if user and hasattr(user, 'subscription_plan') else 'free'
            )

            text = self._format_astrology_menu(user, stats)

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def show_subscription_section(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª –ü–æ–¥–ø–∏—Å–∫–∞."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await uow.subscriptions.get_active_by_user_id(user.id) if user else None

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´
            keyboard = await get_section_menu(
                MainMenuSection.SUBSCRIPTION,
                user_subscription=user.subscription_plan if user and hasattr(user, 'subscription_plan') else 'free'
            )

            text = self._format_subscription_menu(user, subscription)

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def show_profile_section(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª –ü—Ä–æ—Ñ–∏–ª—å."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user:
                await answer_callback_query(callback, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            tarot_stats = await uow.tarot.get_user_statistics(user.id)
            astro_stats = await uow.astrology.get_user_statistics(user.id)

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´
            keyboard = await get_section_menu(
                MainMenuSection.PROFILE,
                user_subscription=user.subscription_plan if hasattr(user, 'subscription_plan') else 'free'
            )

            text = self._format_profile_menu(user, tarot_stats, astro_stats)

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def show_settings_section(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´
            keyboard = await get_section_menu(
                MainMenuSection.SETTINGS,
                user_subscription=user.subscription_plan if user and hasattr(user, 'subscription_plan') else 'free'
            )

            text = self._format_settings_menu(user)

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def show_admin_panel(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if callback.from_user.id not in settings.bot.admin_ids:
            await answer_callback_query(callback, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return

        async with get_unit_of_work() as uow:
            stats = await self._get_system_stats(uow)

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´
            keyboard = await get_section_menu(
                MainMenuSection.ADMIN,
                user_subscription='vip'  # –ê–¥–º–∏–Ω = VIP
            )

            text = self._format_admin_menu(stats)

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    async def go_back(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥."""
        destination = callback.data.replace("back_to_", "")

        # –ú–∞–ø–∏–Ω–≥ destinations –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        handlers_map = {
            "main": self.show_main_menu,
            "tarot": lambda cb, st, **kw: self.show_legacy_section(cb, st, **kw),
            "astrology": lambda cb, st, **kw: self.show_legacy_section(cb, st, **kw),
            "subscription": lambda cb, st, **kw: self.show_legacy_section(cb, st, **kw),
            "profile": lambda cb, st, **kw: self.show_legacy_section(cb, st, **kw),
            "settings": lambda cb, st, **kw: self.show_legacy_section(cb, st, **kw),
            "quick_actions": self.show_quick_actions
        }

        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º callback.data –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        if destination in ["tarot", "astrology", "subscription", "profile", "settings"]:
            callback.data = f"section_{destination}"

        handler = handlers_map.get(destination, self.show_main_menu)
        await handler(callback, state, **kwargs)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    def _get_personalized_greeting(self, user: Any) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""
        hour = datetime.now().hour

        if 5 <= hour < 12:
            time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        elif 12 <= hour < 17:
            time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
        elif 17 <= hour < 23:
            time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        else:
            time_greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"

        name = user.display_name if hasattr(user, 'display_name') and user.display_name else "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        if hasattr(user, 'subscription_plan'):
            if user.subscription_plan == "vip":
                status = "üëë VIP —Å—Ç–∞—Ç—É—Å"
            elif user.subscription_plan == "premium":
                status = "‚≠ê Premium –ø–æ–¥–ø–∏—Å–∫–∞"
            elif user.subscription_plan == "basic":
                status = "‚úÖ Basic –ø–æ–¥–ø–∏—Å–∫–∞"
            else:
                status = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
        else:
            status = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"

        return (
            f"<b>{time_greeting}, {name}!</b>\n\n"
            f"{status}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏:"
        )

    def _get_section_text(self, section: MainMenuSection, user: Any) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞."""
        if section == MainMenuSection.TAROT:
            return self._format_tarot_menu(user, {})
        elif section == MainMenuSection.ASTROLOGY:
            return self._format_astrology_menu(user, {})
        elif section == MainMenuSection.SUBSCRIPTION:
            return self._format_subscription_menu(user, None)
        elif section == MainMenuSection.PROFILE:
            return self._format_profile_menu(user, {}, {})
        elif section == MainMenuSection.SETTINGS:
            return self._format_settings_menu(user)
        elif section == MainMenuSection.ADMIN:
            return "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            return "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    # –ú–µ—Ç–æ–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

    def _format_tarot_menu(self, user: Any, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –¢–∞—Ä–æ."""
        total_spreads = stats.get("total_spreads", 0)
        favorite_card = stats.get("favorite_card", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")

        text = (
            "üé¥ <b>–¢–∞—Ä–æ</b>\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–π–Ω—ã —Å—É–¥—å–±—ã —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç –¢–∞—Ä–æ.\n\n"
        )

        if total_spreads > 0:
            text += (
                f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –†–∞—Å–∫–ª–∞–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_spreads}\n"
                f"‚Ä¢ –õ—é–±–∏–º–∞—è –∫–∞—Ä—Ç–∞: {favorite_card}\n\n"
            )

        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        return text

    def _format_astrology_menu(self, user: Any, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è."""
        text = (
            "üîÆ <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è</b>\n\n"
            "–ü–æ–∑–Ω–∞–π—Ç–µ –≤–ª–∏—è–Ω–∏–µ –∑–≤–µ–∑–¥ –Ω–∞ –≤–∞—à—É —Å—É–¥—å–±—É.\n\n"
        )

        if user and hasattr(user, 'birth_date') and user.birth_date:
            text += "‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\n\n"
        else:
            text += "‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤\n\n"

        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        return text

    def _format_subscription_menu(self, user: Any, subscription: Any) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏."""
        text = "üíé <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n"

        if subscription and subscription.is_active:
            text += (
                f"<b>–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:</b> {subscription.plan_name}\n"
                f"<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {subscription.expires_at.strftime('%d.%m.%Y')}\n"
                f"<b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> {'–í–∫–ª—é—á–µ–Ω–æ' if subscription.auto_renew else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
            )
        else:
            text += (
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!\n\n"
            )

        return text

    def _format_profile_menu(self, user: Any, tarot_stats: Dict[str, Any], astro_stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."""
        text = (
            f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"<b>–ò–º—è:</b> {user.display_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>ID:</b> <code>{user.telegram_id}</code>\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.created_at.strftime('%d.%m.%Y') if hasattr(user, 'created_at') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        )

        if hasattr(user, 'birth_date') and user.birth_date:
            text += f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user.birth_date.strftime('%d.%m.%Y')}\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        total_actions = (
            tarot_stats.get("total_spreads", 0) +
            astro_stats.get("total_horoscopes", 0)
        )

        if total_actions > 0:
            text += (
                f"\n<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –†–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ: {tarot_stats.get('total_spreads', 0)}\n"
                f"‚Ä¢ –ì–æ—Ä–æ—Å–∫–æ–ø–æ–≤: {astro_stats.get('total_horoscopes', 0)}\n"
            )

        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        return text

    def _format_settings_menu(self, user: Any) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        notifications = "–í–∫–ª—é—á–µ–Ω—ã" if getattr(user, 'notifications_enabled', True) else "–í—ã–∫–ª—é—á–µ–Ω—ã"
        language = "–†—É—Å—Å–∫–∏–π" if getattr(user, 'language_code', 'ru') == "ru" else "English"

        text = (
            f"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {notifications}\n"
            f"<b>–Ø–∑—ã–∫:</b> {language}\n"
            f"<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {getattr(user, 'timezone', 'UTC')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )

        return text

    async def _get_system_stats(self, uow: Any) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        total_users = await uow.users.count_total()
        active_users = await uow.users.count_active(days=7)

        subscriptions = await uow.subscriptions.count_by_plan()

        # –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
        monthly_revenue = await uow.payments.get_monthly_revenue()

        return {
            "total_users": total_users,
            "active_users": active_users,
            "subscriptions": subscriptions,
            "monthly_revenue": monthly_revenue
        }

    def _format_admin_menu(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω –º–µ–Ω—é."""
        text = (
            f"<b>üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {stats['active_users']}\n\n"
            f"<b>üí≥ –ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        )

        for plan, count in stats.get('subscriptions', {}).items():
            text += f"‚Ä¢ {plan.upper()}: {count}\n"

        text += (
            f"\n<b>üí∞ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü:</b> "
            f"{stats.get('monthly_revenue', 0):,.0f} ‚ÇΩ\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        return text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
def register_menu_handler(router: Router) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é.

    Args:
        router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    handler = MenuHandler(router)
    handler.register_handlers()
    logger.info("Menu handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


logger.info("–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω")