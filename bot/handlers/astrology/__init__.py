"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–µ–π:
- –ì–æ—Ä–æ—Å–∫–æ–ø—ã (–¥–Ω–µ–≤–Ω—ã–µ, –Ω–µ–¥–µ–ª—å–Ω—ã–µ, –º–µ—Å—è—á–Ω—ã–µ, –≥–æ–¥–æ–≤—ã–µ)
- –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
- –¢—Ä–∞–Ω–∑–∏—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
- –°–∏–Ω–∞—Å—Ç—Ä–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
- –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from datetime import datetime, date, timedelta
from typing import Dict, Any, Optional, List
import asyncio
import re
import math

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from bot.handlers.base import (
    BaseHandler,
    require_subscription,
    error_handler,
    log_action,
    get_or_create_user,
    answer_callback_query,
    edit_or_send_message
)
from bot.states import AstrologyStates
from infrastructure.telegram.keyboards import (
    Keyboards,
    InlineKeyboard,
    AstrologyCallbackData,
    BirthDataCallbackData,
    ChartCallbackData,
    TransitCallbackData,
    CalendarCallbackData,
    HoroscopeType
)
from infrastructure import get_unit_of_work
from services import get_astrology_service
from config import settings

logger = logging.getLogger(__name__)


class AstrologyHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    ZODIAC_DATES = {
        "aries": (3, 21, 4, 19),
        "taurus": (4, 20, 5, 20),
        "gemini": (5, 21, 6, 20),
        "cancer": (6, 21, 7, 22),
        "leo": (7, 23, 8, 22),
        "virgo": (8, 23, 9, 22),
        "libra": (9, 23, 10, 22),
        "scorpio": (10, 23, 11, 21),
        "sagittarius": (11, 22, 12, 21),
        "capricorn": (12, 22, 1, 19),
        "aquarius": (1, 20, 2, 18),
        "pisces": (2, 19, 3, 20)
    }

    def register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
        # –ö–æ–º–∞–Ω–¥–∞ /astrology
        self.router.message.register(
            self.cmd_astrology,
            Command("astrology")
        )

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
        self.router.callback_query.register(
            self.show_astrology_menu,
            F.data == "astrology_menu"
        )

        # –ì–æ—Ä–æ—Å–∫–æ–ø—ã
        self.router.callback_query.register(
            self.show_horoscope_menu,
            F.data == "horoscope_menu"
        )

        self.router.callback_query.register(
            self.select_horoscope_type,
            F.data.startswith("horoscope_type:")
        )

        self.router.callback_query.register(
            self.select_zodiac_sign,
            F.data.startswith("zodiac_select:")
        )

        self.router.callback_query.register(
            self.horoscope_daily,
            F.data == "horoscope_daily"
        )

        # –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
        self.router.callback_query.register(
            self.show_natal_chart,
            F.data == "natal_chart"
        )

        self.router.callback_query.register(
            self.natal_chart_settings,
            F.data == "natal_settings"
        )

        # –¢—Ä–∞–Ω–∑–∏—Ç—ã
        self.router.callback_query.register(
            self.show_transits_menu,
            F.data == "transits_menu"
        )

        self.router.callback_query.register(
            self.select_transit_period,
            F.data.startswith("transit_period:")
        )

        # –°–∏–Ω–∞—Å—Ç—Ä–∏—è
        self.router.callback_query.register(
            self.start_synastry,
            F.data == "synastry"
        )

        # –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        self.router.callback_query.register(
            self.show_lunar_calendar,
            F.data == "moon_calendar"
        )

        self.router.callback_query.register(
            self.lunar_day_details,
            F.data.startswith("lunar_day:")
        )

        # –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è
        self.router.callback_query.register(
            self.start_birth_data_input,
            F.data == "input_birth_data"
        )

        self.router.callback_query.register(
            self.edit_birth_data,
            F.data == "edit_birth_data"
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        self.router.message.register(
            self.process_birth_date,
            StateFilter(AstrologyStates.waiting_for_date)
        )

        self.router.message.register(
            self.process_birth_time,
            StateFilter(AstrologyStates.waiting_for_time)
        )

        self.router.message.register(
            self.process_birth_place,
            StateFilter(AstrologyStates.waiting_for_place)
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
        self.router.callback_query.register(
            self.skip_birth_time,
            F.data == "skip_birth_time",
            StateFilter(AstrologyStates.waiting_for_time)
        )

        self.router.callback_query.register(
            self.confirm_birth_data,
            F.data == "confirm_birth_data",
            StateFilter(AstrologyStates.confirming_data)
        )

    @error_handler()
    @log_action("astrology_command")
    async def cmd_astrology(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /astrology - –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
        await state.clear()

        async with get_unit_of_work() as uow:
            user = await get_or_create_user(message.from_user)
            user_db = await uow.users.get_by_telegram_id(message.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
            has_birth_data = bool(user_db and hasattr(user_db, 'birth_date') and user_db.birth_date)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ª—É–Ω—ã
            moon_phase = self._calculate_moon_phase()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            keyboard = await Keyboards.astrology_menu(
                subscription_level=user_db.subscription_plan if user_db and hasattr(user_db, 'subscription_plan') else None,
                has_birth_data=has_birth_data,
                current_moon_phase=moon_phase["emoji"]
            )

            text = self._format_astrology_welcome(
                user_db,
                has_birth_data,
                moon_phase
            )

            await message.answer(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    @error_handler()
    async def show_astrology_menu(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
        await state.clear()

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user:
                await answer_callback_query(callback, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å —Å /start", show_alert=True)
                return

            has_birth_data = bool(hasattr(user, 'birth_date') and user.birth_date)
            moon_phase = self._calculate_moon_phase()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            keyboard = await Keyboards.astrology_menu(
                subscription_level=user.subscription_plan if hasattr(user, 'subscription_plan') else None,
                has_birth_data=has_birth_data,
                current_moon_phase=moon_phase["emoji"]
            )

            text = self._format_astrology_welcome(
                user,
                has_birth_data,
                moon_phase
            )

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def show_horoscope_menu(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)
            subscription = user.subscription_plan if user and hasattr(user, 'subscription_plan') else "free"

            text = (
                "üìÖ <b>–ì–æ—Ä–æ—Å–∫–æ–ø—ã</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞:"
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            keyboard = await Keyboards.horoscope_menu(subscription_level=subscription)

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    @log_action("daily_horoscope")
    async def horoscope_daily(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–Ω–µ–≤–Ω–æ–º—É –≥–æ—Ä–æ—Å–∫–æ–ø—É."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user:
                await answer_callback_query(callback, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å —Å /start", show_alert=True)
                return

            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
            if hasattr(user, 'birth_date') and user.birth_date:
                zodiac_sign = self._get_zodiac_sign(user.birth_date)
                await self._show_horoscope(callback, "daily", zodiac_sign, user)
            else:
                # –ò–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫
                text = "üåü –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:"
                keyboard = await Keyboards.zodiac_selection("daily")

                await edit_or_send_message(
                    callback.message,
                    text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )

        await answer_callback_query(callback)

    @error_handler()
    async def select_horoscope_type(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        horoscope_type = callback.data.split(":")[1]

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if not self._is_horoscope_available(horoscope_type, user.subscription_plan if user else "free"):
                await answer_callback_query(
                    callback,
                    "‚≠ê –≠—Ç–æ—Ç —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ",
                    show_alert=True
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(horoscope_type=horoscope_type)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
            if user and hasattr(user, 'birth_date') and user.birth_date:
                zodiac_sign = self._get_zodiac_sign(user.birth_date)
                await self._show_horoscope(callback, horoscope_type, zodiac_sign, user)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∑–Ω–∞–∫–∞
                text = "üåü –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:"
                keyboard = await Keyboards.zodiac_selection(horoscope_type)

                await edit_or_send_message(
                    callback.message,
                    text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )

        await answer_callback_query(callback)

    @error_handler()
    async def select_zodiac_sign(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–í—ã–±–æ—Ä –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞."""
        parts = callback.data.split(":")
        horoscope_type = parts[1]
        zodiac_sign = parts[2]

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)
            await self._show_horoscope(callback, horoscope_type, zodiac_sign, user)

        await answer_callback_query(callback)

    @error_handler()
    async def show_natal_chart(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user:
                await answer_callback_query(callback, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å —Å /start", show_alert=True)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
            if not hasattr(user, 'birth_date') or not user.birth_date:
                text = (
                    "üó∫ <b>–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n"
                    "–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã:\n"
                    "‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                    "‚Ä¢ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)\n"
                    "‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è:"
                )

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboard –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                keyboard = InlineKeyboard()
                keyboard.add_button(text="üìù –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="input_birth_data")
                keyboard.add_button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="astrology_menu")
                keyboard.builder.adjust(1)

                keyboard_markup = await keyboard.build()
            else:
                # –°—Ç—Ä–æ–∏–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
                astrology_service = get_astrology_service()
                natal_chart = await astrology_service.calculate_natal_chart(
                    user.birth_date,
                    user.birth_time if hasattr(user, 'birth_time') else None,
                    user.birth_place if hasattr(user, 'birth_place') else None
                )

                text = self._format_natal_chart(natal_chart)

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
                keyboard_markup = await Keyboards.natal_chart_menu()

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard_markup,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def show_lunar_calendar(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
        today = date.today()
        moon_phase = self._calculate_moon_phase()
        lunar_day = self._calculate_lunar_day()

        text = (
            f"üåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b>\n\n"
            f"<b>–°–µ–≥–æ–¥–Ω—è:</b> {today.strftime('%d.%m.%Y')}\n"
            f"<b>–õ—É–Ω–Ω—ã–π –¥–µ–Ω—å:</b> {lunar_day['day']}-–π\n"
            f"<b>–§–∞–∑–∞ –ª—É–Ω—ã:</b> {moon_phase['emoji']} {moon_phase['name']}\n\n"
            f"<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–Ω—è:</b>\n"
            f"{lunar_day['description']}\n\n"
            f"<b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ:</b>\n"
            f"‚úÖ {lunar_day['good_for']}\n\n"
            f"<b>–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ:</b>\n"
            f"‚ùå {lunar_day['bad_for']}"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        keyboard = await Keyboards.lunar_calendar_menu()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        await answer_callback_query(callback)

    @error_handler()
    async def start_birth_data_input(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è."""
        text = (
            "üìù <b>–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–®–∞–≥ 1 –∏–∑ 3: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard = await Keyboards.cancel()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        await state.set_state(AstrologyStates.waiting_for_date)
        await answer_callback_query(callback)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π

    @error_handler()
    async def process_birth_date(
            self,
            message: Message,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è."""
        date_text = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
        if not re.match(date_pattern, date_text):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)"
            )
            return

        try:
            birth_date = datetime.strptime(date_text, "%d.%m.%Y").date()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            age = (date.today() - birth_date).days / 365.25
            if age < 1 or age > 120:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
                return

        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        await state.update_data(birth_date=birth_date)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—Ä–µ–º–µ–Ω–∏
        text = (
            "üìù <b>–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–®–∞–≥ 2 –∏–∑ 3: –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)\n\n"
            "–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–º–æ–≤ –∏ –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç–∞."
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboard()
        keyboard.add_button(text="‚è≠ –ù–µ –∑–Ω–∞—é —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="skip_birth_time")
        keyboard.add_button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel:birth_data")
        keyboard.builder.adjust(1)

        await message.answer(
            text,
            reply_markup=await keyboard.build(),
            parse_mode="HTML"
        )

        await state.set_state(AstrologyStates.waiting_for_time)

    @error_handler()
    async def process_birth_time(
            self,
            message: Message,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è."""
        time_text = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        time_pattern = r'^\d{1,2}:\d{2}$'
        if not re.match(time_pattern, time_text):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)"
            )
            return

        try:
            birth_time = datetime.strptime(time_text, "%H:%M").time()
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
        await state.update_data(birth_time=birth_time)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ—Å—Ç—É
        text = (
            "üìù <b>–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–®–∞–≥ 3 –∏–∑ 3: –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:"
        )

        await message.answer(text, parse_mode="HTML")
        await state.set_state(AstrologyStates.waiting_for_place)

    @error_handler()
    async def process_birth_place(
            self,
            message: Message,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è."""
        place = message.text.strip()

        if len(place) < 2:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ
        await state.update_data(birth_place=place)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = (
            "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"<b>–î–∞—Ç–∞:</b> {data['birth_date'].strftime('%d.%m.%Y')}\n"
        )

        if 'birth_time' in data:
            text += f"<b>–í—Ä–µ–º—è:</b> {data['birth_time'].strftime('%H:%M')}\n"
        else:
            text += "<b>–í—Ä–µ–º—è:</b> –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"

        text += f"<b>–ú–µ—Å—Ç–æ:</b> {data['birth_place']}\n\n"
        text += "–í—Å–µ –≤–µ—Ä–Ω–æ?"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = await Keyboards.yes_no(
            yes_data="confirm_birth_data",
            no_data="edit_birth_data"
        )

        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        await state.set_state(AstrologyStates.confirming_data)

    @error_handler()
    async def skip_birth_time(
            self,
            callback: CallbackQuery,
            state: FSMContext
    ) -> None:
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è."""
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ—Å—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        text = (
            "üìù <b>–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–®–∞–≥ 3 –∏–∑ 3: –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:"
        )

        await edit_or_send_message(
            callback.message,
            text,
            parse_mode="HTML"
        )

        await state.set_state(AstrologyStates.waiting_for_place)
        await answer_callback_query(callback)

    @error_handler()
    async def confirm_birth_data(
            self,
            callback: CallbackQuery,
            state: FSMContext
    ) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è."""
        data = await state.get_data()

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.birth_date = data['birth_date']
                user.birth_time = data.get('birth_time')
                user.birth_place = data['birth_place']

                await uow.users.update(user)
                await uow.commit()

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        text = (
            "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n"
            "‚Ä¢ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞\n"
            "‚Ä¢ –¢—Ä–∞–Ω–∑–∏—Ç—ã –ø–ª–∞–Ω–µ—Ç\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        keyboard = await Keyboards.birth_data_saved()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        await answer_callback_query(callback)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    def _format_astrology_welcome(
            self,
            user: Any,
            has_birth_data: bool,
            moon_phase: Dict[str, Any]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
        text = "üîÆ <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è</b>\n\n"

        text += (
            "–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–π–Ω—ã –∑–≤–µ–∑–¥ –∏ –ø–ª–∞–Ω–µ—Ç. "
            "–£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –∫–æ—Å–º–æ—Å –æ –≤–∞—à–µ–π —Å—É–¥—å–±–µ.\n\n"
        )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—É–Ω–µ
        text += f"–°–µ–≥–æ–¥–Ω—è: {moon_phase['emoji']} {moon_phase['name']}\n"

        if has_birth_data and user:
            text += "‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
            if hasattr(user, 'birth_date') and user.birth_date:
                sign = self._get_zodiac_sign(user.birth_date)
                sign_name = self._get_sign_name(sign)
                text += f"–í–∞—à –∑–Ω–∞–∫: <b>{sign_name}</b>\n"
        else:
            text += "üí° <i>–î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</i>\n"

        text += "\n–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?"

        return text

    async def _show_horoscope(
            self,
            callback: CallbackQuery,
            horoscope_type: str,
            zodiac_sign: str,
            user: Any
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø."""
        astrology_service = get_astrology_service()

        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
        horoscope = await astrology_service.get_horoscope(
            zodiac_sign,
            horoscope_type,
            user.id if user else None
        )

        sign_name = self._get_sign_name(zodiac_sign)
        period = self._get_period_dates(horoscope_type)

        text = (
            f"{sign_name}\n"
            f"<b>{self._get_horoscope_name(horoscope_type).title()} –≥–æ—Ä–æ—Å–∫–æ–ø</b>\n"
            f"<i>{period}</i>\n\n"
            f"{horoscope['text']}\n\n"
        )

        if horoscope.get('lucky_numbers'):
            text += f"<b>–°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∏—Å–ª–∞:</b> {', '.join(map(str, horoscope['lucky_numbers']))}\n"

        if horoscope.get('lucky_color'):
            text += f"<b>–¶–≤–µ—Ç –¥–Ω—è:</b> {horoscope['lucky_color']}\n"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        keyboard = await Keyboards.horoscope_result(
            horoscope_type=horoscope_type,
            zodiac_sign=zodiac_sign
        )

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    def _format_natal_chart(self, natal_chart: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É."""
        text = "üó∫ <b>–í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n"

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        text += "<b>–ü–ª–∞–Ω–µ—Ç—ã –≤ –∑–Ω–∞–∫–∞—Ö:</b>\n"
        for planet, sign in natal_chart['planets'].items():
            text += f"‚Ä¢ {planet}: {sign}\n"

        text += "\n<b>–î–æ–º–∞:</b>\n"
        for house, sign in natal_chart['houses'].items()[:4]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 –¥–æ–º–∞
            text += f"‚Ä¢ {house}: {sign}\n"

        text += f"\n<b>–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç:</b> {natal_chart['ascendant']}\n"
        text += f"<b>–ú–° (–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–±–∞):</b> {natal_chart['midheaven']}\n"

        if natal_chart.get('aspects'):
            text += "\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:</b>\n"
            for aspect in natal_chart['aspects'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –≥–ª–∞–≤–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞
                text += f"‚Ä¢ {aspect}\n"

        return text

    def _calculate_moon_phase(self) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ª—É–Ω—ã."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ñ–∞–∑—ã –ª—É–Ω—ã
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        today = date.today()

        # –ò–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–æ–≤–æ–ª—É–Ω–∏–µ
        known_new_moon = date(2024, 1, 11)

        # –õ—É–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–º–µ—Ä–Ω–æ 29.53 –¥–Ω—è
        lunar_cycle = 29.53

        days_since = (today - known_new_moon).days
        phase_index = (days_since % lunar_cycle) / lunar_cycle

        if phase_index < 0.03 or phase_index > 0.97:
            return {"emoji": "üåë", "name": "–ù–æ–≤–æ–ª—É–Ω–∏–µ", "phase": 0}
        elif phase_index < 0.22:
            return {"emoji": "üåí", "name": "–†–∞—Å—Ç—É—â–∏–π –º–µ—Å—è—Ü", "phase": 1}
        elif phase_index < 0.28:
            return {"emoji": "üåì", "name": "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å", "phase": 2}
        elif phase_index < 0.47:
            return {"emoji": "üåî", "name": "–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞", "phase": 3}
        elif phase_index < 0.53:
            return {"emoji": "üåï", "name": "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "phase": 4}
        elif phase_index < 0.72:
            return {"emoji": "üåñ", "name": "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞", "phase": 5}
        elif phase_index < 0.78:
            return {"emoji": "üåó", "name": "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å", "phase": 6}
        else:
            return {"emoji": "üåò", "name": "–£–±—ã–≤–∞—é—â–∏–π –º–µ—Å—è—Ü", "phase": 7}

    def _calculate_lunar_day(self) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å."""
        moon_phase = self._calculate_moon_phase()

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ª—É–Ω–Ω–æ–≥–æ –¥–Ω—è
        today = date.today()
        known_new_moon = date(2024, 1, 11)
        days_since = (today - known_new_moon).days
        lunar_day = (days_since % 30) + 1

        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ª—É–Ω–Ω—ã—Ö –¥–Ω–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        lunar_days_info = {
            1: {
                "description": "–î–µ–Ω—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π",
                "good_for": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–µ–¥–∏—Ç–∞—Ü–∏—è, –æ—á–∏—â–µ–Ω–∏–µ",
                "bad_for": "–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–ø–æ—Ä—ã"
            },
            15: {
                "description": "–î–µ–Ω—å –∏—Å–∫—É—à–µ–Ω–∏–π –∏ —Å–æ–±–ª–∞–∑–Ω–æ–≤",
                "good_for": "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
                "bad_for": "–í–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –¥–∏–µ—Ç–∞"
            },
            # –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–Ω–∏...
        }

        info = lunar_days_info.get(lunar_day, {
            "description": "–û–±—ã—á–Ω—ã–π –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å",
            "good_for": "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞",
            "bad_for": "–†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"
        })

        return {
            "day": lunar_day,
            "emoji": moon_phase["emoji"],
            **info
        }

    def _get_zodiac_sign(self, birth_date: date) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ø–æ –¥–∞—Ç–µ."""
        month = birth_date.month
        day = birth_date.day

        for sign, (start_month, start_day, end_month, end_day) in self.ZODIAC_DATES.items():
            if start_month == month and day >= start_day:
                return sign
            elif end_month == month and day <= end_day:
                return sign
            elif start_month > end_month:  # –ö–æ–∑–µ—Ä–æ–≥
                if month == start_month and day >= start_day:
                    return sign
                elif month == end_month and day <= end_day:
                    return sign

        return "aries"  # Fallback

    def _get_sign_name(self, sign: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
        names = {
            "aries": "–û–≤–µ–Ω ‚ôà",
            "taurus": "–¢–µ–ª–µ—Ü ‚ôâ",
            "gemini": "–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôä",
            "cancer": "–†–∞–∫ ‚ôã",
            "leo": "–õ–µ–≤ ‚ôå",
            "virgo": "–î–µ–≤–∞ ‚ôç",
            "libra": "–í–µ—Å—ã ‚ôé",
            "scorpio": "–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôè",
            "sagittarius": "–°—Ç—Ä–µ–ª–µ—Ü ‚ôê",
            "capricorn": "–ö–æ–∑–µ—Ä–æ–≥ ‚ôë",
            "aquarius": "–í–æ–¥–æ–ª–µ–π ‚ôí",
            "pisces": "–†—ã–±—ã ‚ôì"
        }
        return names.get(sign, sign.title())

    def _get_horoscope_name(self, horoscope_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        names = {
            "daily": "–¥–Ω–µ–≤–Ω–æ–π",
            "weekly": "–Ω–µ–¥–µ–ª—å–Ω—ã–π",
            "monthly": "–º–µ—Å—è—á–Ω—ã–π",
            "yearly": "–≥–æ–¥–æ–≤–æ–π"
        }
        return names.get(horoscope_type, horoscope_type)

    def _get_period_dates(self, horoscope_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        today = date.today()

        if horoscope_type == "daily":
            return today.strftime("%d.%m.%Y")
        elif horoscope_type == "weekly":
            week_start = today - timedelta(days=today.weekday())
            week_end = week_start + timedelta(days=6)
            return f"{week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m')}"
        elif horoscope_type == "monthly":
            return today.strftime("%B %Y")
        elif horoscope_type == "yearly":
            return str(today.year)

        return ""

    def _is_horoscope_available(
            self,
            horoscope_type: str,
            subscription: str
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        if horoscope_type in ["daily", "weekly"]:
            return True  # –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
        elif horoscope_type == "monthly":
            return subscription in ["basic", "premium", "vip"]
        elif horoscope_type == "yearly":
            return subscription in ["premium", "vip"]

        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
def register_astrology_handler(router: Router) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.

    Args:
        router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    handler = AstrologyHandlers(router)
    handler.register_handlers()
    logger.info("Astrology handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


logger.info("–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")