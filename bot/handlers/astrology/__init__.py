"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–µ–π:
- –ì–æ—Ä–æ—Å–∫–æ–ø—ã (–¥–Ω–µ–≤–Ω—ã–µ, –Ω–µ–¥–µ–ª—å–Ω—ã–µ, –º–µ—Å—è—á–Ω—ã–µ, –≥–æ–¥–æ–≤—ã–µ)
- –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
- –¢—Ä–∞–Ω–∑–∏—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
- –°–∏–Ω–∞—Å—Ç—Ä–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
- –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from datetime import datetime, date, timedelta
from typing import Dict, Any, Optional, List
import asyncio
from zoneinfo import ZoneInfo

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from bot.handlers.base import BaseHandler, require_subscription, error_handler
from bot.states import AstrologyStates
from infrastructure.telegram import (
    Keyboards,
    MessageFactory,
    HoroscopeMessage,
    NatalChartMessage,
    TransitMessage,
    MoonPhaseMessage,
    SynastryMessage,
    MessageBuilder,
    MessageStyle,
    MessageEmoji as Emoji,
    ZodiacSign,
    HoroscopeType
)
from infrastructure import get_unit_of_work
from infrastructure.external_apis import get_llm_manager

logger = logging.getLogger(__name__)


class AstrologyHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    ZODIAC_DATES = {
        "aries": (3, 21, 4, 19),
        "taurus": (4, 20, 5, 20),
        "gemini": (5, 21, 6, 20),
        "cancer": (6, 21, 7, 22),
        "leo": (7, 23, 8, 22),
        "virgo": (8, 23, 9, 22),
        "libra": (9, 23, 10, 22),
        "scorpio": (10, 23, 11, 21),
        "sagittarius": (11, 22, 12, 21),
        "capricorn": (12, 22, 1, 19),
        "aquarius": (1, 20, 2, 18),
        "pisces": (2, 19, 3, 20)
    }

    def register_handlers(self, router: Router) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
        # –ö–æ–º–∞–Ω–¥–∞ /astrology
        router.message.register(
            self.cmd_astrology,
            Command("astrology")
        )

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
        router.callback_query.register(
            self.show_astrology_menu,
            F.data == "astrology_menu"
        )

        # –ì–æ—Ä–æ—Å–∫–æ–ø—ã
        router.callback_query.register(
            self.show_horoscope_menu,
            F.data == "horoscope_menu"
        )

        router.callback_query.register(
            self.select_horoscope_type,
            F.data.startswith("horoscope_type:")
        )

        router.callback_query.register(
            self.select_zodiac_sign,
            F.data.startswith("zodiac_select:")
        )

        # –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
        router.callback_query.register(
            self.show_natal_chart,
            F.data == "natal_chart"
        )

        router.callback_query.register(
            self.natal_chart_settings,
            F.data == "natal_settings"
        )

        # –¢—Ä–∞–Ω–∑–∏—Ç—ã
        router.callback_query.register(
            self.show_transits_menu,
            F.data == "transits_menu"
        )

        router.callback_query.register(
            self.select_transit_period,
            F.data.startswith("transit_period:")
        )

        # –°–∏–Ω–∞—Å—Ç—Ä–∏—è
        router.callback_query.register(
            self.start_synastry,
            F.data == "synastry_start"
        )

        router.callback_query.register(
            self.synastry_result,
            F.data.startswith("synastry_result:")
        )

        # –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        router.callback_query.register(
            self.show_lunar_calendar,
            F.data == "lunar_calendar"
        )

        router.callback_query.register(
            self.lunar_day_details,
            F.data.startswith("lunar_day:")
        )

        # –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è
        router.callback_query.register(
            self.start_birth_data_input,
            F.data == "input_birth_data"
        )

        router.callback_query.register(
            self.edit_birth_data,
            F.data == "edit_birth_data"
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        router.message.register(
            self.process_birth_date,
            StateFilter(AstrologyStates.waiting_for_date)
        )

        router.callback_query.register(
            self.process_birth_time_range,
            F.data.startswith("time_range:"),
            StateFilter(AstrologyStates.waiting_for_time)
        )

        router.callback_query.register(
            self.process_birth_city,
            F.data.startswith("city_select:"),
            StateFilter(AstrologyStates.waiting_for_place)
        )

        router.message.register(
            self.process_city_search,
            StateFilter(AstrologyStates.waiting_for_place)
        )

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        router.callback_query.register(
            self.calendar_navigation,
            F.data.startswith("calendar_nav:")
        )

    async def cmd_astrology(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /astrology - –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
        await state.clear()

        async with get_unit_of_work() as uow:
            user = await self.get_or_create_user(uow, message.from_user)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
            has_birth_data = bool(user.birth_data)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ª—É–Ω—ã
            moon_phase = self._calculate_moon_phase()

            keyboard = await Keyboards.astrology_menu(
                subscription_level=user.subscription_plan,
                has_birth_data=has_birth_data,
                current_moon_phase=moon_phase["emoji"]
            )

            text = await self._format_astrology_welcome(
                user,
                has_birth_data,
                moon_phase
            )

            await message.answer(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    async def show_astrology_menu(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
        await state.clear()

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            has_birth_data = bool(user.birth_data)
            moon_phase = self._calculate_moon_phase()

            keyboard = await Keyboards.astrology_menu(
                subscription_level=user.subscription_plan,
                has_birth_data=has_birth_data,
                current_moon_phase=moon_phase["emoji"]
            )

            text = await self._format_astrology_welcome(
                user,
                has_birth_data,
                moon_phase
            )

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    async def show_horoscope_menu(
            self,
            callback: CallbackQuery,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            user_sign = None
            if user.birth_data and user.birth_data.get("date"):
                birth_date = datetime.fromisoformat(user.birth_data["date"])
                user_sign = self._get_zodiac_sign(birth_date)

            keyboard = await Keyboards.horoscope_menu(
                subscription_level=user.subscription_plan,
                user_zodiac_sign=user_sign
            )

            text = (
                f"<b>{Emoji.STARS} –ì–æ—Ä–æ—Å–∫–æ–ø—ã</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞:\n\n"
            )

            if user_sign:
                text += f"–í–∞—à –∑–Ω–∞–∫: <b>{self._get_sign_name(user_sign)}</b>\n\n"
            else:
                text += (
                    f"üí° <i>–î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ "
                    f"–¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤</i>\n\n"
                )

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    async def select_horoscope_type(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        horoscope_type = callback.data.split(":")[1]

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            if not self._is_horoscope_available(horoscope_type, user.subscription_plan):
                await callback.answer(
                    "–≠—Ç–æ—Ç —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
                    show_alert=True
                )
                return

            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
            if user.birth_data and user.birth_data.get("date"):
                birth_date = datetime.fromisoformat(user.birth_data["date"])
                user_sign = self._get_zodiac_sign(birth_date)

                await self._show_horoscope(
                    callback,
                    horoscope_type,
                    user_sign,
                    user
                )
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∑–Ω–∞–∫–∞
                await state.update_data(horoscope_type=horoscope_type)

                keyboard = await Keyboards.zodiac_selection()

                text = (
                    f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞</b>\n\n"
                    f"–î–ª—è –∫–∞–∫–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å {self._get_horoscope_name(horoscope_type)}?"
                )

                await self.edit_or_send_message(
                    callback,
                    text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )

    async def select_zodiac_sign(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–í—ã–±–æ—Ä –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞."""
        sign = callback.data.split(":")[1]
        data = await state.get_data()
        horoscope_type = data.get("horoscope_type", "daily")

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            await self._show_horoscope(
                callback,
                horoscope_type,
                sign,
                user
            )

        await state.clear()

    @require_subscription("basic")
    async def show_natal_chart(
            self,
            callback: CallbackQuery,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user.birth_data or not all(
                    key in user.birth_data for key in ["date", "time", "place"]
            ):
                await callback.answer(
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è",
                    show_alert=True
                )

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
                keyboard = await Keyboards.birth_data_request()

                text = (
                    f"<b>{Emoji.WARNING} –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                    f"–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã:\n"
                    f"‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                    f"‚Ä¢ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                    f"‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?"
                )

                await self.edit_or_send_message(
                    callback,
                    text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
            await callback.answer(f"{Emoji.LOADING} –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...")

            natal_data = await self._calculate_natal_chart(user.birth_data)
            interpretation = await self._get_natal_interpretation(natal_data, user)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await uow.astrology.save_natal_chart(
                user_id=user.id,
                chart_data=natal_data,
                interpretation=interpretation
            )
            await uow.commit()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = NatalChartMessage(
                birth_data=user.birth_data,
                planets=natal_data["planets"],
                houses=natal_data["houses"],
                aspects=natal_data["aspects"],
                interpretation=interpretation
            )

            text = await message.format()

            keyboard = await Keyboards.natal_chart_actions()

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    @require_subscription("premium")
    async def show_transits_menu(
            self,
            callback: CallbackQuery,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user.birth_data:
                await callback.answer(
                    "–î–ª—è —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è",
                    show_alert=True
                )
                return

            keyboard = await Keyboards.transits_menu()

            text = (
                f"<b>{Emoji.TRANSIT} –¢—Ä–∞–Ω–∑–∏—Ç—ã –ø–ª–∞–Ω–µ—Ç</b>\n\n"
                f"–¢—Ä–∞–Ω–∑–∏—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç "
                f"–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"
            )

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    async def select_transit_period(
            self,
            callback: CallbackQuery,
            **kwargs
    ) -> None:
        """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤."""
        period = callback.data.split(":")[1]

        await callback.answer(f"{Emoji.LOADING} –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ç—Ä–∞–Ω–∑–∏—Ç—ã...")

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∏—Ç—ã
            transits = await self._calculate_transits(
                user.birth_data,
                period
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            interpretation = await self._get_transit_interpretation(
                transits,
                period,
                user
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = TransitMessage(
                period=period,
                transits=transits,
                interpretation=interpretation
            )

            text = await message.format()

            keyboard = await Keyboards.transit_actions(period)

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    @require_subscription("premium")
    async def start_synastry(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–∏–Ω–∞—Å—Ç—Ä–∏–∏."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user.birth_data:
                await callback.answer(
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è",
                    show_alert=True
                )
                return

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            await state.set_state(AstrologyStates.synastry_partner_data)

            text = (
                f"<b>{Emoji.HEART} –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</b>\n\n"
                f"–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
            )

            keyboard = await Keyboards.cancel_only()

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    async def show_lunar_calendar(
            self,
            callback: CallbackQuery,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        today = date.today()
        lunar_days = await self._calculate_lunar_month(today)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        keyboard = await Keyboards.lunar_calendar(
            year=today.year,
            month=today.month,
            lunar_days=lunar_days,
            selected_day=today.day
        )

        # –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã
        current_phase = self._calculate_moon_phase()

        text = (
            f"<b>{Emoji.MOON} –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b>\n\n"
            f"<b>–°–µ–≥–æ–¥–Ω—è:</b> {current_phase['emoji']} {current_phase['name']}\n"
            f"<b>–õ—É–Ω–Ω—ã–π –¥–µ–Ω—å:</b> {current_phase['day']}\n"
            f"<b>–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å:</b> {current_phase['illumination']}%\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        )

        await self.edit_or_send_message(
            callback,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    async def start_birth_data_input(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è."""
        await state.set_state(AstrologyStates.waiting_for_date)

        text = (
            f"<b>{Emoji.CALENDAR} –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            f"<b>–®–∞–≥ 1 –∏–∑ 3: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.1990"
        )

        keyboard = await Keyboards.cancel_only()

        await self.edit_or_send_message(
            callback,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    async def process_birth_date(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è."""
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            date_parts = message.text.strip().split(".")
            if len(date_parts) != 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

            day, month, year = map(int, date_parts)
            birth_date = datetime(year, month, day)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            if birth_date > datetime.now():
                raise ValueError("–î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º")

            if birth_date < datetime(1900, 1, 1):
                raise ValueError("–°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—Ä–µ–º–µ–Ω–∏
            await state.update_data(
                birth_date=birth_date.isoformat()
            )
            await state.set_state(AstrologyStates.waiting_for_time)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
            keyboard = await Keyboards.birth_time_selection()

            text = (
                f"<b>–®–∞–≥ 2 –∏–∑ 3: –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è.\n"
                f"–ß–µ–º —Ç–æ—á–Ω–µ–µ –≤—Ä–µ–º—è, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥—É—Ç —Ä–∞—Å—á–µ—Ç—ã."
            )

            await message.answer(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        except Exception as e:
            await message.answer(
                f"{Emoji.ERROR} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. "
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.1990"
            )

    async def process_birth_time_range(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è."""
        time_range = callback.data.split(":")[1]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        time_map = {
            "morning": "09:00",
            "afternoon": "15:00",
            "evening": "20:00",
            "night": "02:00",
            "unknown": "12:00"
        }

        birth_time = time_map.get(time_range, "12:00")

        await state.update_data(birth_time=birth_time)
        await state.set_state(AstrologyStates.waiting_for_place)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞
        keyboard = await Keyboards.birth_place_selection()

        text = (
            f"<b>–®–∞–≥ 3 –∏–∑ 3: –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )

        await self.edit_or_send_message(
            callback,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    async def process_birth_city(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è."""
        city = callback.data.split(":")[1]

        # –ú–∞–ø–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
        city_data = self._get_city_data(city)

        data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        birth_data = {
            "date": data["birth_date"],
            "time": data["birth_time"],
            "place": city_data["name"],
            "lat": city_data["lat"],
            "lon": city_data["lon"],
            "timezone": city_data["timezone"]
        }

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)
            user.birth_data = birth_data
            await uow.commit()

        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.answer(f"{Emoji.CHECK} –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

        keyboard = await Keyboards.birth_data_saved()

        text = (
            f"<b>{Emoji.CHECK} –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
            f"<b>–î–∞—Ç–∞:</b> {datetime.fromisoformat(birth_data['date']).strftime('%d.%m.%Y')}\n"
            f"<b>–í—Ä–µ–º—è:</b> {birth_data['time']}\n"
            f"<b>–ú–µ—Å—Ç–æ:</b> {birth_data['place']}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
            f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n"
            f"‚Ä¢ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞\n"
            f"‚Ä¢ –¢—Ä–∞–Ω–∑–∏—Ç—ã –ø–ª–∞–Ω–µ—Ç\n"
            f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
        )

        await self.edit_or_send_message(
            callback,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    async def _format_astrology_welcome(
            self,
            user,
            has_birth_data: bool,
            moon_phase: Dict[str, Any]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
        builder = MessageBuilder(MessageStyle.HTML)

        builder.add_bold(f"{Emoji.STARS} –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è").add_line(2)

        builder.add_text(
            "–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–π–Ω—ã –∑–≤–µ–∑–¥ –∏ –ø–ª–∞–Ω–µ—Ç. "
            "–£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –∫–æ—Å–º–æ—Å –æ –≤–∞—à–µ–π —Å—É–¥—å–±–µ."
        ).add_line(2)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—É–Ω–µ
        builder.add_text(
            f"–°–µ–≥–æ–¥–Ω—è: {moon_phase['emoji']} {moon_phase['name']}"
        ).add_line()

        if has_birth_data:
            builder.add_text(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã").add_line()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
            birth_date = datetime.fromisoformat(user.birth_data["date"])
            sign = self._get_zodiac_sign(birth_date)
            sign_name = self._get_sign_name(sign)

            builder.add_text(f"–í–∞—à –∑–Ω–∞–∫: <b>{sign_name}</b>").add_line()
        else:
            builder.add_text(
                f"üí° <i>–î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</i>"
            ).add_line()

        builder.add_line()
        builder.add_italic("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?")

        return builder.build()

    async def _show_horoscope(
            self,
            callback: CallbackQuery,
            horoscope_type: str,
            zodiac_sign: str,
            user
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø."""
        await callback.answer(f"{Emoji.LOADING} –°–æ—Å—Ç–∞–≤–ª—è—é –≥–æ—Ä–æ—Å–∫–æ–ø...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        async with get_unit_of_work() as uow:
            cached = await uow.astrology.get_cached_horoscope(
                zodiac_sign,
                horoscope_type,
                date.today()
            )

            if cached:
                horoscope_data = cached
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
                horoscope_data = await self._generate_horoscope(
                    zodiac_sign,
                    horoscope_type,
                    user
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                await uow.astrology.cache_horoscope(
                    zodiac_sign,
                    horoscope_type,
                    date.today(),
                    horoscope_data
                )
                await uow.commit()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = HoroscopeMessage(
            zodiac_sign=zodiac_sign,
            period_type=horoscope_type,
            period_dates=self._get_period_dates(horoscope_type),
            general_prediction=horoscope_data["general"],
            love_prediction=horoscope_data.get("love"),
            career_prediction=horoscope_data.get("career"),
            health_prediction=horoscope_data.get("health"),
            lucky_numbers=horoscope_data.get("lucky_numbers"),
            lucky_color=horoscope_data.get("lucky_color")
        )

        text = await message.format()

        keyboard = await Keyboards.horoscope_actions(
            zodiac_sign,
            horoscope_type,
            can_save=user.subscription_plan != "free"
        )

        await self.edit_or_send_message(
            callback,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    async def _generate_horoscope(
            self,
            zodiac_sign: str,
            horoscope_type: str,
            user
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø —Å –ø–æ–º–æ—â—å—é AI."""
        sign_name = self._get_sign_name(zodiac_sign)
        period_name = self._get_horoscope_name(horoscope_type)

        prompt = f"""
        –°–æ—Å—Ç–∞–≤—å {period_name} –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ {sign_name}.

        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
        1. –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        2. –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        3. –ö–∞—Ä—å–µ—Ä–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        4. –ó–¥–æ—Ä–æ–≤—å–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

        –°—Ç–∏–ª—å: –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏.
        –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
        """

        llm = await get_llm_manager()
        response = await llm.generate_completion(
            prompt,
            temperature=0.8,
            max_tokens=500
        )

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        sections = response.split("\n\n")

        horoscope_data = {
            "general": sections[0] if len(sections) > 0 else "–û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
            "love": sections[1] if len(sections) > 1 else None,
            "career": sections[2] if len(sections) > 2 else None,
            "health": sections[3] if len(sections) > 3 else None,
            "lucky_numbers": [7, 14, 23],  # –ú–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
            "lucky_color": "—Å–∏–Ω–∏–π"  # –ú–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ –∑–Ω–∞–∫—É
        }

        return horoscope_data

    async def _calculate_natal_chart(
            self,
            birth_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É."""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞

        return {
            "planets": {
                "sun": {"sign": "aries", "degree": 15.5, "house": 1},
                "moon": {"sign": "cancer", "degree": 22.3, "house": 4},
                "mercury": {"sign": "aries", "degree": 20.1, "house": 1},
                "venus": {"sign": "pisces", "degree": 10.7, "house": 12},
                "mars": {"sign": "leo", "degree": 5.2, "house": 5},
                "jupiter": {"sign": "sagittarius", "degree": 18.9, "house": 9},
                "saturn": {"sign": "capricorn", "degree": 25.4, "house": 10},
                "uranus": {"sign": "aquarius", "degree": 12.6, "house": 11},
                "neptune": {"sign": "pisces", "degree": 8.3, "house": 12},
                "pluto": {"sign": "scorpio", "degree": 14.7, "house": 8}
            },
            "houses": {
                1: {"sign": "aries", "degree": 0},
                2: {"sign": "taurus", "degree": 30},
                3: {"sign": "gemini", "degree": 60},
                4: {"sign": "cancer", "degree": 90},
                5: {"sign": "leo", "degree": 120},
                6: {"sign": "virgo", "degree": 150},
                7: {"sign": "libra", "degree": 180},
                8: {"sign": "scorpio", "degree": 210},
                9: {"sign": "sagittarius", "degree": 240},
                10: {"sign": "capricorn", "degree": 270},
                11: {"sign": "aquarius", "degree": 300},
                12: {"sign": "pisces", "degree": 330}
            },
            "aspects": [
                {"planet1": "sun", "planet2": "moon", "type": "square", "orb": 2.5},
                {"planet1": "venus", "planet2": "jupiter", "type": "trine", "orb": 1.2},
                {"planet1": "mars", "planet2": "saturn", "type": "opposition", "orb": 0.8}
            ]
        }

    async def _get_natal_interpretation(
            self,
            natal_data: Dict[str, Any],
            user
    ) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –æ—Ç AI."""
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è AI
        planets_desc = []
        for planet, data in natal_data["planets"].items():
            planets_desc.append(
                f"{planet} –≤ {data['sign']} –≤ {data['house']} –¥–æ–º–µ"
            )

        prompt = f"""
        –î–∞–π –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.

        –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:
        {chr(10).join(planets_desc[:5])}  # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã

        –î–∞–π –æ–±—â—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è),
        –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã –∏ –≤—ã–∑–æ–≤—ã.
        –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º.
        """

        llm = await get_llm_manager()
        interpretation = await llm.generate_completion(
            prompt,
            temperature=0.7,
            max_tokens=300
        )

        return interpretation

    async def _calculate_transits(
            self,
            birth_data: Dict[str, Any],
            period: str
    ) -> List[Dict[str, Any]]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–∞–Ω–∑–∏—Ç—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
        transits = [
            {
                "planet": "jupiter",
                "aspect": "trine",
                "natal_planet": "sun",
                "exact_date": date.today() + timedelta(days=5),
                "orb": 1.2,
                "importance": "high",
                "sphere": "career"
            },
            {
                "planet": "saturn",
                "aspect": "square",
                "natal_planet": "moon",
                "exact_date": date.today() + timedelta(days=15),
                "orb": 2.5,
                "importance": "medium",
                "sphere": "emotions"
            }
        ]

        return transits

    async def _get_transit_interpretation(
            self,
            transits: List[Dict[str, Any]],
            period: str,
            user
    ) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –æ—Ç AI."""
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
        transit_desc = []
        for t in transits[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ø-3
            transit_desc.append(
                f"{t['planet']} {t['aspect']} –∫ –Ω–∞—Ç–∞–ª—å–Ω–æ–º—É {t['natal_planet']}"
            )

        prompt = f"""
        –î–∞–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –Ω–∞ {self._get_period_name(period)}.

        –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã:
        {chr(10).join(transit_desc)}

        –û–ø–∏—à–∏ –æ–±—â—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ø–µ—Ä–∏–æ–¥–∞ –∏ –¥–∞–π 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞.
        –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º.
        """

        llm = await get_llm_manager()
        interpretation = await llm.generate_completion(
            prompt,
            temperature=0.7,
            max_tokens=250
        )

        return interpretation

    async def _calculate_lunar_month(
            self,
            target_date: date
    ) -> Dict[int, Dict[str, Any]]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ª—É–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–∞ –º–µ—Å—è—Ü."""
        lunar_days = {}

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        for day in range(1, 32):
            try:
                current_date = date(target_date.year, target_date.month, day)
                lunar_day = ((current_date.day + target_date.month * 2) % 30) + 1

                lunar_days[day] = {
                    "lunar_day": lunar_day,
                    "phase": self._get_moon_phase_for_day(lunar_day)
                }
            except ValueError:
                # –î–Ω—è –Ω–µ—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                pass

        return lunar_days

    def _calculate_moon_phase(self) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ª—É–Ω—ã."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        today = date.today()

        # –ò–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        known_new_moon = date(2024, 1, 11)
        days_since = (today - known_new_moon).days

        # –õ—É–Ω–Ω—ã–π –º–µ—Å—è—Ü ~29.53 –¥–Ω—è
        lunar_month = 29.53
        phase_days = days_since % lunar_month

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É
        if phase_days < 1.84:
            phase = {"name": "–ù–æ–≤–æ–ª—É–Ω–∏–µ", "emoji": "üåë", "percent": 0}
        elif phase_days < 5.53:
            phase = {"name": "–†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø", "emoji": "üåí", "percent": 25}
        elif phase_days < 9.22:
            phase = {"name": "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å", "emoji": "üåì", "percent": 50}
        elif phase_days < 12.91:
            phase = {"name": "–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞", "emoji": "üåî", "percent": 75}
        elif phase_days < 16.61:
            phase = {"name": "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "emoji": "üåï", "percent": 100}
        elif phase_days < 20.30:
            phase = {"name": "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞", "emoji": "üåñ", "percent": 75}
        elif phase_days < 23.99:
            phase = {"name": "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å", "emoji": "üåó", "percent": 50}
        else:
            phase = {"name": "–£–±—ã–≤–∞—é—â–∏–π —Å–µ—Ä–ø", "emoji": "üåò", "percent": 25}

        phase["day"] = int(phase_days) + 1
        phase["illumination"] = abs(phase["percent"])

        return phase

    def _get_moon_phase_for_day(self, lunar_day: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Ñ–∞–∑—ã –ª—É–Ω—ã –¥–ª—è –¥–Ω—è."""
        if lunar_day <= 2:
            return "üåë"
        elif lunar_day <= 6:
            return "üåí"
        elif lunar_day <= 9:
            return "üåì"
        elif lunar_day <= 13:
            return "üåî"
        elif lunar_day <= 17:
            return "üåï"
        elif lunar_day <= 21:
            return "üåñ"
        elif lunar_day <= 24:
            return "üåó"
        else:
            return "üåò"

    def _get_zodiac_sign(self, birth_date: datetime) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ø–æ –¥–∞—Ç–µ."""
        month = birth_date.month
        day = birth_date.day

        for sign, (start_month, start_day, end_month, end_day) in self.ZODIAC_DATES.items():
            if start_month == month and day >= start_day:
                return sign
            elif end_month == month and day <= end_day:
                return sign
            elif start_month > end_month:  # –ö–æ–∑–µ—Ä–æ–≥
                if month == start_month and day >= start_day:
                    return sign
                elif month == end_month and day <= end_day:
                    return sign

        return "aries"  # Fallback

    def _get_sign_name(self, sign: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
        names = {
            "aries": "–û–≤–µ–Ω ‚ôà",
            "taurus": "–¢–µ–ª–µ—Ü ‚ôâ",
            "gemini": "–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôä",
            "cancer": "–†–∞–∫ ‚ôã",
            "leo": "–õ–µ–≤ ‚ôå",
            "virgo": "–î–µ–≤–∞ ‚ôç",
            "libra": "–í–µ—Å—ã ‚ôé",
            "scorpio": "–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôè",
            "sagittarius": "–°—Ç—Ä–µ–ª–µ—Ü ‚ôê",
            "capricorn": "–ö–æ–∑–µ—Ä–æ–≥ ‚ôë",
            "aquarius": "–í–æ–¥–æ–ª–µ–π ‚ôí",
            "pisces": "–†—ã–±—ã ‚ôì"
        }
        return names.get(sign, sign.title())

    def _get_horoscope_name(self, horoscope_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        names = {
            "daily": "–¥–Ω–µ–≤–Ω–æ–π",
            "weekly": "–Ω–µ–¥–µ–ª—å–Ω—ã–π",
            "monthly": "–º–µ—Å—è—á–Ω—ã–π",
            "yearly": "–≥–æ–¥–æ–≤–æ–π"
        }
        return names.get(horoscope_type, horoscope_type)

    def _get_period_dates(self, horoscope_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        today = date.today()

        if horoscope_type == "daily":
            return today.strftime("%d.%m.%Y")
        elif horoscope_type == "weekly":
            week_start = today - timedelta(days=today.weekday())
            week_end = week_start + timedelta(days=6)
            return f"{week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m')}"
        elif horoscope_type == "monthly":
            return today.strftime("%B %Y")
        elif horoscope_type == "yearly":
            return str(today.year)

        return ""

    def _get_period_name(self, period: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞."""
        names = {
            "today": "—Å–µ–≥–æ–¥–Ω—è",
            "week": "–Ω–µ–¥–µ–ª—é",
            "month": "–º–µ—Å—è—Ü",
            "year": "–≥–æ–¥"
        }
        return names.get(period, period)

    def _is_horoscope_available(
            self,
            horoscope_type: str,
            subscription: str
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."""
        if horoscope_type in ["daily", "weekly"]:
            return True  # –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
        elif horoscope_type == "monthly":
            return subscription in ["basic", "premium", "vip"]
        elif horoscope_type == "yearly":
            return subscription in ["premium", "vip"]

        return False

    def _get_city_data(self, city_code: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞."""
        cities = {
            "moscow": {
                "name": "–ú–æ—Å–∫–≤–∞",
                "lat": 55.7558,
                "lon": 37.6173,
                "timezone": "Europe/Moscow"
            },
            "spb": {
                "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                "lat": 59.9311,
                "lon": 30.3609,
                "timezone": "Europe/Moscow"
            },
            "almaty": {
                "name": "–ê–ª–º–∞—Ç—ã",
                "lat": 43.2220,
                "lon": 76.8512,
                "timezone": "Asia/Almaty"
            },
            # –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –≥–æ—Ä–æ–¥–æ–≤
        }

        return cities.get(city_code, cities["moscow"])


def setup(router: Router) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏."""
    handler = AstrologyHandlers()
    handler.register_handlers(router)