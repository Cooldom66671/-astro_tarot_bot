"""
–ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
- –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
- –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import asyncio
import logging
import functools
import time
from typing import Optional, Dict, Any, Callable, Union, List, Type
from datetime import datetime

from aiogram import Router, types
from aiogram.filters import CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º cache_manager –≤–º–µ—Å—Ç–æ get_cache
from infrastructure.cache import cache_manager
from infrastructure import get_unit_of_work
from core.exceptions import SubscriptionRequiredError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class CommonMessages:
    """–û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    ERROR_GENERIC = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    SUBSCRIPTION_REQUIRED = "‚≠ê –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞!"
    RATE_LIMIT_EXCEEDED = "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    MAINTENANCE = "üîß –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


class BaseHandler:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""

    def __init__(self, router: Router):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

        Args:
            router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        """
        self.router = router
        self.name = self.__class__.__name__

        logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ {self.name}")

    def register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö."""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ register_handlers –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")

    async def log_action(
            self,
            user_id: int,
            action: str,
            details: Optional[Dict[str, Any]] = None
    ) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            action: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        log_data = {
            "user_id": user_id,
            "action": action,
            "handler": self.name,
            "timestamp": datetime.now().isoformat(),
            "details": details or {}
        }

        logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {log_data}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        cache_key = f"user_action:{user_id}:{int(time.time())}"
        await cache_manager.set(cache_key, log_data, ttl=86400)  # 24 —á–∞—Å–∞

    async def check_subscription(
            self,
            user_id: int,
            required_level: str = "basic"
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            required_level: –¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏

        Returns:
            True –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –Ω—É–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
        """
        try:
            async with get_unit_of_work() as uow:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await uow.users.get_by_telegram_id(user_id)
                if not user:
                    return False

                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                subscription = await uow.subscriptions.get_active_by_user_id(user.id)
                if not subscription:
                    return False

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
                return subscription.check_access_level(required_level)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    async def send_typing_action(
            self,
            chat_id: Union[int, str]
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç".

        Args:
            chat_id: ID —á–∞—Ç–∞
        """
        try:
            from aiogram import Bot
            bot = Bot.get_current()
            await bot.send_chat_action(chat_id, action="typing")
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing action: {e}")

    async def get_user_language(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –ö–æ–¥ —è–∑—ã–∫–∞ (ru, en –∏ —Ç.–¥.)
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"user_lang:{user_id}"
            cached_lang = await cache_manager.get(cache_key)
            if cached_lang:
                return cached_lang

            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
            async with get_unit_of_work() as uow:
                user = await uow.users.get_by_telegram_id(user_id)
                if user and user.language_code:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    await cache_manager.set(cache_key, user.language_code, ttl=3600)
                    return user.language_code

            return "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return "ru"


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã

def error_handler(send_message: bool = True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö.

    Args:
        send_message: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """

    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç message –∏–ª–∏ callback_query
            message = None
            callback_query = None

            # self –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –µ—Å–ª–∏ —ç—Ç–æ –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞
            start_index = 1 if args and hasattr(args[0], '__class__') else 0

            for arg in args[start_index:]:
                if isinstance(arg, types.Message):
                    message = arg
                    break
                elif isinstance(arg, types.CallbackQuery):
                    callback_query = arg
                    message = arg.message
                    break

            try:
                return await func(*args, **kwargs)

            except TelegramBadRequest as e:
                logger.error(f"Telegram API –æ—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")

                if send_message and message:
                    error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
                    if callback_query:
                        await callback_query.answer(error_text, show_alert=True)
                    elif message:
                        await message.answer(error_text)

            except SubscriptionRequiredError:
                if send_message and message:
                    if callback_query:
                        await callback_query.answer(
                            "‚≠ê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞",
                            show_alert=True
                        )
                    else:
                        await message.answer(CommonMessages.SUBSCRIPTION_REQUIRED)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)

                if send_message and message:
                    error_text = CommonMessages.ERROR_GENERIC
                    if callback_query:
                        await callback_query.answer(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                            show_alert=True
                        )
                    elif message:
                        await message.answer(error_text)

        return wrapper

    return decorator


def require_subscription(level: str = "basic"):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        level: –¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
    """

    def decorator(func):
        @functools.wraps(func)
        async def wrapper(self, message: types.Message, *args, **kwargs):
            user_id = message.from_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            has_access = await self.check_subscription(user_id, level)

            if not has_access:
                await message.answer(CommonMessages.SUBSCRIPTION_REQUIRED)
                # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                from infrastructure.telegram.keyboards import Keyboards
                keyboard = Keyboards.subscription_offer()
                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:",
                    reply_markup=keyboard
                )
                return

            return await func(self, message, *args, **kwargs)

        return wrapper

    return decorator


def log_action(action_name: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π.

    Args:
        action_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–æ–≥–æ–≤
    """

    def decorator(func):
        @functools.wraps(func)
        async def wrapper(self, *args, **kwargs):
            # –ù–∞—Ö–æ–¥–∏–º user_id
            user_id = None

            for arg in args:
                if isinstance(arg, types.Message):
                    user_id = arg.from_user.id
                    break
                elif isinstance(arg, types.CallbackQuery):
                    user_id = arg.from_user.id
                    break

            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ
            start_time = time.time()

            try:
                result = await func(self, *args, **kwargs)

                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                if user_id and hasattr(self, 'log_action'):
                    await self.log_action(
                        user_id,
                        action_name,
                        {
                            "status": "success",
                            "duration": time.time() - start_time
                        }
                    )

                return result

            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                if user_id and hasattr(self, 'log_action'):
                    await self.log_action(
                        user_id,
                        action_name,
                        {
                            "status": "error",
                            "error": str(e),
                            "duration": time.time() - start_time
                        }
                    )
                raise

        return wrapper

    return decorator


def check_rate_limit(max_calls: int = 10, period: int = 60):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit.

    Args:
        max_calls: –ú–∞–∫—Å–∏–º—É–º –≤—ã–∑–æ–≤–æ–≤
        period: –ü–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """

    def decorator(func):
        @functools.wraps(func)
        async def wrapper(self, *args, **kwargs):
            # –ù–∞—Ö–æ–¥–∏–º user_id
            user_id = None
            message = None

            for arg in args:
                if isinstance(arg, types.Message):
                    user_id = arg.from_user.id
                    message = arg
                    break
                elif isinstance(arg, types.CallbackQuery):
                    user_id = arg.from_user.id
                    message = arg.message
                    break

            if not user_id:
                return await func(self, *args, **kwargs)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
            cache_key = f"rate_limit:{func.__name__}:{user_id}"
            current_count = await cache_manager.get(cache_key) or 0

            if current_count >= max_calls:
                if message:
                    await message.answer(CommonMessages.RATE_LIMIT_EXCEEDED)
                return

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            await cache_manager.set(
                cache_key,
                current_count + 1,
                ttl=period
            )

            return await func(self, *args, **kwargs)

        return wrapper

    return decorator


# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

async def get_or_create_user(telegram_user: types.User) -> Any:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.

    Args:
        telegram_user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram

    Returns:
        –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    """
    async with get_unit_of_work() as uow:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await uow.users.get_by_telegram_id(telegram_user.id)

        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from core.entities import User
            from datetime import datetime

            user = User(
                telegram_id=telegram_user.id,
                username=telegram_user.username,
                first_name=telegram_user.first_name,
                last_name=telegram_user.last_name,
                language_code=telegram_user.language_code or "ru",
                created_at=datetime.now(),
                is_active=True
            )

            user = await uow.users.create(user)
            await uow.commit()

        return user


async def answer_callback_query(
        callback_query: types.CallbackQuery,
        text: Optional[str] = None,
        show_alert: bool = False
) -> None:
    """
    –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.

    Args:
        callback_query: Callback query
        text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        show_alert: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫ alert
    """
    try:
        await callback_query.answer(text, show_alert=show_alert)
    except TelegramBadRequest as e:
        # Callback query —É–∂–µ —É—Å—Ç–∞—Ä–µ–ª
        logger.debug(f"Callback query —É—Å—Ç–∞—Ä–µ–ª: {e}")


async def edit_or_send_message(
        message: types.Message,
        text: str,
        reply_markup: Optional[Any] = None,
        parse_mode: Optional[str] = None,
        **kwargs
) -> types.Message:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    Returns:
        –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        return await message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            **kwargs
        )
    except TelegramBadRequest:
        # –ù–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        return await message.answer(
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            **kwargs
        )


async def delete_message_safe(message: types.Message) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    Returns:
        True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        await message.delete()
        return True
    except TelegramBadRequest:
        return False


async def send_long_message(
        message: types.Message,
        text: str,
        parse_mode: Optional[str] = None,
        chunk_size: int = 4000
) -> List[types.Message]:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤ –Ω–∞ —á–∞—Å—Ç–∏.

    Args:
        message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
        chunk_size: –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –∫—É—Å–∫–∞

    Returns:
        –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    messages = []

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    for i in range(0, len(text), chunk_size):
        chunk = text[i:i + chunk_size]

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ—Å—Ä–µ–¥–∏ —Å–ª–æ–≤–∞
        if i + chunk_size < len(text) and not text[i + chunk_size].isspace():
            last_space = chunk.rfind(' ')
            if last_space > 0:
                chunk = chunk[:last_space]
                i -= (chunk_size - last_space)

        sent_message = await message.answer(chunk, parse_mode=parse_mode)
        messages.append(sent_message)

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if i + chunk_size < len(text):
            await asyncio.sleep(0.1)

    return messages


# –ö–ª–∞—Å—Å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
class HandlerGroup:
    """–ì—Ä—É–ø–ø–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""

    def __init__(self, router: Router, prefix: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã.

        Args:
            router: –†–æ—É—Ç–µ—Ä
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ª–æ–≥–æ–≤
        """
        self.router = router
        self.prefix = prefix
        self.handlers: List[BaseHandler] = []

    def add_handler(self, handler_class: Type[BaseHandler]) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –≥—Ä—É–ø–ø—É."""
        handler = handler_class(self.router)
        handler.register_handlers()
        self.handlers.append(handler)

        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler.name} –≤ –≥—Ä—É–ø–ø–µ {self.prefix}")

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã."""
        return {
            "total_handlers": len(self.handlers),
            "handlers": [h.name for h in self.handlers],
            "prefix": self.prefix
        }


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
async def is_user_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    """
    from config import settings
    return user_id in settings.bot.admin_ids


async def is_user_blocked_bot(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
    """
    try:
        from aiogram import Bot
        bot = Bot.get_current()
        await bot.send_chat_action(user_id, action="typing")
        return False
    except TelegramBadRequest as e:
        if "chat not found" in str(e).lower():
            return True
        return False


logger.info("–ú–æ–¥—É–ª—å –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")