"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –û–±—â—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –±–æ—Ç—É
- –†–∞–∑–¥–µ–ª—ã –ø–æ–º–æ—â–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
- –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)
- –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
- –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import Optional, Dict, List, Any
from enum import Enum

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.handlers.base import (
    BaseHandler,
    error_handler,
    log_action,
    answer_callback_query,
    edit_or_send_message
)
from config import settings, BotCommands

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–†
from infrastructure.telegram.keyboards import (
    InlineKeyboard,
    DynamicMenu,
    PaginatedKeyboard,
    Keyboards,
    BaseCallbackData,
    parse_callback_data
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class HelpSection(Enum):
    """–†–∞–∑–¥–µ–ª—ã –ø–æ–º–æ—â–∏."""
    GENERAL = ("general", "üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    COMMANDS = ("commands", "üí¨ –ö–æ–º–∞–Ω–¥—ã")
    TAROT = ("tarot", "üé¥ –¢–∞—Ä–æ")
    ASTROLOGY = ("astrology", "üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è")
    SUBSCRIPTION = ("subscription", "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
    PROFILE = ("profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    FAQ = ("faq", "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    SUPPORT = ("support", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")

    def __init__(self, code: str, title: str):
        self.code = code
        self.title = title


class FAQCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ FAQ."""
    GENERAL = ("general", "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
    TAROT = ("tarot", "–í–æ–ø—Ä–æ—Å—ã –æ –¢–∞—Ä–æ")
    ASTROLOGY = ("astrology", "–í–æ–ø—Ä–æ—Å—ã –æ–± –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–∏")
    PAYMENT = ("payment", "–û–ø–ª–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞")
    TECHNICAL = ("technical", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")

    def __init__(self, code: str, title: str):
        self.code = code
        self.title = title


# –ù–û–í–´–ï CALLBACK DATA –ö–õ–ê–°–°–´
class HelpCallbackData(BaseCallbackData, prefix="help"):
    """Callback data –¥–ª—è –ø–æ–º–æ—â–∏."""
    section: Optional[str] = None


class FAQCallbackData(BaseCallbackData, prefix="faq"):
    """Callback data –¥–ª—è FAQ."""
    category: Optional[str] = None
    question_id: Optional[int] = None


# –ù–û–í–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –ü–û–ú–û–©–ò
class HelpMenuKeyboard(DynamicMenu):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –ø–æ–º–æ—â–∏."""

    def __init__(self):
        super().__init__(menu_id="help_main", level=0)

    async def build(self, **kwargs) -> types.InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        for section in HelpSection:
            if section == HelpSection.FAQ:
                # FAQ –∏–º–µ–µ—Ç –ø–æ–¥–º–µ–Ω—é
                self.add_menu_item(
                    section.code,
                    section.title.split()[1],  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
                    section.title.split()[0],   # –≠–º–æ–¥–∑–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                    submenu=True
                )
            else:
                self.add_button(
                    text=section.title,
                    callback_data=HelpCallbackData(
                        action="section",
                        value=section.code
                    )
                )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.builder.adjust(1, 1, 1, 1, 2, 2)

        return await super().build(**kwargs)


# –ù–û–í–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø FAQ
class FAQKeyboard(PaginatedKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ FAQ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""

    def __init__(self, category: FAQCategory, questions: List[Dict[str, str]], page: int = 1):
        self.category = category
        self.questions = questions
        super().__init__(
            items=questions,
            page_size=5,
            current_page=page,
            menu_type=f"faq_{category.code}"
        )

    async def build(self, **kwargs) -> types.InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É FAQ."""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.add_button(
            text=f"üìÇ {self.category.title}",
            callback_data="noop"
        )

        # –í–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_questions = self.get_page_items()

        for i, q in enumerate(page_questions):
            # –í—ã—á–∏—Å–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
            global_index = (self.current_page - 1) * self.page_size + i

            self.add_button(
                text=f"‚ùì {q['question'][:50]}{'...' if len(q['question']) > 50 else ''}",
                callback_data=FAQCallbackData(
                    action="show",
                    value=self.category.code,
                    page=global_index
                )
            )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        self.builder.adjust(1, *([1] * len(page_questions)))

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if self.total_pages > 1:
            self.add_pagination_buttons()

        # –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.add_button(
            text="‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data=FAQCallbackData(action="menu")
        )

        return await super().build(**kwargs)


class HelpHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–º–æ—â–∏."""

    # FAQ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    FAQ_DATA = {
        FAQCategory.GENERAL: [
            {
                "question": "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?",
                "answer": (
                    "–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å –¢–∞—Ä–æ –∏ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–µ–π:\n"
                    "‚Ä¢ –ì–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ\n"
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n"
                    "‚Ä¢ –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
                    "‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä\n"
                    "‚Ä¢ –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
                )
            },
            {
                "question": "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?",
                "answer": (
                    "1. –ù–∞–∂–º–∏—Ç–µ /start\n"
                    "2. –ü—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
                    "3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª\n"
                    "4. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞"
                )
            },
            {
                "question": "–ë–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π?",
                "answer": (
                    "–î–∞, –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã:\n"
                    "‚Ä¢ 1 –∫–∞—Ä—Ç–∞ –¥–Ω—è\n"
                    "‚Ä¢ 3 –ø—Ä–æ—Å—Ç—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –¥–µ–Ω—å\n"
                    "‚Ä¢ –û–±—â–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n\n"
                    "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ."
                )
            }
        ],
        FAQCategory.TAROT: [
            {
                "question": "–ö–∞–∫–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã?",
                "answer": (
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã:\n"
                    "‚Ä¢ –ö–∞—Ä—Ç–∞ –¥–Ω—è - –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
                    "‚Ä¢ –¢—Ä–∏ –∫–∞—Ä—Ç—ã - –ø—Ä–æ—à–ª–æ–µ/–Ω–∞—Å—Ç–æ—è—â–µ–µ/–±—É–¥—É—â–µ–µ\n"
                    "‚Ä¢ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
                    "‚Ä¢ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n"
                    "‚Ä¢ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É –∏ —Ñ–∏–Ω–∞–Ω—Å—ã"
                )
            },
            {
                "question": "–ú–æ–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã?",
                "answer": (
                    "–î–∞! –í—Å–µ –≤–∞—à–∏ —Ä–∞—Å–∫–ª–∞–¥—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è:\n"
                    "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n"
                    "‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
                    "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å–∫–ª–∞–¥–æ–º"
                )
            }
        ],
        FAQCategory.ASTROLOGY: [
            {
                "question": "–ù—É–∂–Ω–æ –ª–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è?",
                "answer": (
                    "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞–∂–Ω–æ –¥–ª—è:\n"
                    "‚Ä¢ –¢–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–º–æ–≤\n"
                    "‚Ä¢ –ü–æ–ª–æ–∂–µ–Ω–∏—è –õ—É–Ω—ã\n"
                    "‚Ä¢ –í–æ—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–Ω–∞–∫–∞\n\n"
                    "–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç."
                )
            },
            {
                "question": "–ö–∞–∫–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã?",
                "answer": (
                    "–¢–∏–ø—ã –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤:\n"
                    "‚Ä¢ –î–Ω–µ–≤–Ω–æ–π - –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
                    "‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–π –∏ –º–µ—Å—è—á–Ω—ã–π\n"
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã\n"
                    "‚Ä¢ –õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø\n"
                    "‚Ä¢ –ë–∏–∑–Ω–µ—Å-–≥–æ—Ä–æ—Å–∫–æ–ø"
                )
            }
        ],
        FAQCategory.PAYMENT: [
            {
                "question": "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã?",
                "answer": (
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n"
                    "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã\n"
                    "‚Ä¢ –ÆMoney (–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏)\n"
                    "‚Ä¢ Telegram Stars\n"
                    "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n\n"
                    "–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã."
                )
            },
            {
                "question": "–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
                "answer": (
                    "–î–∞, –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç:\n"
                    "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /subscription\n"
                    "2. –ù–∞–∂–º–∏—Ç–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'\n"
                    "3. –í—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'\n\n"
                    "–î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞."
                )
            }
        ],
        FAQCategory.TECHNICAL: [
            {
                "question": "–ë–µ–∑–æ–ø–∞—Å–Ω—ã –ª–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ?",
                "answer": (
                    "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã:\n"
                    "‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n"
                    "‚Ä¢ –ù–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
                    "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ GDPR\n"
                    "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
                )
            },
            {
                "question": "–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞?",
                "answer": (
                    "–î–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ Telegram Desktop\n"
                    "‚Ä¢ Telegram Web\n\n"
                    "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ."
                )
            }
        ]
    }

    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ–º–æ—â–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    HELP_CONTENT = {
        HelpSection.GENERAL: (
            "üìã <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
            "–ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ë–æ—Ç - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏.\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ì–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n"
            "‚Ä¢ –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n"
            "‚Ä¢ –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å /menu –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ."
        ),
        HelpSection.COMMANDS: (
            "üí¨ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
            "<b>–†–∞–∑–¥–µ–ª—ã:</b>\n"
            "/tarot - –†–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ\n"
            "/astrology - –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è\n"
            "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/subscription - –ü–æ–¥–ø–∏—Å–∫–∞\n\n"
            "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
            "/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        ),
        HelpSection.TAROT: (
            "üé¥ <b>–ü–æ–º–æ—â—å –ø–æ –¢–∞—Ä–æ</b>\n\n"
            "<b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥:</b>\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ /tarot –∏–ª–∏ –¢–∞—Ä–æ –≤ –º–µ–Ω—é\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞\n"
            "3. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å\n"
            "4. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ –¥–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–ª—É—á–∞—é\n\n"
            "<b>–¢–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤:</b>\n"
            "‚Ä¢ <b>–ö–∞—Ä—Ç–∞ –¥–Ω—è</b> - –æ–±—â–∏–π —Å–æ–≤–µ—Ç –Ω–∞ –¥–µ–Ω—å\n"
            "‚Ä¢ <b>–¢—Ä–∏ –∫–∞—Ä—Ç—ã</b> - –ø—Ä–æ—à–ª–æ–µ/–Ω–∞—Å—Ç–æ—è—â–µ–µ/–±—É–¥—É—â–µ–µ\n"
            "‚Ä¢ <b>–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç</b> - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏\n"
            "‚Ä¢ <b>–û—Ç–Ω–æ—à–µ–Ω–∏—è</b> - –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞\n"
            "‚Ä¢ <b>–î–∞/–ù–µ—Ç</b> - –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç"
        ),
        HelpSection.ASTROLOGY: (
            "üîÆ <b>–ü–æ–º–æ—â—å –ø–æ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–∏</b>\n\n"
            "<b>–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω—É–∂–Ω—ã:</b>\n"
            "‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)\n"
            "‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ <b>–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</b> - –≤–∞—à –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç\n"
            "‚Ä¢ <b>–ì–æ—Ä–æ—Å–∫–æ–ø—ã</b> - –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü\n"
            "‚Ä¢ <b>–¢—Ä–∞–Ω–∑–∏—Ç—ã</b> - —Ç–µ–∫—É—â–∏–µ –≤–ª–∏—è–Ω–∏—è –ø–ª–∞–Ω–µ—Ç\n"
            "‚Ä¢ <b>–°–∏–Ω–∞—Å—Ç—Ä–∏—è</b> - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n"
            "‚Ä¢ <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b> - –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏"
        ),
        HelpSection.SUBSCRIPTION: (
            "üíé <b>–ü–æ–º–æ—â—å –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
            "<b>–£—Ä–æ–≤–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
            "üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π</b>\n"
            "‚Ä¢ 1 –∫–∞—Ä—Ç–∞ –¥–Ω—è\n"
            "‚Ä¢ 3 –ø—Ä–æ—Å—Ç—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ –û–±—â–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n\n"
            "‚≠ê <b>Premium</b>\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "üåü <b>VIP</b>\n"
            "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Premium\n"
            "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã\n"
            "‚Ä¢ –õ–∏—á–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
            "‚Ä¢ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º"
        ),
        HelpSection.PROFILE: (
            "üë§ <b>–ü–æ–º–æ—â—å –ø–æ –ø—Ä–æ—Ñ–∏–ª—é</b>\n\n"
            "<b>–í –ø—Ä–æ—Ñ–∏–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π\n\n"
            "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:</b>\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n"
            "‚Ä¢ –õ—é–±–∏–º—ã–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
        )
    }

    def register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –ö–æ–º–∞–Ω–¥–∞ /help
        self.router.message.register(
            self.cmd_help,
            Command("help")
        )

        # Callback –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ–º–æ—â–∏ - –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
        self.router.callback_query.register(
            self.help_callback_handler,
            HelpCallbackData.filter()
        )

        # Callback –¥–ª—è FAQ - –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
        self.router.callback_query.register(
            self.faq_callback_handler,
            FAQCallbackData.filter()
        )

        # –°—Ç–∞—Ä—ã–µ callback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.router.callback_query.register(
            self.legacy_help_callback,
            F.data.startswith("help:")
        )

        self.router.callback_query.register(
            self.legacy_faq_callback,
            F.data.startswith("faq:")
        )

        # –ö–æ–º–∞–Ω–¥–∞ /support
        self.router.message.register(
            self.cmd_support,
            Command("support")
        )

        # –ö–æ–º–∞–Ω–¥–∞ /commands
        self.router.message.register(
            self.cmd_commands,
            Command("commands")
        )

    @error_handler()
    @log_action("help_command")
    async def cmd_help(
            self,
            message: types.Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        """
        text = (
            "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        )

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£
        keyboard = HelpMenuKeyboard()
        kb = await keyboard.build()

        await message.answer(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    @error_handler()
    @log_action("support_command")
    async def cmd_support(
            self,
            message: types.Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support."""
        text = (
            "üÜò <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
            "–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n\n"
            "<b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>\n"
            "‚Ä¢ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @astrotaro_support\n"
            "‚Ä¢ Email: support@astrotaro.bot\n"
            "‚Ä¢ –í –±–æ—Ç–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /feedback\n\n"
            "<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
            "–ü–Ω-–ü—Ç: 9:00 - 21:00 –ú–°–ö\n"
            "–°–±-–í—Å: 10:00 - 18:00 –ú–°–ö\n\n"
            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 30 –º–∏–Ω—É—Ç"
        )

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£
        keyboard = InlineKeyboard()
        keyboard.add_button(
            text="üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            url="https://t.me/astrotaro_support"
        )
        keyboard.add_button(
            text="üìß –ù–∞–ø–∏—Å–∞—Ç—å email",
            url="mailto:support@astrotaro.bot"
        )
        keyboard.add_button(
            text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            callback_data=FAQCallbackData(action="menu")
        )
        keyboard.add_button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ",
            callback_data=HelpCallbackData(action="menu")
        )

        keyboard.builder.adjust(1, 1, 1, 1)
        kb = await keyboard.build()

        await message.answer(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    @error_handler()
    async def cmd_commands(
            self,
            message: types.Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /commands."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ COMMANDS
        text = self.HELP_CONTENT[HelpSection.COMMANDS]

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ö–ù–û–ü–ö–£ –ù–ê–ó–ê–î
        keyboard = await Keyboards.back(
            HelpCallbackData(action="menu").pack()
        )

        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    @error_handler()
    async def help_callback_handler(
            self,
            callback: types.CallbackQuery,
            callback_data: HelpCallbackData,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–º–æ—â–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π callback."""
        action = callback_data.action

        if action == "menu":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ–º–æ—â–∏
            text = (
                "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
            )
            keyboard = HelpMenuKeyboard()
            kb = await keyboard.build()
        elif action == "section":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª
            section_code = callback_data.value
            section = None

            for s in HelpSection:
                if s.code == section_code:
                    section = s
                    break

            if not section:
                await answer_callback_query(callback, "–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è FAQ
            if section == HelpSection.FAQ:
                await self._show_faq_menu(callback)
                return
            elif section == HelpSection.SUPPORT:
                # –î–ª—è support –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é
                await self._show_support_menu(callback)
                return
            else:
                text = self.HELP_CONTENT.get(section, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                kb = self._create_section_keyboard(section)
        else:
            await answer_callback_query(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            return

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )

        await answer_callback_query(callback)

    @error_handler()
    async def faq_callback_handler(
            self,
            callback: types.CallbackQuery,
            callback_data: FAQCallbackData,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ FAQ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π callback."""
        action = callback_data.action

        if action == "menu":
            await self._show_faq_menu(callback)
        elif action == "category":
            category_code = callback_data.value
            await self._show_faq_category(callback, category_code)
        elif action == "show":
            category_code = callback_data.value
            question_index = callback_data.page
            await self._show_faq_question(callback, category_code, question_index)

        await answer_callback_query(callback)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @error_handler()
    async def legacy_help_callback(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        _, action = callback.data.split(":", 1)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        if action == "menu":
            new_callback_data = HelpCallbackData(action="menu")
        else:
            new_callback_data = HelpCallbackData(action="section", value=action)

        await self.help_callback_handler(callback, new_callback_data, state)

    @error_handler()
    async def legacy_faq_callback(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        parts = callback.data.split(":")

        if len(parts) < 2:
            await answer_callback_query(callback, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        action = parts[1]

        if action == "menu":
            new_callback_data = FAQCallbackData(action="menu")
        elif action == "category" and len(parts) >= 3:
            new_callback_data = FAQCallbackData(action="category", value=parts[2])
        elif action == "question" and len(parts) >= 4:
            new_callback_data = FAQCallbackData(
                action="show",
                value=parts[2],
                page=int(parts[3])
            )
        else:
            await answer_callback_query(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            return

        await self.faq_callback_handler(callback, new_callback_data, state)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    def _create_section_keyboard(self, section: HelpSection) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞."""
        keyboard = InlineKeyboard()

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        if section == HelpSection.GENERAL:
            keyboard.add_button(
                text="üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ",
                callback_data="welcome:start"
            )
        elif section == HelpSection.TAROT:
            from infrastructure.telegram.keyboards import TarotCallbackData
            keyboard.add_button(
                text="üé¥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –¢–∞—Ä–æ",
                callback_data=TarotCallbackData(action="menu")
            )
        elif section == HelpSection.ASTROLOGY:
            from infrastructure.telegram.keyboards import AstrologyCallbackData
            keyboard.add_button(
                text="üîÆ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–∏",
                callback_data=AstrologyCallbackData(action="menu")
            )
        elif section == HelpSection.SUBSCRIPTION:
            from infrastructure.telegram.keyboards import SubscriptionCallbackData
            keyboard.add_button(
                text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data=SubscriptionCallbackData(action="plans")
            )

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.add_button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ",
            callback_data=HelpCallbackData(action="menu")
        )

        return keyboard.builder.as_markup()

    async def _show_faq_menu(self, callback: types.CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é FAQ."""
        text = (
            "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        )

        keyboard = InlineKeyboard()

        for category in FAQCategory:
            keyboard.add_button(
                text=category.title,
                callback_data=FAQCallbackData(
                    action="category",
                    value=category.code
                )
            )

        keyboard.builder.adjust(1)

        keyboard.add_button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ",
            callback_data=HelpCallbackData(action="menu")
        )

        kb = await keyboard.build()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    async def _show_faq_category(
            self,
            callback: types.CallbackQuery,
            category_code: str
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = None
        for c in FAQCategory:
            if c.code == category_code:
                category = c
                break

        if not category or category not in self.FAQ_DATA:
            await answer_callback_query(
                callback,
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                show_alert=True
            )
            return

        questions = self.FAQ_DATA[category]

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ü–ê–ì–ò–ù–ò–†–û–í–ê–ù–ù–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£
        keyboard = FAQKeyboard(category, questions)
        kb = await keyboard.build()

        text = f"‚ùì <b>{category.title}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:"

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    async def _show_faq_question(
            self,
            callback: types.CallbackQuery,
            category_code: str,
            question_index: int
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = None
        for c in FAQCategory:
            if c.code == category_code:
                category = c
                break

        if not category or category not in self.FAQ_DATA:
            return

        questions = self.FAQ_DATA[category]
        if question_index >= len(questions):
            return

        faq = questions[question_index]

        text = (
            f"‚ùî <b>{faq['question']}</b>\n\n"
            f"{faq['answer']}"
        )

        keyboard = InlineKeyboard()

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
        nav_row = []
        if question_index > 0:
            nav_row.append(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                callback_data=FAQCallbackData(
                    action="show",
                    value=category_code,
                    page=question_index - 1
                ).pack()
            ))

        if question_index < len(questions) - 1:
            nav_row.append(types.InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
                callback_data=FAQCallbackData(
                    action="show",
                    value=category_code,
                    page=question_index + 1
                ).pack()
            ))

        if nav_row:
            keyboard.builder.row(*nav_row)

        keyboard.add_button(
            text="üìã –ö –≤–æ–ø—Ä–æ—Å–∞–º",
            callback_data=FAQCallbackData(
                action="category",
                value=category_code
            )
        )

        keyboard.add_button(
            text="‚ùì –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            callback_data=FAQCallbackData(action="menu")
        )

        kb = await keyboard.build()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    async def _show_support_menu(self, callback: types.CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
        text = (
            "üÜò <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
            "–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\n\n"
            "<b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>\n"
            "‚Ä¢ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @astrotaro_support\n"
            "‚Ä¢ Email: support@astrotaro.bot\n\n"
            "<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
            "–ü–Ω-–ü—Ç: 9:00 - 21:00 –ú–°–ö\n"
            "–°–±-–í—Å: 10:00 - 18:00 –ú–°–ö"
        )

        keyboard = InlineKeyboard()

        keyboard.add_button(
            text="üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            url="https://t.me/astrotaro_support"
        )
        keyboard.add_button(
            text="üìß –ù–∞–ø–∏—Å–∞—Ç—å email",
            url="mailto:support@astrotaro.bot"
        )
        keyboard.add_button(
            text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            callback_data=FAQCallbackData(action="menu")
        )
        keyboard.add_button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ",
            callback_data=HelpCallbackData(action="menu")
        )

        keyboard.builder.adjust(1, 1, 1, 1)
        kb = await keyboard.build()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
def register_help_handler(router: Router) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–º–æ—â–∏.

    Args:
        router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    handler = HelpHandler(router)
    handler.register_handlers()
    logger.info("Help handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


logger.info("–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–º–æ—â–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")