"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –û–±—â—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –±–æ—Ç—É
- –†–∞–∑–¥–µ–ª—ã –ø–æ–º–æ—â–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
- –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)
- –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
- –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import Optional, Dict, List
from enum import Enum

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.handlers.base import BaseHandler, error_handler, log_action
from infrastructure.telegram import (
    MessageBuilder,
    MessageStyle,
    InlineKeyboard,
    DynamicMenu,
    get_info_message
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class HelpSection(Enum):
    """–†–∞–∑–¥–µ–ª—ã –ø–æ–º–æ—â–∏."""
    GENERAL = ("general", "üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "general")
    COMMANDS = ("commands", "üí¨ –ö–æ–º–∞–Ω–¥—ã", "commands")
    TAROT = ("tarot", "üé¥ –¢–∞—Ä–æ", "tarot")
    ASTROLOGY = ("astrology", "üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "astrology")
    SUBSCRIPTION = ("subscription", "üíé –ü–æ–¥–ø–∏—Å–∫–∞", "subscription")
    PROFILE = ("profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile")
    FAQ = ("faq", "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "faq")
    SUPPORT = ("support", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support")

    def __init__(self, code: str, title: str, key: str):
        self.code = code
        self.title = title
        self.key = key


class FAQCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ FAQ."""
    GENERAL = ("general", "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
    TAROT = ("tarot", "–í–æ–ø—Ä–æ—Å—ã –æ –¢–∞—Ä–æ")
    ASTROLOGY = ("astrology", "–í–æ–ø—Ä–æ—Å—ã –æ–± –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–∏")
    PAYMENT = ("payment", "–û–ø–ª–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞")
    TECHNICAL = ("technical", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")

    def __init__(self, code: str, title: str):
        self.code = code
        self.title = title


class HelpHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–º–æ—â–∏."""

    # FAQ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    FAQ_DATA = {
        FAQCategory.GENERAL: [
            {
                "question": "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?",
                "answer": (
                    "–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å –¢–∞—Ä–æ –∏ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–µ–π:\n"
                    "‚Ä¢ –ì–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ\n"
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n"
                    "‚Ä¢ –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
                    "‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä\n"
                    "‚Ä¢ –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
                )
            },
            {
                "question": "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?",
                "answer": (
                    "1. –ù–∞–∂–º–∏—Ç–µ /start\n"
                    "2. –ü—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
                    "3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª\n"
                    "4. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞"
                )
            },
            {
                "question": "–ë–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π?",
                "answer": (
                    "–î–∞, –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã:\n"
                    "‚Ä¢ 1 –∫–∞—Ä—Ç–∞ –¥–Ω—è\n"
                    "‚Ä¢ 3 –ø—Ä–æ—Å—Ç—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –¥–µ–Ω—å\n"
                    "‚Ä¢ –û–±—â–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n\n"
                    "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ."
                )
            }
        ],
        FAQCategory.TAROT: [
            {
                "question": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ä–∞—Å–∫–ª–∞–¥—ã?",
                "answer": (
                    "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞\n"
                    "2. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å\n"
                    "3. –ë–æ—Ç –ø–µ—Ä–µ–º–µ—à–∞–µ—Ç –∫–æ–ª–æ–¥—É\n"
                    "4. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã\n"
                    "5. –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é"
                )
            },
            {
                "question": "–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥?",
                "answer": (
                    "–î–∞, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
                    "‚Ä¢ –ù–µ –¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã —á–∞—â–µ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å\n"
                    "‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-—Ä–∞–∑–Ω–æ–º—É\n"
                    "‚Ä¢ –î–æ–≤–µ—Ä—è—Ç—å –ø–µ—Ä–≤–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É"
                )
            },
            {
                "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã?",
                "answer": (
                    "–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç:\n"
                    "‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã\n"
                    "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏\n"
                    "‚Ä¢ –¢–µ–Ω–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã\n"
                    "‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è"
                )
            }
        ],
        FAQCategory.ASTROLOGY: [
            {
                "question": "–ó–∞—á–µ–º –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è?",
                "answer": (
                    "–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã:\n"
                    "‚Ä¢ –î–∞—Ç–∞ - –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞\n"
                    "‚Ä¢ –í—Ä–µ–º—è - –¥–ª—è –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç–∞ –∏ –¥–æ–º–æ–≤\n"
                    "‚Ä¢ –ú–µ—Å—Ç–æ - –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç\n\n"
                    "–ë–µ–∑ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É."
                )
            },
            {
                "question": "–ß—Ç–æ –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞—é –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è?",
                "answer": (
                    "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ–ª–¥–µ–Ω—å.\n"
                    "–ë—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
                    "‚Ä¢ –ü–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –≤ –∑–Ω–∞–∫–∞—Ö\n"
                    "‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã\n\n"
                    "–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã:\n"
                    "‚Ä¢ –¢–æ—á–Ω—ã–π –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç\n"
                    "‚Ä¢ –î–æ–º–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"
                )
            },
            {
                "question": "–ö–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑—ã?",
                "answer": (
                    "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
                    "‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–µ - –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º\n"
                    "‚Ä¢ –ú–µ—Å—è—á–Ω—ã–µ - 1 —á–∏—Å–ª–∞\n"
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ - —É—á–∏—Ç—ã–≤–∞—é—Ç —Ç—Ä–∞–Ω–∑–∏—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
                )
            }
        ],
        FAQCategory.PAYMENT: [
            {
                "question": "–ö–∞–∫–∏–µ –µ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—ã?",
                "answer": (
                    "ü•â –ë–∞–∑–æ–≤—ã–π - 299‚ÇΩ/–º–µ—Å\n"
                    "ü•à –ü—Ä–µ–º–∏—É–º - 599‚ÇΩ/–º–µ—Å\n"
                    "ü•á VIP - 1499‚ÇΩ/–º–µ—Å\n\n"
                    "–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞ –≥–æ–¥ - —Å–∫–∏–¥–∫–∞ 17%"
                )
            },
            {
                "question": "–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
                "answer": (
                    "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª üíé –ü–æ–¥–ø–∏—Å–∫–∞\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ\n"
                    "3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n"
                    "4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n\n"
                    "–ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—ã, –ÆMoney, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É."
                )
            },
            {
                "question": "–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
                "answer": (
                    "1. –ó–∞–π–¥–∏—Ç–µ –≤ üíé –ü–æ–¥–ø–∏—Å–∫–∞\n"
                    "2. –ù–∞–∂–º–∏—Ç–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'\n"
                    "3. –í—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'\n\n"
                    "–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."
                )
            }
        ],
        FAQCategory.TECHNICAL: [
            {
                "question": "–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å?",
                "answer": (
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n"
                    "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
                    "3. –û–±–Ω–æ–≤–∏—Ç—å Telegram\n\n"
                    "–ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
            },
            {
                "question": "–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?",
                "answer": (
                    "1. –ó–∞–π–¥–∏—Ç–µ –≤ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å'\n"
                    "3. –ù–∞–∂–º–∏—Ç–µ '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ'\n\n"
                    "–í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
                )
            },
            {
                "question": "–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞?",
                "answer": (
                    "–î–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ Telegram Desktop\n"
                    "‚Ä¢ Telegram Web\n\n"
                    "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ."
                )
            }
        ]
    }

    def register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –ö–æ–º–∞–Ω–¥–∞ /help
        self.router.message.register(
            self.cmd_help,
            Command("help")
        )

        # Callback –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ–º–æ—â–∏
        self.router.callback_query.register(
            self.help_section_callback,
            F.data.startswith("help:")
        )

        # Callback –¥–ª—è FAQ
        self.router.callback_query.register(
            self.faq_callback,
            F.data.startswith("faq:")
        )

        # –ö–æ–º–∞–Ω–¥–∞ /support
        self.router.message.register(
            self.cmd_support,
            Command("support")
        )

        # –ö–æ–º–∞–Ω–¥–∞ /commands
        self.router.message.register(
            self.cmd_commands,
            Command("commands")
        )

    @error_handler()
    @log_action("help_command")
    async def cmd_help(
            self,
            message: types.Message,
            state: FSMContext
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        """
        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–º–æ—â–∏
        builder = MessageBuilder(MessageStyle.MARKDOWN_V2)

        builder.add_bold("üìö –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å").add_line()
        builder.add_separator().add_line()

        builder.add_line("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
        builder.add_line()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏
        keyboard = await self._create_help_menu()

        await message.answer(
            builder.build(),
            reply_markup=keyboard,
            parse_mode="MarkdownV2"
        )

    @error_handler()
    @log_action("support_command")
    async def cmd_support(
            self,
            message: types.Message,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support."""
        support_text = await get_info_message("support")

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboard()

        keyboard.add_button(
            text="üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            url="https://t.me/astrotaro_support"
        )

        keyboard.add_button(
            text="üìß –ù–∞–ø–∏—Å–∞—Ç—å email",
            url="mailto:support@astrotaro.bot"
        )

        keyboard.add_button(
            text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            callback_data="help:faq"
        )

        keyboard.builder.adjust(1, 1, 1)

        await message.answer(
            support_text,
            reply_markup=await keyboard.build(),
            parse_mode="MarkdownV2"
        )

    @error_handler()
    async def cmd_commands(
            self,
            message: types.Message,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /commands."""
        commands_text = await get_info_message("commands")

        await message.answer(
            commands_text,
            parse_mode="MarkdownV2"
        )

    @error_handler()
    async def help_section_callback(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–º–æ—â–∏."""
        _, section_code = callback.data.split(":", 1)

        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª
        section = None
        for s in HelpSection:
            if s.code == section_code:
                section = s
                break

        if not section:
            await callback.answer("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞
        if section == HelpSection.FAQ:
            await self._show_faq_menu(callback.message)
        else:
            content = await self._get_section_content(section)
            keyboard = await self._create_section_keyboard(section)

            await callback.message.edit_text(
                content,
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )

        await callback.answer()

    @error_handler()
    async def faq_callback(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ FAQ."""
        parts = callback.data.split(":")
        action = parts[1]

        if action == "category":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_code = parts[2]
            await self._show_faq_category(callback.message, category_code)

        elif action == "question":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
            category_code = parts[2]
            question_index = int(parts[3])
            await self._show_faq_answer(callback.message, category_code, question_index)

        elif action == "menu":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é FAQ
            await self._show_faq_menu(callback.message)

        await callback.answer()

    async def _create_help_menu(self) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–º–æ—â–∏."""
        menu = DynamicMenu("help_main")

        for section in HelpSection:
            menu.add_menu_item(
                item_id=section.code,
                text=section.title,
                emoji=section.title.split()[0]
            )

        return await menu.build()

    async def _get_section_content(self, section: HelpSection) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–º–æ—â–∏."""
        builder = MessageBuilder(MessageStyle.MARKDOWN_V2)

        builder.add_bold(section.title).add_line()
        builder.add_separator().add_line()

        # –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        if section == HelpSection.GENERAL:
            builder.add_line("ü§ñ **–ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç** - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏.")
            builder.add_empty_line()
            builder.add_bold("–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:").add_line()
            builder.add_list([
                "–ì–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ",
                "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã",
                "–ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã",
                "–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
                "–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
            ])

        elif section == HelpSection.COMMANDS:
            commands_text = await get_info_message("commands")
            return commands_text

        elif section == HelpSection.TAROT:
            builder.add_line("–†–∞–∑–¥–µ–ª **–¢–∞—Ä–æ** –ø–æ–∑–≤–æ–ª—è–µ—Ç:")
            builder.add_list([
                "–ü–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è",
                "–î–µ–ª–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã",
                "–ò–∑—É—á–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç",
                "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞–∂–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã",
                "–í–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏–π"
            ])
            builder.add_empty_line()
            builder.add_italic("–°–æ–≤–µ—Ç: —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ç–∫–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ")

        elif section == HelpSection.ASTROLOGY:
            builder.add_line("–†–∞–∑–¥–µ–ª **–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è** –≤–∫–ª—é—á–∞–µ—Ç:")
            builder.add_list([
                "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã",
                "–ù–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è",
                "–¢–µ–∫—É—â–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã –ø–ª–∞–Ω–µ—Ç",
                "–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–∞—Ä",
                "–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
            ])
            builder.add_empty_line()
            builder.add_italic("–î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è")

        elif section == HelpSection.SUBSCRIPTION:
            builder.add_line("üíé **–ü–æ–¥–ø–∏—Å–∫–∞** –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç:")
            builder.add_empty_line()
            builder.add_bold("–ë–∞–∑–æ–≤—ã–π (299‚ÇΩ/–º–µ—Å):").add_line()
            builder.add_list([
                "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–Ω—è",
                "10 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ –¥–µ–Ω—å",
                "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã"
            ])
            builder.add_empty_line()
            builder.add_bold("–ü—Ä–µ–º–∏—É–º (599‚ÇΩ/–º–µ—Å):").add_line()
            builder.add_list([
                "–í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ë–∞–∑–æ–≤–æ–≥–æ",
                "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã",
                "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞",
                "–¢—Ä–∞–Ω–∑–∏—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏"
            ])

        elif section == HelpSection.PROFILE:
            builder.add_line("–í —Ä–∞–∑–¥–µ–ª–µ **–ü—Ä–æ—Ñ–∏–ª—å** –≤—ã –º–æ–∂–µ—Ç–µ:")
            builder.add_list([
                "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ",
                "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è",
                "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                "–£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π",
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            ])

        elif section == HelpSection.SUPPORT:
            support_text = await get_info_message("support")
            return support_text

        return builder.build()

    async def _create_section_keyboard(
            self,
            section: HelpSection
    ) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞."""
        keyboard = InlineKeyboard()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        if section == HelpSection.TAROT:
            keyboard.add_button(
                text="üé¥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¢–∞—Ä–æ",
                callback_data="main_menu:tarot"
            )
        elif section == HelpSection.ASTROLOGY:
            keyboard.add_button(
                text="üîÆ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—é",
                callback_data="main_menu:astrology"
            )
        elif section == HelpSection.SUBSCRIPTION:
            keyboard.add_button(
                text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="main_menu:subscription"
            )

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.add_button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º",
            callback_data="help:menu"
        )

        return await keyboard.build()

    async def _show_faq_menu(self, message: types.Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é FAQ."""
        builder = MessageBuilder(MessageStyle.MARKDOWN_V2)

        builder.add_bold("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã").add_line()
        builder.add_separator().add_line()
        builder.add_line("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")

        keyboard = InlineKeyboard()

        for category in FAQCategory:
            keyboard.add_button(
                text=category.title,
                callback_data=f"faq:category:{category.code}"
            )

        keyboard.add_button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="help:menu"
        )

        keyboard.builder.adjust(1)

        await message.edit_text(
            builder.build(),
            reply_markup=await keyboard.build(),
            parse_mode="MarkdownV2"
        )

    async def _show_faq_category(
            self,
            message: types.Message,
            category_code: str
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = None
        for c in FAQCategory:
            if c.code == category_code:
                category = c
                break

        if not category or category not in self.FAQ_DATA:
            return

        builder = MessageBuilder(MessageStyle.MARKDOWN_V2)
        builder.add_bold(f"‚ùì {category.title}").add_line()
        builder.add_separator().add_line()

        keyboard = InlineKeyboard()

        # –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = self.FAQ_DATA[category]
        for i, faq in enumerate(questions):
            # –°–æ–∫—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏
            short_question = faq["question"]
            if len(short_question) > 30:
                short_question = short_question[:27] + "..."

            keyboard.add_button(
                text=f"‚ùî {short_question}",
                callback_data=f"faq:question:{category_code}:{i}"
            )

        keyboard.add_button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="faq:menu"
        )

        keyboard.builder.adjust(1)

        await message.edit_text(
            builder.build(),
            reply_markup=await keyboard.build(),
            parse_mode="MarkdownV2"
        )

    async def _show_faq_answer(
            self,
            message: types.Message,
            category_code: str,
            question_index: int
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = None
        for c in FAQCategory:
            if c.code == category_code:
                category = c
                break

        if not category or category not in self.FAQ_DATA:
            return

        questions = self.FAQ_DATA[category]
        if question_index >= len(questions):
            return

        faq = questions[question_index]

        builder = MessageBuilder(MessageStyle.MARKDOWN_V2)
        builder.add_bold("‚ùî " + faq["question"]).add_line()
        builder.add_separator().add_line()
        builder.add_line(faq["answer"])

        keyboard = InlineKeyboard()

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
        if question_index > 0:
            keyboard.add_button(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                callback_data=f"faq:question:{category_code}:{question_index - 1}"
            )

        if question_index < len(questions) - 1:
            keyboard.add_button(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
                callback_data=f"faq:question:{category_code}:{question_index + 1}"
            )

        keyboard.add_button(
            text="üìã –ö –≤–æ–ø—Ä–æ—Å–∞–º",
            callback_data=f"faq:category:{category_code}"
        )

        keyboard.add_button(
            text="‚ùì –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            callback_data="faq:menu"
        )

        if len(questions) > 1:
            keyboard.builder.adjust(2, 1, 1)
        else:
            keyboard.builder.adjust(1, 1)

        await message.edit_text(
            builder.build(),
            reply_markup=await keyboard.build(),
            parse_mode="MarkdownV2"
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
def register_help_handler(router: Router) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–º–æ—â–∏.

    Args:
        router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    handler = HelpHandler(router)
    handler.register_handlers()
    logger.info("Help handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


logger.info("–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–º–æ—â–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")