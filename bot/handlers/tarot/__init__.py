"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–∞ –¢–∞—Ä–æ.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¢–∞—Ä–æ:
- –í—ã–±–æ—Ä –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
- –ò—Å—Ç–æ—Ä–∏—è –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
- –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- –ö–∞—Ä—Ç–∞ –¥–Ω—è

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from datetime import datetime, date, timedelta
from typing import List, Dict, Any, Optional
import random
import asyncio

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from bot.handlers.base import (
    BaseHandler,
    require_subscription,
    error_handler,
    log_action,
    get_or_create_user,
    answer_callback_query,
    edit_or_send_message
)
from bot.states import TarotStates
from infrastructure.telegram.keyboards import (
    Keyboards,
    InlineKeyboard,
    TarotCallbackData,
    SpreadCallbackData,
    CardCallbackData,
    HistoryCallbackData
)
from infrastructure import get_unit_of_work
from services import get_tarot_service
from config import settings

logger = logging.getLogger(__name__)


class TarotHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –¢–∞—Ä–æ."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    TAROT_DECK_SIZE = 78
    MAJOR_ARCANA_SIZE = 22

    def register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¢–∞—Ä–æ."""
        # –ö–æ–º–∞–Ω–¥–∞ /tarot
        self.router.message.register(
            self.cmd_tarot,
            Command("tarot")
        )

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¢–∞—Ä–æ
        self.router.callback_query.register(
            self.show_tarot_menu,
            F.data == "tarot_menu"
        )

        # –ö–∞—Ä—Ç–∞ –¥–Ω—è
        self.router.callback_query.register(
            self.daily_card,
            F.data == "tarot_daily_card"
        )

        # –í—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞
        self.router.callback_query.register(
            self.show_spreads_list,
            F.data == "tarot_spreads"
        )

        self.router.callback_query.register(
            self.select_spread,
            F.data.startswith("spread_select:")
        )

        # –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
        self.router.callback_query.register(
            self.start_card_selection,
            F.data.startswith("spread_start:")
        )

        self.router.callback_query.register(
            self.select_card,
            F.data.startswith("card_select:"),
            StateFilter(TarotStates.selecting_cards)
        )

        self.router.callback_query.register(
            self.random_card_selection,
            F.data == "card_random",
            StateFilter(TarotStates.selecting_cards)
        )

        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.router.callback_query.register(
            self.show_card_detail,
            F.data.startswith("card_detail:")
        )

        self.router.callback_query.register(
            self.toggle_favorite,
            F.data.startswith("tarot_favorite:")
        )

        self.router.callback_query.register(
            self.share_reading,
            F.data.startswith("tarot_share:")
        )

        # –ò—Å—Ç–æ—Ä–∏—è
        self.router.callback_query.register(
            self.show_history,
            F.data == "tarot_history"
        )

        self.router.callback_query.register(
            self.show_reading_from_history,
            F.data.startswith("history_reading:")
        )

        self.router.callback_query.register(
            self.delete_reading,
            F.data.startswith("reading_delete:")
        )

        # –û–±—É—á–µ–Ω–∏–µ
        self.router.callback_query.register(
            self.show_learning_menu,
            F.data == "tarot_learning"
        )

        self.router.callback_query.register(
            self.show_lesson,
            F.data.startswith("tarot_lesson:")
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.router.callback_query.register(
            self.show_statistics,
            F.data == "tarot_stats"
        )

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        self.router.callback_query.register(
            self.navigate_cards,
            F.data.startswith("card_nav:")
        )

    @error_handler()
    @log_action("tarot_command")
    async def cmd_tarot(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /tarot - –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –¢–∞—Ä–æ."""
        await state.clear()

        async with get_unit_of_work() as uow:
            user = await get_or_create_user(message.from_user)
            user_db = await uow.users.get_by_telegram_id(message.from_user.id)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await uow.tarot.get_user_statistics(user_db.id) if user_db else {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è
            daily_card = await uow.tarot.get_daily_card(user_db.id, date.today()) if user_db else None

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            keyboard = await Keyboards.tarot_menu(
                subscription_level=user_db.subscription_plan if user_db and hasattr(user_db, 'subscription_plan') else None,
                has_saved_spreads=stats.get("total_spreads", 0) > 0,
                has_daily_card=daily_card is not None
            )

            text = self._format_tarot_welcome(user_db, stats, daily_card)

            await message.answer(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    @error_handler()
    async def show_tarot_menu(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¢–∞—Ä–æ."""
        await state.clear()

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user:
                await answer_callback_query(callback, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å —Å /start", show_alert=True)
                return

            stats = await uow.tarot.get_user_statistics(user.id)
            daily_card = await uow.tarot.get_daily_card(user.id, date.today())

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            keyboard = await Keyboards.tarot_menu(
                subscription_level=user.subscription_plan if hasattr(user, 'subscription_plan') else None,
                has_saved_spreads=stats.get("total_spreads", 0) > 0,
                has_daily_card=daily_card is not None
            )

            text = self._format_tarot_welcome(user, stats, daily_card)

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    @log_action("daily_card")
    async def daily_card(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ö–∞—Ä—Ç–∞ –¥–Ω—è."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user:
                await answer_callback_query(callback, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å —Å /start", show_alert=True)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
            today_card = await uow.tarot.get_daily_card(user.id, date.today())

            if today_card:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É
                card_info = await self._get_card_info(today_card.card_id)
                text = self._format_daily_card_repeat(card_info, today_card)
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
                tarot_service = get_tarot_service()
                card_info = await tarot_service.generate_daily_card(user.id, date.today())

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                await uow.tarot.save_daily_card(
                    user_id=user.id,
                    card_id=card_info['id'],
                    date=date.today()
                )
                await uow.commit()

                text = self._format_daily_card_new(card_info)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            keyboard = await Keyboards.tarot_daily_card_result(card_id=card_info['id'])

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def show_spreads_list(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)
            subscription = user.subscription_plan if user and hasattr(user, 'subscription_plan') else "free"

            text = (
                "üé¥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥</b>\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏:"
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            spreads_list = self._get_spreads_list()
            keyboard = await Keyboards.tarot_spreads_menu(
                spreads=spreads_list,
                user_subscription=subscription
            )

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def select_spread(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞."""
        spread_type = callback.data.split(":")[1]

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∞
            if not self._is_spread_available(spread_type, user.subscription_plan if user else "free"):
                await answer_callback_query(
                    callback,
                    "‚≠ê –≠—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ",
                    show_alert=True
                )
                return

            spread_info = self._get_spread_info(spread_type)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                spread_type=spread_type,
                spread_info=spread_info
            )

            if spread_info["requires_question"]:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
                text = (
                    f"<b>{spread_info['name']}</b>\n\n"
                    f"{spread_info['description']}\n\n"
                    "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
                )

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = InlineKeyboard()
                keyboard.add_button(
                    text="‚è≠ –ë–µ–∑ –≤–æ–ø—Ä–æ—Å–∞",
                    callback_data=f"spread_start:{spread_type}:no_question"
                )
                keyboard.add_button(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="tarot_spreads"
                )
                keyboard.builder.adjust(1)

                await edit_or_send_message(
                    callback.message,
                    text,
                    reply_markup=await keyboard.build(),
                    parse_mode="HTML"
                )

                await state.set_state(TarotStates.waiting_for_question)
            else:
                # –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥
                await self.start_card_selection(callback, state)

        await answer_callback_query(callback)

    @error_handler()
    async def start_card_selection(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç."""
        data = await state.get_data()
        spread_info = data.get("spread_info")

        if not spread_info:
            await answer_callback_query(callback, "–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–∫–ª–∞–¥–µ –ø–æ—Ç–µ—Ä—è–Ω–∞", show_alert=True)
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–æ–¥—É
        deck = list(range(self.TAROT_DECK_SIZE))
        random.shuffle(deck)

        await state.update_data(
            deck=deck,
            selected_cards=[],
            current_position=0
        )

        text = (
            f"<b>–í—ã–±–æ—Ä –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ \"{spread_info['name']}\"</b>\n\n"
            f"–ü–æ–∑–∏—Ü–∏—è 1/{spread_info['card_count']}: {spread_info['positions'][0]}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–ª–∏ –¥–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–ª—É—á–∞—é:"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        keyboard = await Keyboards.tarot_card_selection()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        await state.set_state(TarotStates.selecting_cards)
        await answer_callback_query(callback)

    @error_handler()
    async def show_history(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å–∫–ª–∞–¥–æ–≤."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user:
                await answer_callback_query(callback, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å —Å /start", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = await uow.tarot.get_user_spreads(user.id, limit=10)

            if not history:
                text = "üìö <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤."

                keyboard = InlineKeyboard()
                keyboard.add_button(text="üé¥ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", callback_data="tarot_spreads")
                keyboard.add_button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="tarot_menu")
                keyboard.builder.adjust(1)

                keyboard_markup = await keyboard.build()
            else:
                text = "üìö <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤</b>\n\n–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã:"

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
                history_items = []
                for reading in history[:5]:
                    spread_name = self._get_spread_info(reading.spread_type)["name"]
                    history_items.append({
                        'id': reading.id,
                        'date': reading.created_at,
                        'spread_type': reading.spread_type,
                        'spread_name': spread_name
                    })

                keyboard_markup = await Keyboards.tarot_history(history_items)

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=keyboard_markup,
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    @error_handler()
    async def show_learning_menu(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è."""
        text = (
            "üìñ <b>–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ä–æ</b>\n\n"
            "–ò–∑—É—á–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç –∏ –æ—Å–Ω–æ–≤—ã –≥–∞–¥–∞–Ω–∏—è:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        keyboard = await Keyboards.tarot_learning_menu()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        await answer_callback_query(callback)

    @error_handler()
    async def show_statistics(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not user:
                await answer_callback_query(callback, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å —Å /start", show_alert=True)
                return

            stats = await uow.tarot.get_detailed_statistics(user.id)

            text = self._format_statistics(stats)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboard()
            keyboard.add_button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh:tarot_stats")
            keyboard.add_button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="tarot_menu")
            keyboard.builder.adjust(1)

            await edit_or_send_message(
                callback.message,
                text,
                reply_markup=await keyboard.build(),
                parse_mode="HTML"
            )

        await answer_callback_query(callback)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    def _format_tarot_welcome(
            self,
            user: Any,
            stats: Dict[str, Any],
            daily_card: Any
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        text = "üé¥ <b>–¢–∞—Ä–æ</b>\n\n"

        if user and hasattr(user, 'display_name'):
            text += f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.display_name}!\n\n"

        text += "–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–π–Ω—ã —Å—É–¥—å–±—ã —Å –ø–æ–º–æ—â—å—é –¥—Ä–µ–≤–Ω–µ–π –º—É–¥—Ä–æ—Å—Ç–∏ –∫–∞—Ä—Ç –¢–∞—Ä–æ.\n\n"

        if stats.get("total_spreads", 0) > 0:
            text += f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            text += f"‚Ä¢ –†–∞—Å–∫–ª–∞–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['total_spreads']}\n"

            if stats.get("favorite_card"):
                text += f"‚Ä¢ –ß–∞—Å—Ç–∞—è –∫–∞—Ä—Ç–∞: {stats['favorite_card']}\n"

            text += "\n"

        if daily_card:
            text += "‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞\n\n"
        else:
            text += "üé¥ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è!\n\n"

        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        return text

    def _format_daily_card_new(self, card_info: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–Ω—è."""
        text = (
            f"üé¥ <b>–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è</b>\n\n"
            f"<b>{card_info['name']}</b>\n\n"
            f"<i>{card_info['description']}</i>\n\n"
            f"<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {', '.join(card_info['keywords'])}\n\n"
            f"<b>–°–æ–≤–µ—Ç –Ω–∞ –¥–µ–Ω—å:</b>\n{card_info['daily_advice']}"
        )

        return text

    def _format_daily_card_repeat(self, card_info: Dict[str, Any], saved_card: Any) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç—ã –¥–Ω—è."""
        text = (
            f"üé¥ <b>–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è</b>\n"
            f"<i>(–ø–æ–ª—É—á–µ–Ω–∞ –≤ {saved_card.created_at.strftime('%H:%M')})</i>\n\n"
            f"<b>{card_info['name']}</b>\n\n"
            f"<i>{card_info['description']}</i>\n\n"
            f"<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n{card_info['daily_advice']}"
        )

        return text

    def _format_statistics(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        text = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢–∞—Ä–æ</b>\n\n"

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text += f"<b>–í—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤:</b> {stats.get('total_spreads', 0)}\n"
        text += f"<b>–ö–∞—Ä—Ç –¥–Ω—è –ø–æ–ª—É—á–µ–Ω–æ:</b> {stats.get('daily_cards', 0)}\n"
        text += f"<b>–ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤:</b> {stats.get('favorites', 0)}\n\n"

        # –õ—é–±–∏–º—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã
        if stats.get('favorite_spreads'):
            text += "<b>–õ—é–±–∏–º—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã:</b>\n"
            for spread, count in stats['favorite_spreads'][:3]:
                text += f"‚Ä¢ {spread}: {count} —Ä–∞–∑\n"
            text += "\n"

        # –ß–∞—Å—Ç—ã–µ –∫–∞—Ä—Ç—ã
        if stats.get('frequent_cards'):
            text += "<b>–ß–∞—Å—Ç—ã–µ –∫–∞—Ä—Ç—ã:</b>\n"
            for card, count in stats['frequent_cards'][:5]:
                text += f"‚Ä¢ {card}: {count} —Ä–∞–∑\n"

        return text

    def _get_spreads_list(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤."""
        return [
            {
                "id": "three_cards",
                "name": "üîÆ –¢—Ä–∏ –∫–∞—Ä—Ç—ã",
                "required_subscription": "free"
            },
            {
                "id": "celtic_cross",
                "name": "‚ú® –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
                "required_subscription": "basic"
            },
            {
                "id": "relationship",
                "name": "üíë –û—Ç–Ω–æ—à–µ–Ω–∏—è",
                "required_subscription": "premium"
            },
            {
                "id": "year_ahead",
                "name": "üìÖ –ì–æ–¥ –≤–ø–µ—Ä–µ–¥",
                "required_subscription": "premium"
            },
            {
                "id": "decision",
                "name": "ü§î –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è",
                "required_subscription": "basic"
            },
            {
                "id": "chakras",
                "name": "üåà –ß–∞–∫—Ä—ã",
                "required_subscription": "vip"
            }
        ]

    def _get_spread_info(self, spread_type: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–∫–ª–∞–¥–µ."""
        spreads = {
            "three_cards": {
                "type": "three_cards",
                "name": "–¢—Ä–∏ –∫–∞—Ä—Ç—ã",
                "description": "–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Ç—É–∞—Ü–∏–∏",
                "card_count": 3,
                "positions": ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"],
                "requires_question": True,
                "subscription": "free"
            },
            "celtic_cross": {
                "type": "celtic_cross",
                "name": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥",
                "card_count": 10,
                "positions": [
                    "–°–∏—Ç—É–∞—Ü–∏—è", "–í—ã–∑–æ–≤", "–ü—Ä–æ—à–ª–æ–µ", "–ë—É–¥—É—â–µ–µ",
                    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–í–ª–∏—è–Ω–∏–µ", "–°–æ–≤–µ—Ç", "–í–Ω–µ—à–Ω–∏–µ —Å–∏–ª—ã",
                    "–ù–∞–¥–µ–∂–¥—ã –∏ —Å—Ç—Ä–∞—Ö–∏", "–ò—Ç–æ–≥"
                ],
                "requires_question": True,
                "subscription": "basic"
            },
            "relationship": {
                "type": "relationship",
                "name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
                "description": "–ê–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É –ª—é–¥—å–º–∏",
                "card_count": 7,
                "positions": [
                    "–í—ã", "–ü–∞—Ä—Ç–Ω–µ—Ä", "–û—Å–Ω–æ–≤–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
                    "–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ", "–°–æ–≤–µ—Ç"
                ],
                "requires_question": False,
                "subscription": "premium"
            },
            "year_ahead": {
                "type": "year_ahead",
                "name": "–ì–æ–¥ –≤–ø–µ—Ä–µ–¥",
                "description": "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤",
                "card_count": 12,
                "positions": [f"–ú–µ—Å—è—Ü {i+1}" for i in range(12)],
                "requires_question": False,
                "subscription": "premium"
            },
            "decision": {
                "type": "decision",
                "name": "–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è",
                "description": "–ü–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä",
                "card_count": 5,
                "positions": ["–°–∏—Ç—É–∞—Ü–∏—è", "–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–°–æ–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"],
                "requires_question": True,
                "subscription": "basic"
            },
            "chakras": {
                "type": "chakras",
                "name": "–ß–∞–∫—Ä—ã",
                "description": "–ê–Ω–∞–ª–∏–∑ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤",
                "card_count": 7,
                "positions": [
                    "–ú—É–ª–∞–¥—Ö–∞—Ä–∞", "–°–≤–∞–¥—Ö–∏—Å—Ç–∞–Ω–∞", "–ú–∞–Ω–∏–ø—É—Ä–∞",
                    "–ê–Ω–∞—Ö–∞—Ç–∞", "–í–∏—à—É–¥—Ö–∞", "–ê–¥–∂–Ω–∞", "–°–∞—Ö–∞—Å—Ä–∞—Ä–∞"
                ],
                "requires_question": False,
                "subscription": "vip"
            }
        }

        return spreads.get(spread_type, spreads["three_cards"])

    def _is_spread_available(
            self,
            spread_type: str,
            user_subscription: str
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."""
        spread_info = self._get_spread_info(spread_type)

        subscription_levels = {
            "free": 0,
            "basic": 1,
            "premium": 2,
            "vip": 3
        }

        required_level = subscription_levels.get(
            spread_info.get("subscription", "free"),
            0
        )
        user_level = subscription_levels.get(user_subscription or "free", 0)

        return user_level >= required_level

    async def _get_card_info(self, card_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ."""
        tarot_service = get_tarot_service()
        return await tarot_service.get_card_info(card_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
def register_tarot_handler(router: Router) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¢–∞—Ä–æ.

    Args:
        router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    handler = TarotHandlers(router)
    handler.register_handlers()
    logger.info("Tarot handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


logger.info("–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¢–∞—Ä–æ –∑–∞–≥—Ä—É–∂–µ–Ω")