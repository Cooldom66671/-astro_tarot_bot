"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–∞ –¢–∞—Ä–æ.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¢–∞—Ä–æ:
- –í—ã–±–æ—Ä –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
- –ò—Å—Ç–æ—Ä–∏—è –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
- –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- –ö–∞—Ä—Ç–∞ –¥–Ω—è

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from datetime import datetime, date, timedelta
from typing import List, Dict, Any, Optional
import random
import asyncio

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from bot.handlers.base import BaseHandler, require_subscription, error_handler
from bot.states import TarotStates
from infrastructure.telegram import (
    Keyboards,
    MessageFactory,
    TarotCardMessage,
    TarotSpreadMessage,
    MessageBuilder,
    MessageStyle,
    MessageEmoji as Emoji
)
from infrastructure import get_unit_of_work
from infrastructure.external_apis import get_llm_manager

logger = logging.getLogger(__name__)


class TarotHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –¢–∞—Ä–æ."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    TAROT_DECK_SIZE = 78
    MAJOR_ARCANA_SIZE = 22

    def register_handlers(self, router: Router) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¢–∞—Ä–æ."""
        # –ö–æ–º–∞–Ω–¥–∞ /tarot
        router.message.register(
            self.cmd_tarot,
            Command("tarot")
        )

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¢–∞—Ä–æ
        router.callback_query.register(
            self.show_tarot_menu,
            F.data == "tarot_menu"
        )

        # –ö–∞—Ä—Ç–∞ –¥–Ω—è
        router.callback_query.register(
            self.daily_card,
            F.data == "tarot_daily_card"
        )

        # –í—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞
        router.callback_query.register(
            self.show_spreads_list,
            F.data == "tarot_spreads"
        )

        router.callback_query.register(
            self.select_spread,
            F.data.startswith("spread_select:")
        )

        # –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
        router.callback_query.register(
            self.start_card_selection,
            F.data.startswith("spread_start:")
        )

        router.callback_query.register(
            self.select_card,
            F.data.startswith("card_select:"),
            StateFilter(TarotStates.selecting_cards)
        )

        router.callback_query.register(
            self.random_card_selection,
            F.data == "card_random",
            StateFilter(TarotStates.selecting_cards)
        )

        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        router.callback_query.register(
            self.show_card_detail,
            F.data.startswith("card_detail:")
        )

        router.callback_query.register(
            self.toggle_favorite,
            F.data.startswith("tarot_favorite:")
        )

        router.callback_query.register(
            self.share_reading,
            F.data.startswith("tarot_share:")
        )

        # –ò—Å—Ç–æ—Ä–∏—è
        router.callback_query.register(
            self.show_history,
            F.data == "tarot_history"
        )

        router.callback_query.register(
            self.show_reading_from_history,
            F.data.startswith("history_reading:")
        )

        router.callback_query.register(
            self.delete_reading,
            F.data.startswith("reading_delete:")
        )

        # –û–±—É—á–µ–Ω–∏–µ
        router.callback_query.register(
            self.show_learning_menu,
            F.data == "tarot_learning"
        )

        router.callback_query.register(
            self.show_lesson,
            F.data.startswith("tarot_lesson:")
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        router.callback_query.register(
            self.show_statistics,
            F.data == "tarot_stats"
        )

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        router.callback_query.register(
            self.navigate_cards,
            F.data.startswith("card_nav:")
        )

    async def cmd_tarot(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /tarot - –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –¢–∞—Ä–æ."""
        await state.clear()

        async with get_unit_of_work() as uow:
            user = await self.get_or_create_user(uow, message.from_user)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await uow.tarot.get_user_statistics(user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è
            daily_card = await uow.tarot.get_daily_card(user.id, date.today())

            keyboard = await Keyboards.tarot_menu(
                subscription_level=user.subscription_plan,
                has_saved_spreads=stats.get("total_spreads", 0) > 0,
                has_daily_card=daily_card is not None
            )

            text = await self._format_tarot_welcome(user, stats, daily_card)

            await message.answer(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    async def show_tarot_menu(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¢–∞—Ä–æ."""
        await state.clear()

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            stats = await uow.tarot.get_user_statistics(user.id)
            daily_card = await uow.tarot.get_daily_card(user.id, date.today())

            keyboard = await Keyboards.tarot_menu(
                subscription_level=user.subscription_plan,
                has_saved_spreads=stats.get("total_spreads", 0) > 0,
                has_daily_card=daily_card is not None
            )

            text = await self._format_tarot_welcome(user, stats, daily_card)

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    @error_handler
    async def daily_card(
            self,
            callback: CallbackQuery,
            **kwargs
    ) -> None:
        """–ö–∞—Ä—Ç–∞ –¥–Ω—è."""
        await callback.answer(f"{Emoji.LOADING} –í—ã—Ç—è–≥–∏–≤–∞—é –∫–∞—Ä—Ç—É...")

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞ –¥–Ω—è
            existing_card = await uow.tarot.get_daily_card(user.id, date.today())

            if existing_card:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É
                card_id = existing_card.cards[0]["id"]
                interpretation = existing_card.interpretation
            else:
                # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
                card_id = random.randint(1, self.TAROT_DECK_SIZE)
                is_reversed = random.choice([True, False])

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç AI
                interpretation = await self._get_card_interpretation(
                    card_id,
                    is_reversed,
                    "daily",
                    user
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                reading = await uow.tarot.create_reading(
                    user_id=user.id,
                    spread_type="daily_card",
                    question=None,
                    cards=[{
                        "id": card_id,
                        "position": 1,
                        "is_reversed": is_reversed
                    }],
                    interpretation=interpretation
                )
                await uow.commit()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            card_info = self._get_card_info(card_id)

            message = TarotCardMessage(
                card_name=card_info["name"],
                is_reversed=existing_card.cards[0]["is_reversed"] if existing_card else is_reversed,
                meaning=interpretation,
                keywords=card_info.get("keywords", []),
                advice=card_info.get("advice", ""),
                context="daily"
            )

            text = await message.format()

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            keyboard = await Keyboards.daily_card_actions(
                can_draw_new=existing_card is None
            )

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    async def show_spreads_list(
            self,
            callback: CallbackQuery,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            keyboard = await Keyboards.spread_selection(
                subscription_level=user.subscription_plan
            )

            text = (
                f"<b>{Emoji.CARDS} –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥</b>\n\n"
                f"–ö–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã "
                f"–≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"
                f"üí° <i>–°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤, "
                f"–µ—Å–ª–∏ –≤—ã –Ω–æ–≤–∏—á–æ–∫ –≤ –¢–∞—Ä–æ</i>"
            )

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    async def select_spread(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞."""
        spread_type = callback.data.split(":")[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∞
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            if not self._is_spread_available(spread_type, user.subscription_plan):
                await callback.answer(
                    "–≠—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ Premium",
                    show_alert=True
                )
                return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–∫–ª–∞–¥–µ
        spread_info = self._get_spread_info(spread_type)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            spread_type=spread_type,
            spread_info=spread_info
        )

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if spread_info.get("requires_question", True):
            await state.set_state(TarotStates.waiting_for_question)

            text = (
                f"<b>{spread_info['name']}</b>\n\n"
                f"{spread_info['description']}\n\n"
                f"üîÆ <b>–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n"
                f"<i>–ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç</i>"
            )

            keyboard = await Keyboards.cancel_only()

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            # –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
            await self.start_card_selection(callback, state)

    async def start_card_selection(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç."""
        data = await state.get_data()
        spread_info = data.get("spread_info") or self._get_spread_info(
            callback.data.split(":")[1]
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
        await state.update_data(
            spread_info=spread_info,
            selected_cards=[],
            current_position=1
        )
        await state.set_state(TarotStates.selecting_cards)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã
        await self._show_card_selection_interface(
            callback,
            state,
            position=1,
            total=spread_info["card_count"]
        )

    async def select_card(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã."""
        card_id = int(callback.data.split(":")[1])

        data = await state.get_data()
        selected_cards = data.get("selected_cards", [])
        current_position = data.get("current_position", 1)
        spread_info = data["spread_info"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ
        if any(card["id"] == card_id for card in selected_cards):
            await callback.answer(
                "–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.",
                show_alert=True
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        is_reversed = random.choice([True, False])
        selected_cards.append({
            "id": card_id,
            "position": current_position,
            "is_reversed": is_reversed,
            "position_name": spread_info["positions"][current_position - 1]
        })

        await state.update_data(
            selected_cards=selected_cards,
            current_position=current_position + 1
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω—ã
        if len(selected_cards) == spread_info["card_count"]:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä
            await self._complete_reading(callback, state)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã
            await self._show_card_selection_interface(
                callback,
                state,
                position=current_position + 1,
                total=spread_info["card_count"]
            )

    async def random_card_selection(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç."""
        data = await state.get_data()
        selected_cards = data.get("selected_cards", [])
        spread_info = data["spread_info"]

        # –ü–æ–ª—É—á–∞–µ–º ID —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
        selected_ids = [card["id"] for card in selected_cards]

        # –í—ã–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã
        available_cards = [
            i for i in range(1, self.TAROT_DECK_SIZE + 1)
            if i not in selected_ids
        ]

        remaining_count = spread_info["card_count"] - len(selected_cards)
        random_cards = random.sample(available_cards, remaining_count)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã
        for i, card_id in enumerate(random_cards):
            position = len(selected_cards) + i + 1
            selected_cards.append({
                "id": card_id,
                "position": position,
                "is_reversed": random.choice([True, False]),
                "position_name": spread_info["positions"][position - 1]
            })

        await state.update_data(selected_cards=selected_cards)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥
        await self._complete_reading(callback, state)

    @require_subscription("basic")
    async def show_history(
            self,
            callback: CallbackQuery,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å–∫–ª–∞–¥–æ–≤."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            readings = await uow.tarot.get_user_readings(
                user.id,
                limit=10,
                offset=0
            )

            if not readings:
                await callback.answer(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤",
                    show_alert=True
                )
                return

            keyboard = await Keyboards.tarot_history(
                readings=readings,
                page=1,
                total_pages=1  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
            )

            text = (
                f"<b>{Emoji.HISTORY} –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤</b>\n\n"
                f"–í—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {len(readings)}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            )

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    async def show_learning_menu(
            self,
            callback: CallbackQuery,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è."""
        keyboard = await Keyboards.tarot_learning()

        text = (
            f"<b>{Emoji.EDUCATION} –û–±—É—á–µ–Ω–∏–µ –¢–∞—Ä–æ</b>\n\n"
            f"–ò–∑—É—á–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç, —Å–∏–º–≤–æ–ª–∏–∫—É –∏ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        )

        await self.edit_or_send_message(
            callback,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    async def show_statistics(
            self,
            callback: CallbackQuery,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¢–∞—Ä–æ."""
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)
            stats = await uow.tarot.get_detailed_statistics(user.id)

            message = MessageFactory.create(
                "tarot_statistics",
                MessageStyle.HTML,
                stats=stats,
                user_name=user.display_name
            )

            keyboard = await Keyboards.back_button("tarot_menu")

            await self.edit_or_send_message(
                callback,
                message,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    async def _format_tarot_welcome(
            self,
            user,
            stats: Dict[str, Any],
            daily_card
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –¢–∞—Ä–æ."""
        builder = MessageBuilder(MessageStyle.HTML)

        builder.add_bold(f"{Emoji.CARDS} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–∞—Ä–æ").add_line(2)

        if daily_card:
            builder.add_text("‚ú® –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞").add_line()
        else:
            builder.add_text("üåü –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è").add_line()

        if stats["total_spreads"] > 0:
            builder.add_line()
            builder.add_text(f"üìä –í–∞—à–∏—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {stats['total_spreads']}").add_line()

            if stats.get("favorite_spread"):
                builder.add_text(f"‚ù§Ô∏è –õ—é–±–∏–º—ã–π: {stats['favorite_spread']}").add_line()

        builder.add_line()
        builder.add_italic("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?")

        return builder.build()

    async def _show_card_selection_interface(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            position: int,
            total: int
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã."""
        data = await state.get_data()
        spread_info = data["spread_info"]
        selected_cards = data.get("selected_cards", [])

        # –¢–µ–∫—Å—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        position_name = spread_info["positions"][position - 1]

        text = (
            f"<b>–í—ã–±–æ—Ä –∫–∞—Ä—Ç: {position} –∏–∑ {total}</b>\n\n"
            f"üéØ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {position_name}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "
            f"'–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
        keyboard = await Keyboards.card_selection(
            excluded_cards=[card["id"] for card in selected_cards],
            show_minor=True,
            current_page=1
        )

        await self.edit_or_send_message(
            callback,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    async def _complete_reading(
            self,
            callback: CallbackQuery,
            state: FSMContext
    ) -> None:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        await callback.answer(f"{Emoji.LOADING} –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é —Ä–∞—Å–∫–ª–∞–¥...")

        data = await state.get_data()
        spread_info = data["spread_info"]
        selected_cards = data["selected_cards"]
        question = data.get("question")

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(callback.from_user.id)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç AI
            interpretation = await self._get_spread_interpretation(
                spread_info["type"],
                selected_cards,
                question,
                user
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            reading = await uow.tarot.create_reading(
                user_id=user.id,
                spread_type=spread_info["type"],
                question=question,
                cards=selected_cards,
                interpretation=interpretation
            )
            await uow.commit()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            message = TarotSpreadMessage(
                spread_name=spread_info["name"],
                question=question,
                cards=selected_cards,
                interpretation=interpretation,
                reading_id=reading.id
            )

            text = await message.format()

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = await Keyboards.reading_result_actions(
                reading_id=reading.id,
                is_favorite=False
            )

            await self.edit_or_send_message(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await state.clear()

    async def _get_card_interpretation(
            self,
            card_id: int,
            is_reversed: bool,
            context: str,
            user
    ) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∫–∞—Ä—Ç—ã –æ—Ç AI."""
        card_info = self._get_card_info(card_id)

        prompt = f"""
        –î–∞–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ "{context}":

        –ö–∞—Ä—Ç–∞: {card_info['name']}
        –ü–æ–ª–æ–∂–µ–Ω–∏–µ: {'–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è' if is_reversed else '–ü—Ä—è–º–æ–µ'}
        –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(card_info.get('keywords', []))}

        –î–∞–π –∫—Ä–∞—Ç–∫—É—é, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
        –£—á–∏—Ç—ã–≤–∞–π –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã. –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º.
        """

        llm = await get_llm_manager()
        interpretation = await llm.generate_completion(
            prompt,
            temperature=0.7,
            max_tokens=200
        )

        return interpretation

    async def _get_spread_interpretation(
            self,
            spread_type: str,
            cards: List[Dict],
            question: Optional[str],
            user
    ) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞ –æ—Ç AI."""
        spread_info = self._get_spread_info(spread_type)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç
        cards_description = []
        for card in cards:
            card_info = self._get_card_info(card["id"])
            cards_description.append(
                f"{card['position_name']}: {card_info['name']} "
                f"({'–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è' if card['is_reversed'] else '–ø—Ä—è–º–∞—è'})"
            )

        prompt = f"""
        –°–¥–µ–ª–∞–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ "{spread_info['name']}".

        {"–í–æ–ø—Ä–æ—Å: " + question if question else "–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"}

        –ö–∞—Ä—Ç—ã:
        {chr(10).join(cards_description)}

        –î–∞–π —Å–≤—è–∑–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞, —É—á–∏—Ç—ã–≤–∞—è:
        1. –ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        2. –í–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
        3. –û–±—â–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞

        –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.
        –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
        """

        llm = await get_llm_manager()
        interpretation = await llm.generate_completion(
            prompt,
            temperature=0.7,
            max_tokens=400
        )

        return interpretation

    def _get_card_info(self, card_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ."""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞

        major_arcana = {
            1: {"name": "–ú–∞–≥", "keywords": ["–≤–æ–ª—è", "–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ", "–¥–µ–π—Å—Ç–≤–∏–µ"]},
            2: {"name": "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "keywords": ["–∏–Ω—Ç—É–∏—Ü–∏—è", "—Ç–∞–π–Ω–∞", "–º—É–¥—Ä–æ—Å—Ç—å"]},
            3: {"name": "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "keywords": ["–ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ", "–∑–∞–±–æ—Ç–∞", "–∏–∑–æ–±–∏–ª–∏–µ"]},
            # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
        }

        if card_id <= self.MAJOR_ARCANA_SIZE:
            return major_arcana.get(card_id, {
                "name": f"–°—Ç–∞—Ä—à–∏–π –ê—Ä–∫–∞–Ω {card_id}",
                "keywords": ["—Ç–∞–π–Ω–∞", "—Å—É–¥—å–±–∞", "–ø—É—Ç—å"]
            })
        else:
            # –ú–ª–∞–¥—à–∏–µ –∞—Ä–∫–∞–Ω—ã
            suits = ["–ñ–µ–∑–ª—ã", "–ö—É–±–∫–∏", "–ú–µ—á–∏", "–ü–µ–Ω—Ç–∞–∫–ª–∏"]
            suit_index = (card_id - self.MAJOR_ARCANA_SIZE - 1) // 14
            card_in_suit = (card_id - self.MAJOR_ARCANA_SIZE - 1) % 14 + 1

            if card_in_suit <= 10:
                name = f"{card_in_suit} {suits[suit_index]}"
            else:
                court = ["–ü–∞–∂", "–†—ã—Ü–∞—Ä—å", "–ö–æ—Ä–æ–ª–µ–≤–∞", "–ö–æ—Ä–æ–ª—å"]
                name = f"{court[card_in_suit - 11]} {suits[suit_index]}"

            return {
                "name": name,
                "keywords": ["—ç–Ω–µ—Ä–≥–∏—è", "–¥–µ–π—Å—Ç–≤–∏–µ", "—Ä–∞–∑–≤–∏—Ç–∏–µ"]
            }

    def _get_spread_info(self, spread_type: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–∫–ª–∞–¥–µ."""
        spreads = {
            "three_cards": {
                "type": "three_cards",
                "name": "–¢—Ä–∏ –∫–∞—Ä—Ç—ã",
                "description": "–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Ç—É–∞—Ü–∏–∏",
                "card_count": 3,
                "positions": ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"],
                "requires_question": True,
                "subscription": "free"
            },
            "celtic_cross": {
                "type": "celtic_cross",
                "name": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥",
                "card_count": 10,
                "positions": [
                    "–°–∏—Ç—É–∞—Ü–∏—è", "–í—ã–∑–æ–≤", "–ü—Ä–æ—à–ª–æ–µ", "–ë—É–¥—É—â–µ–µ",
                    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–í–ª–∏—è–Ω–∏–µ", "–°–æ–≤–µ—Ç", "–í–Ω–µ—à–Ω–∏–µ —Å–∏–ª—ã",
                    "–ù–∞–¥–µ–∂–¥—ã –∏ —Å—Ç—Ä–∞—Ö–∏", "–ò—Ç–æ–≥"
                ],
                "requires_question": True,
                "subscription": "basic"
            },
            "relationship": {
                "type": "relationship",
                "name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
                "description": "–ê–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É –ª—é–¥—å–º–∏",
                "card_count": 7,
                "positions": [
                    "–í—ã", "–ü–∞—Ä—Ç–Ω–µ—Ä", "–û—Å–Ω–æ–≤–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
                    "–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ", "–°–æ–≤–µ—Ç"
                ],
                "requires_question": False,
                "subscription": "premium"
            }
        }

        return spreads.get(spread_type, spreads["three_cards"])

    def _is_spread_available(
            self,
            spread_type: str,
            user_subscription: str
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."""
        spread_info = self._get_spread_info(spread_type)

        subscription_levels = {
            "free": 0,
            "basic": 1,
            "premium": 2,
            "vip": 3
        }

        required_level = subscription_levels.get(
            spread_info.get("subscription", "free"),
            0
        )
        user_level = subscription_levels.get(user_subscription, 0)

        return user_level >= required_level


def setup(router: Router) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¢–∞—Ä–æ."""
    handler = TarotHandlers()
    handler.register_handlers(router)