"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
- –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ (–¢–∞—Ä–æ, –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è, –ü–æ–¥–ø–∏—Å–∫–∞)
- Middleware –∏ —Ñ–∏–ª—å—Ç—Ä—ã

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import List, Optional, Dict, Any, Union

from aiogram import Router, Dispatcher
from aiogram.filters import ExceptionTypeFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramAPIError,
    TelegramRetryAfter
)

logger = logging.getLogger(__name__)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = [
    'setup_handlers',
    'create_dispatcher',
    'setup_middleware',
    'setup_error_handlers',
    'HandlersConfig',
    'register_all_handlers'
]


def setup_handlers(dp: Dispatcher) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from .base import BaseHandler
    from .start import StartHandler
    from .help import HelpHandler
    from .menu import MenuHandler
    from .common import CommonHandler

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
    main_router = Router(name="main")

    # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
    base_router = Router(name="base")
    tarot_router = Router(name="tarot")
    astrology_router = Router(name="astrology")
    subscription_router = Router(name="subscription")
    profile_router = Router(name="profile")
    settings_router = Router(name="settings")
    admin_router = Router(name="admin")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.info("Registering base handlers...")

    # –í–∞–∂–Ω–æ: –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!
    # –°–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –ø–æ—Ç–æ–º –æ–±—â–∏–µ

    # 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ (—Å–∞–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
    start_handler = StartHandler(base_router)
    start_handler.register_handlers()

    # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏
    help_handler = HelpHandler(base_router)
    help_handler.register_handlers()

    # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
    menu_handler = MenuHandler(base_router)
    menu_handler.register_handlers()

    # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª–µ–π –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ

    # –¢–∞—Ä–æ
    try:
        from .tarot import TarotHandler
        tarot_handler = TarotHandler(tarot_router)
        tarot_handler.register_handlers()
        logger.info("Tarot handlers registered")
    except ImportError:
        logger.warning("Tarot handlers not found, creating stub...")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¢–∞—Ä–æ
        _create_stub_handler(tarot_router, "tarot", "üé¥ –†–∞–∑–¥–µ–ª –¢–∞—Ä–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    # –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è
    try:
        from .astrology import AstrologyHandler
        astrology_handler = AstrologyHandler(astrology_router)
        astrology_handler.register_handlers()
        logger.info("Astrology handlers registered")
    except ImportError:
        logger.warning("Astrology handlers not found, creating stub...")
        _create_stub_handler(astrology_router, "astrology", "üîÆ –†–∞–∑–¥–µ–ª –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    # –ü–æ–¥–ø–∏—Å–∫–∞
    try:
        from .subscription import SubscriptionHandler
        subscription_handler = SubscriptionHandler(subscription_router)
        subscription_handler.register_handlers()
        logger.info("Subscription handlers registered")
    except ImportError:
        logger.warning("Subscription handlers not found, creating stub...")
        _create_stub_handler(subscription_router, "subscription", "üíé –†–∞–∑–¥–µ–ª –ü–æ–¥–ø–∏—Å–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    # –ü—Ä–æ—Ñ–∏–ª—å
    try:
        from .profile import ProfileHandler
        profile_handler = ProfileHandler(profile_router)
        profile_handler.register_handlers()
        logger.info("Profile handlers registered")
    except ImportError:
        logger.warning("Profile handlers not found, creating stub...")
        _create_stub_handler(profile_router, "profile", "üë§ –†–∞–∑–¥–µ–ª –ü—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    try:
        from .settings import SettingsHandler
        settings_handler = SettingsHandler(settings_router)
        settings_handler.register_handlers()
        logger.info("Settings handlers registered")
    except ImportError:
        logger.warning("Settings handlers not found, creating stub...")
        _create_stub_handler(settings_router, "settings", "‚öôÔ∏è –†–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    # 5. –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    common_handler = CommonHandler(base_router)
    common_handler.register_handlers()

    # 6. –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        from .admin import AdminHandler
        admin_handler = AdminHandler(admin_router)
        admin_handler.register_handlers()
        logger.info("Admin handlers registered")
    except ImportError:
        logger.info("Admin handlers not found, skipping...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ –≥–ª–∞–≤–Ω–æ–º—É
    main_router.include_router(base_router)
    main_router.include_router(tarot_router)
    main_router.include_router(astrology_router)
    main_router.include_router(subscription_router)
    main_router.include_router(profile_router)
    main_router.include_router(settings_router)

    # –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    try:
        # –í aiogram 3.x –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ observers
        has_handlers = bool(admin_router.message.observers) or bool(admin_router.callback_query.observers)
        if has_handlers:
            main_router.include_router(admin_router)
    except AttributeError:
        # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        main_router.include_router(admin_router)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    dp.include_router(main_router)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
    setup_middleware(dp)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    setup_error_handlers(dp)

    logger.info("All handlers registered successfully")


def _create_stub_handler(router: Router, section: str, message: str) -> None:
    """
    –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

    Args:
        router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        section: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    from aiogram import F
    from aiogram.types import CallbackQuery
    from infrastructure.telegram.keyboards import Keyboards

    @router.callback_query(F.data.startswith(f"{section}:"))
    async def stub_handler(callback: CallbackQuery):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
        keyboard = await Keyboards.back("main_menu")

        await callback.message.answer(
            f"{message}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=keyboard
        )
        await callback.answer()


def setup_middleware(dp: Dispatcher) -> Dict[str, Any]:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ middleware
    """
    middleware_instances = {}

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –º–æ–¥—É–ª–∏
        from bot.middleware.throttling import ThrottlingMiddleware
        from bot.middleware.database import DatabaseMiddleware
        from bot.middleware.logging import LoggingMiddleware
        from bot.middleware.user import UserMiddleware

        logger.info("Setting up middleware...")

        # –í aiogram 3.x middleware —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É
        # 1. Logging middleware (–ø–µ—Ä–≤—ã–π –≤ —Ü–µ–ø–æ—á–∫–µ)
        logging_middleware = LoggingMiddleware()
        dp.update.middleware(logging_middleware)
        middleware_instances['logging'] = logging_middleware

        # 2. Database middleware
        db_middleware = DatabaseMiddleware()
        dp.update.middleware(db_middleware)
        middleware_instances['database'] = db_middleware

        # 3. User middleware
        user_middleware = UserMiddleware()
        dp.update.middleware(user_middleware)
        middleware_instances['user'] = user_middleware

        # 4. Throttling middleware (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
        throttling_middleware = ThrottlingMiddleware()
        dp.message.middleware(throttling_middleware)
        dp.callback_query.middleware(throttling_middleware)
        middleware_instances['throttling'] = throttling_middleware

        logger.info("Middleware setup complete")

    except ImportError as e:
        logger.warning(f"Some middleware modules not found: {e}")
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        try:
            from bot.middleware import BasicMiddleware
            basic_middleware = BasicMiddleware()
            dp.update.middleware(basic_middleware)
            middleware_instances['basic'] = basic_middleware
        except ImportError:
            logger.warning("No middleware configured, bot will work without middleware")

    return middleware_instances


def setup_error_handlers(dp: Dispatcher) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    logger.info("Setting up error handlers...")

    @dp.error(ExceptionTypeFilter(TelegramRetryAfter))
    async def handle_retry_after(event, exception: TelegramRetryAfter):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤."""
        logger.warning(
            f"Rate limit exceeded. Retry after {exception.retry_after} seconds"
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        import asyncio
        await asyncio.sleep(exception.retry_after)
        return True

    @dp.error(ExceptionTypeFilter(TelegramBadRequest))
    async def handle_bad_request(event, exception: TelegramBadRequest):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        logger.error(f"Bad request: {exception}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
        error_text = str(exception).lower()

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –æ—à–∏–±–∫–∏
        ignored_errors = [
            "message is not modified",
            "message to delete not found",
            "query is too old",
            "message can't be deleted for everyone",
            "message to edit not found",
            "callback query id is invalid",
            "message identifier not specified",
            "message to react not found"
        ]

        for ignored in ignored_errors:
            if ignored in error_text:
                logger.debug(f"Ignoring error: {ignored}")
                return True

        return False

    @dp.error(ExceptionTypeFilter(TelegramAPIError))
    async def handle_api_error(event, exception: TelegramAPIError):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫ Telegram API."""
        logger.error(f"Telegram API error: {exception}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
        if "chat not found" in str(exception).lower():
            logger.warning("User blocked the bot")
            return True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if "bot was blocked by the user" in str(exception).lower():
            logger.warning("Bot was blocked by user")
            return True

        return False

    @dp.error()
    async def handle_all_errors(event, exception: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
        logger.error(
            f"Unhandled error: {type(exception).__name__}: {exception}",
            exc_info=exception
        )

        # –ü–æ–ª—É—á–∞–µ–º update –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        update = event.update

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ update –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if update.message:
            logger.debug(f"Error in message from user {update.message.from_user.id}")
        elif update.callback_query:
            logger.debug(f"Error in callback from user {update.callback_query.from_user.id}")

        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            error_message = (
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

            if hasattr(event.update, 'message') and event.update.message:
                await event.update.message.answer(error_message)
            elif hasattr(event.update, 'callback_query') and event.update.callback_query:
                await event.update.callback_query.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert=True
                )
        except Exception as e:
            logger.error(f"Failed to notify user about error: {e}")

        # –í development —Ä–µ–∂–∏–º–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        try:
            from config import settings
            if hasattr(settings, 'environment') and settings.environment == "development":
                return False
        except ImportError:
            pass

        # –í production –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        return True

    logger.info("Error handlers setup complete")


def create_dispatcher(
    storage: Optional[Union[MemoryStorage, RedisStorage]] = None
) -> Dispatcher:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.

    Args:
        storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if storage is None:
        try:
            from config import settings

            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if hasattr(settings, 'redis') and hasattr(settings.redis, 'url') and settings.redis.url:
                try:
                    storage = RedisStorage.from_url(settings.redis.url)
                    logger.info("Using RedisStorage for FSM")
                except Exception as e:
                    logger.warning(f"Failed to connect to Redis: {e}")
                    storage = MemoryStorage()
                    logger.info("Falling back to MemoryStorage for FSM")
            else:
                storage = MemoryStorage()
                logger.info("Using MemoryStorage for FSM")
        except ImportError:
            storage = MemoryStorage()
            logger.info("Using MemoryStorage for FSM (no config found)")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher(storage=storage)

    logger.info("Dispatcher created")
    return dp


class HandlersConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–æ—É—Ç–µ—Ä–æ–≤
    ROUTER_PRIORITIES = {
        "admin": 100,        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        "base": 90,          # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        "tarot": 50,         # –†–∞–∑–¥–µ–ª—ã
        "astrology": 50,
        "subscription": 50,
        "profile": 50,
        "settings": 50,
        "common": 10         # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ throttling (–∑–∞–ø—Ä–æ—Å–æ–≤, —Å–µ–∫—É–Ω–¥)
    THROTTLE_RATES = {
        "default": (5, 60),         # 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        "tarot": (3, 60),           # 3 —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –º–∏–Ω—É—Ç—É
        "astrology": (5, 60),       # 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –≤ –º–∏–Ω—É—Ç—É
        "payment": (10, 3600),      # 10 –ø–æ–ø—ã—Ç–æ–∫ –æ–ø–ª–∞—Ç—ã –≤ —á–∞—Å
        "feedback": (3, 3600),      # 3 –æ—Ç–∑—ã–≤–∞ –≤ —á–∞—Å
        "profile": (10, 60),        # 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø—Ä–æ—Ñ–∏–ª—é –≤ –º–∏–Ω—É—Ç—É
        "admin": (100, 60)          # 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    }

    # –¢–∞–π–º–∞—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    TIMEOUTS = {
        "callback_answer": 3,       # –°–µ–∫—É–Ω–¥—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
        "typing_action": 5,         # –°–µ–∫—É–Ω–¥—ã –¥–ª—è "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        "payment_wait": 300,        # 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
        "onboarding": 600,          # 10 –º–∏–Ω—É—Ç –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        "spread_selection": 180,    # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞
        "birth_data_input": 300     # 5 –º–∏–Ω—É—Ç –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
    }

    # –õ–∏–º–∏—Ç—ã
    LIMITS = {
        "free_spreads_daily": 3,           # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ –¥–µ–Ω—å
        "free_horoscopes_daily": 1,        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –≤ –¥–µ–Ω—å
        "message_length": 4000,            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        "callback_data_length": 64,        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ callback_data
        "saved_spreads_free": 5,           # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–ª—è free
        "saved_spreads_premium": 50,       # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–ª—è premium
        "history_items_per_page": 10,      # –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        "max_file_size": 20 * 1024 * 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (20MB)
    }


# –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

async def register_all_handlers(dp: Dispatcher) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
    """
    setup_handlers(dp)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    logger.info("Async handlers initialization complete")


def get_router_by_name(dp: Dispatcher, name: str) -> Optional[Router]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –ø–æ –∏–º–µ–Ω–∏.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä
        name: –ò–º—è —Ä–æ—É—Ç–µ—Ä–∞

    Returns:
        Router –∏–ª–∏ None
    """
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–æ—É—Ç–µ—Ä–∞
    def find_router(router: Router, target_name: str) -> Optional[Router]:
        if hasattr(router, 'name') and router.name == target_name:
            return router

        # –í aiogram 3.x —Ä–æ—É—Ç–µ—Ä—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ _sub_routers
        if hasattr(router, '_sub_routers'):
            for sub_router in router._sub_routers:
                found = find_router(sub_router, target_name)
                if found:
                    return found

        return None

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    if hasattr(dp, '_router'):
        return find_router(dp._router, name)

    return None


def list_registered_handlers(dp: Dispatcher) -> List[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä

    Returns:
        –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ä–æ—É—Ç–µ—Ä–æ–≤
    """
    routers = []

    def collect_routers(router: Router, prefix: str = ""):
        name = getattr(router, 'name', 'unnamed')
        full_name = f"{prefix}/{name}" if prefix else name
        routers.append(full_name)

        # –°–æ–±–∏—Ä–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
        if hasattr(router, '_sub_routers'):
            for sub_router in router._sub_routers:
                collect_routers(sub_router, full_name)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
    if hasattr(dp, '_router'):
        collect_routers(dp._router)

    return routers


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def handler_registry(router_name: str = "main"):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

    Args:
        router_name: –ò–º—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    Example:
        @handler_registry("tarot")
        class TarotHandler(BaseHandler):
            pass
    """
    def decorator(handler_class):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        if not hasattr(handler_registry, '_registry'):
            handler_registry._registry = {}

        if router_name not in handler_registry._registry:
            handler_registry._registry[router_name] = []

        handler_registry._registry[router_name].append(handler_class)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ –∫–ª–∞—Å—Å—É
        handler_class._router_name = router_name
        handler_class._auto_register = True

        return handler_class

    return decorator


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
handler_registry._registry = {}


logger.info("Handlers module initialized")