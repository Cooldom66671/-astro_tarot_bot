"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
- –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ (–¢–∞—Ä–æ, –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è, –ü–æ–¥–ø–∏—Å–∫–∞)
- Middleware –∏ —Ñ–∏–ª—å—Ç—Ä—ã

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from typing import List, Optional

from aiogram import Router, Dispatcher
from aiogram.filters import ExceptionTypeFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramAPIError,
    TelegramRetryAfter
)

# –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from .base import BaseHandler
from .start import StartHandler
from .help import HelpHandler
from .menu import MenuHandler
from .common import CommonHandler

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
from .tarot import TarotHandlers
from .astrology import AstrologyHandlers
from .subscription import SubscriptionHandlers

logger = logging.getLogger(__name__)

__all__ = [
    'BaseHandler',
    'StartHandler',
    'HelpHandler',
    'MenuHandler',
    'CommonHandler',
    'TarotHandlers',
    'AstrologyHandlers',
    'SubscriptionHandlers',
    'setup_handlers',
    'create_dispatcher'
]


def setup_handlers(dp: Dispatcher) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
    main_router = Router(name="main")

    # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
    base_router = Router(name="base")
    tarot_router = Router(name="tarot")
    astrology_router = Router(name="astrology")
    subscription_router = Router(name="subscription")
    admin_router = Router(name="admin")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.info("Registering base handlers...")

    # –í–∞–∂–Ω–æ: –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!
    # –°–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –ø–æ—Ç–æ–º –æ–±—â–∏–µ

    # 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ (—Å–∞–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
    start_handler = StartHandler()
    start_handler.register_handlers(base_router)

    # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏
    help_handler = HelpHandler()
    help_handler.register_handlers(base_router)

    # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
    menu_handler = MenuHandler()
    menu_handler.register_handlers(base_router)

    # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
    tarot_handlers = TarotHandlers()
    tarot_handlers.register_handlers(tarot_router)

    astrology_handlers = AstrologyHandlers()
    astrology_handlers.register_handlers(astrology_router)

    subscription_handlers = SubscriptionHandlers()
    subscription_handlers.register_handlers(subscription_router)

    # 5. –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    common_handler = CommonHandler()
    common_handler.register_handlers(base_router)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ –≥–ª–∞–≤–Ω–æ–º—É
    main_router.include_router(base_router)
    main_router.include_router(tarot_router)
    main_router.include_router(astrology_router)
    main_router.include_router(subscription_router)
    main_router.include_router(admin_router)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    dp.include_router(main_router)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
    setup_middleware(dp)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    setup_error_handlers(dp)

    logger.info("All handlers registered successfully")


def setup_middleware(dp: Dispatcher) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ middleware
    from bot.middleware import setup_middleware as middleware_setup

    logger.info("Setting up middleware...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É middleware
    middleware_instances = middleware_setup(dp)

    logger.info("Middleware setup complete")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    return middleware_instances


def setup_error_handlers(dp: Dispatcher) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    logger.info("Setting up error handlers...")

    @dp.error(ExceptionTypeFilter(TelegramRetryAfter))
    async def handle_retry_after(event, exception: TelegramRetryAfter):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤."""
        logger.warning(
            f"Rate limit exceeded. Retry after {exception.retry_after} seconds"
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

    @dp.error(ExceptionTypeFilter(TelegramBadRequest))
    async def handle_bad_request(event, exception: TelegramBadRequest):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        logger.error(f"Bad request: {exception}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if "message is not modified" in str(exception):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            return True
        elif "message to delete not found" in str(exception):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            return True

    @dp.error(ExceptionTypeFilter(TelegramAPIError))
    async def handle_api_error(event, exception: TelegramAPIError):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫ Telegram API."""
        logger.error(f"Telegram API error: {exception}")

    @dp.error()
    async def handle_all_errors(event, exception: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
        logger.error(
            f"Unhandled error in {event.router.name}: {exception}",
            exc_info=exception
        )

        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasattr(event.update, 'message') and event.update.message:
            try:
                await event.update.message.answer(
                    "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ /support"
                )
            except:
                pass
        elif hasattr(event.update, 'callback_query') and event.update.callback_query:
            try:
                await event.update.callback_query.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert=True
                )
            except:
                pass

    logger.info("Error handlers setup complete")


def create_dispatcher(
    storage: Optional[MemoryStorage | RedisStorage] = None
) -> Dispatcher:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.

    Args:
        storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ storage –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    if storage is None:
        storage = MemoryStorage()
        logger.info("Using MemoryStorage for FSM")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher(storage=storage)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_handlers(dp)

    return dp


class HandlersConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–æ—É—Ç–µ—Ä–æ–≤
    ROUTER_PRIORITIES = {
        "admin": 100,      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        "base": 90,        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        "tarot": 50,       # –†–∞–∑–¥–µ–ª—ã
        "astrology": 50,
        "subscription": 50,
        "common": 10       # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ throttling
    THROTTLE_RATES = {
        "default": (5, 60),      # 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        "tarot": (3, 60),        # 3 —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –º–∏–Ω—É—Ç—É
        "payment": (10, 3600),   # 10 –ø–æ–ø—ã—Ç–æ–∫ –æ–ø–ª–∞—Ç—ã –≤ —á–∞—Å
        "feedback": (3, 3600),   # 3 –æ—Ç–∑—ã–≤–∞ –≤ —á–∞—Å
        "admin": (100, 60)       # 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    }

    # –¢–∞–π–º–∞—É—Ç—ã
    TIMEOUTS = {
        "callback_answer": 3,    # –°–µ–∫—É–Ω–¥—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
        "typing_action": 5,      # –°–µ–∫—É–Ω–¥—ã –¥–ª—è "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        "payment_wait": 300,     # 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
        "onboarding": 600        # 10 –º–∏–Ω—É—Ç –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    }


# –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

async def register_all_handlers(dp: Dispatcher) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
    """
    setup_handlers(dp)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    logger.info("Async handlers initialization complete")


def get_router_by_name(dp: Dispatcher, name: str) -> Optional[Router]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –ø–æ –∏–º–µ–Ω–∏.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä
        name: –ò–º—è —Ä–æ—É—Ç–µ—Ä–∞

    Returns:
        Router –∏–ª–∏ None
    """
    for router in dp._routers:
        if router.name == name:
            return router
    return None


def list_registered_handlers(dp: Dispatcher) -> List[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä

    Returns:
        –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ä–æ—É—Ç–µ—Ä–æ–≤
    """
    return [router.name for router in dp._routers]