"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ
- –û–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
- –ó–∞–ø—É—Å–∫ onboarding –ø—Ä–æ—Ü–µ—Å—Å–∞
- –í–æ–∑–≤—Ä–∞—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
import re
from typing import Optional, Any
from datetime import datetime, timedelta

from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.handlers.base import (
    BaseHandler,
    error_handler,
    log_action,
    get_or_create_user,
    answer_callback_query,
    edit_or_send_message
)
from infrastructure import get_unit_of_work
from config import settings

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–†
from infrastructure.telegram.keyboards import (
    Keyboards,
    get_main_menu,
    get_welcome_keyboard,
    TimeBasedGreetingKeyboard,
    BirthDataKeyboard,
    get_birth_data_keyboard,
    MainMenuCallbackData,
    BirthDataCallbackData,
    parse_callback_data
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class OnboardingStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    waiting_name = State()
    waiting_birth_date = State()
    waiting_birth_time = State()
    waiting_birth_place = State()
    showing_features = State()
    selecting_interests = State()


class StartHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""

    def register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –ö–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.router.message.register(
            self.cmd_start,
            CommandStart()
        )

        # –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (deep link)
        self.router.message.register(
            self.cmd_start_with_args,
            Command("start"),
            lambda message: len(message.text.split()) > 1
        )

        # –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        self.router.message.register(
            self.process_name,
            OnboardingStates.waiting_name
        )

        self.router.message.register(
            self.process_birth_date,
            OnboardingStates.waiting_birth_date
        )

        self.router.message.register(
            self.process_birth_time,
            OnboardingStates.waiting_birth_time
        )

        self.router.message.register(
            self.process_birth_place,
            OnboardingStates.waiting_birth_place
        )

        # Callback –∫–Ω–æ–ø–æ–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        self.router.callback_query.register(
            self.onboarding_callback,
            F.data.startswith("onboarding:")
        )

        # Callback –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        self.router.callback_query.register(
            self.welcome_callback,
            F.data.startswith("welcome:")
        )

        # –ù–û–í–´–ï CALLBACK –î–õ–Ø –î–ê–ù–ù–´–• –†–û–ñ–î–ï–ù–ò–Ø
        self.router.callback_query.register(
            self.birth_data_callback,
            BirthDataCallbackData.filter()
        )

    @error_handler()
    @log_action("start_command")
    async def cmd_start(
            self,
            message: types.Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        """
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        user_telegram = message.from_user

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user(user_telegram)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        async with get_unit_of_work() as uow:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            user_db = await uow.users.get_by_telegram_id(user_telegram.id)

            if user_db and user_db.birth_date:
                # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏
                await self._handle_existing_user(message, user_db, state)
            else:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
                await self._handle_new_user(message, state)

    @error_handler()
    @log_action("start_with_args")
    async def cmd_start_with_args(
            self,
            message: types.Message,
            state: FSMContext,
            command: CommandObject = None,
            **kwargs
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
            command: –û–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
        args = message.text.split(maxsplit=1)
        if len(args) > 1:
            param = args[1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            if param.startswith("ref_"):
                await self._handle_referral(message, param[4:], state)
            elif param.startswith("promo_"):
                await self._handle_promo(message, param[6:], state)
            elif param.startswith("reading_"):
                await self._handle_shared_reading(message, param[8:], state)
            else:
                # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
                await self.cmd_start(message, state)
        else:
            await self.cmd_start(message, state)

    async def _handle_existing_user(
            self,
            message: types.Message,
            user: Any,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        greeting = self._get_time_based_greeting()
        user_name = user.first_name or "–¥—Ä—É–≥"

        text = (
            f"{greeting}, {user_name}! üëã\n\n"
            f"–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!\n"
            f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?"
        )

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
        keyboard = await get_main_menu(
            user_subscription=user.subscription_plan if hasattr(user, 'subscription_plan') else 'free',
            is_admin=user.telegram_id in settings.bot.admin_ids,
            user_name=user_name
        )

        await message.answer(text, reply_markup=keyboard)

        # –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        time_keyboard = TimeBasedGreetingKeyboard(user_name)
        inline_kb = await time_keyboard.build()

        await message.answer(
            "–í–æ—Ç —á—Ç–æ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–µ–π—á–∞—Å:",
            reply_markup=inline_kb
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
        await self.log_action(
            user.telegram_id,
            "user_returned",
            {"days_since_last_visit": self._calculate_days_since_last_visit(user)}
        )

    async def _handle_new_user(
            self,
            message: types.Message,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_name = message.from_user.first_name or "–¥—Ä—É–≥"

        text = (
            f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n"
            f"–Ø - –ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ë–æ—Ç, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ "
            f"–∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ —Ç–∞—Ä–æ.\n\n"
            f"–ß—Ç–æ —è —É–º–µ—é:\n"
            f"üé¥ –î–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ\n"
            f"‚≠ê –°—Ç—Ä–æ–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
            f"üåô –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n"
            f"üìÖ –î–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n\n"
            f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?"
        )

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ WELCOME –ö–õ–ê–í–ò–ê–¢–£–†–£
        keyboard = await get_welcome_keyboard(user_name)

        await message.answer(text, reply_markup=keyboard)

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.log_action(
            message.from_user.id,
            "new_user_start",
            {"source": "direct"}
        )

    async def _handle_referral(
            self,
            message: types.Message,
            referral_code: str,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        await state.update_data(referral_code=referral_code)

        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        async with get_unit_of_work() as uow:
            referrer = await uow.users.get_by_referral_code(referral_code)

            if referrer:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å
                user = await get_or_create_user(message.from_user)
                user.referred_by = referrer.id
                await uow.users.update(user)
                await uow.commit()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                try:
                    await message.bot.send_message(
                        referrer.telegram_id,
                        f"üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {e}")

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
        await self.cmd_start(message, state)

    async def _handle_promo(
            self,
            message: types.Message,
            promo_code: str,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        await state.update_data(promo_code=promo_code)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        async with get_unit_of_work() as uow:
            promo = await uow.promo_codes.get_by_code(promo_code)

            if promo and promo.is_active:
                text = f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! {promo.description}"
                await message.answer(text)

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
        await self.cmd_start(message, state)

    async def _handle_shared_reading(
            self,
            message: types.Message,
            reading_id: str,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ shared —Ä–∞—Å–∫–ª–∞–¥–∞."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–∫–ª–∞–¥–∞
        await message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–∫–ª–∞–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
        await self.cmd_start(message, state)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫

    async def welcome_callback(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
        action = callback.data.split(":")[-1]

        if action == "start":
            await self._start_onboarding(callback, state)
        elif action == "quick_start":
            await self._quick_start(callback, state)
        elif action == "about":
            await self._show_about(callback, state)
        elif action == "promo":
            await self._enter_promo(callback, state)

        await answer_callback_query(callback)

    # –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –î–ê–ù–ù–´–• –†–û–ñ–î–ï–ù–ò–Ø
    async def birth_data_callback(
            self,
            callback: types.CallbackQuery,
            callback_data: BirthDataCallbackData,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è."""
        action = callback_data.action

        if action == "edit":
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è
            field = callback_data.field
            current_data = await state.get_data()

            keyboard = await get_birth_data_keyboard(
                current_data=current_data,
                editing_field=field
            )

            await callback.message.edit_reply_markup(reply_markup=keyboard)

        elif action == "set_date":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã
            date_str = callback_data.value
            date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
            await state.update_data(birth_date=date_obj)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—â–µ–º—É –≤–∏–¥—É
            current_data = await state.get_data()
            keyboard = await get_birth_data_keyboard(current_data=current_data)

            await callback.message.edit_reply_markup(reply_markup=keyboard)

        elif action == "set_time":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            time_str = callback_data.value
            time_obj = datetime.strptime(time_str, "%H:%M").time()
            await state.update_data(birth_time=time_obj)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—â–µ–º—É –≤–∏–¥—É
            current_data = await state.get_data()
            keyboard = await get_birth_data_keyboard(current_data=current_data)

            await callback.message.edit_reply_markup(reply_markup=keyboard)

        elif action == "set_place":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Å—Ç–∞
            place_data = callback_data.value.split("|")
            await state.update_data(
                birth_place={
                    "name": place_data[0],
                    "lat": float(place_data[1]),
                    "lon": float(place_data[2])
                }
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—â–µ–º—É –≤–∏–¥—É
            current_data = await state.get_data()
            keyboard = await get_birth_data_keyboard(current_data=current_data)

            await callback.message.edit_reply_markup(reply_markup=keyboard)

        elif action == "confirm":
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            await self._save_birth_data(callback.message, state)

        await answer_callback_query(callback)

    async def onboarding_callback(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
        action = callback.data.split(":")[-1]

        if action == "start":
            await self._start_onboarding(callback, state)
        elif action == "skip":
            await self._skip_onboarding(callback, state)
        elif action == "back":
            await self._onboarding_back(callback, state)
        elif action.startswith("interest_"):
            await self._handle_interest_selection(callback, action[9:], state)

        await answer_callback_query(callback)

    # –ú–µ—Ç–æ–¥—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞

    async def _start_onboarding(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
        text = (
            "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è "
            "–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
            "–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç."
        )

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£ –î–õ–Ø –î–ê–ù–ù–´–• –†–û–ñ–î–ï–ù–ò–Ø
        keyboard = await get_birth_data_keyboard()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=keyboard
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(OnboardingStates.waiting_birth_date)

    async def _quick_start(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = await get_main_menu(user_subscription="free")

        await callback.message.answer(
            "‚ö° –û—Ç–ª–∏—á–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n"
            "–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
            reply_markup=keyboard
        )

        await callback.message.delete()

    async def _show_about(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."""
        about_text = (
            "üîÆ <b>–ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ë–æ—Ç</b>\n\n"
            "–í–µ—Ä—Å–∏—è 1.0.0\n\n"
            "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "üé¥ –†–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ - –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ —Å–ª–æ–∂–Ω—ã—Ö\n"
            "‚≠ê –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n"
            "üó∫ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º\n"
            "üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n"
            "üíë –°–∏–Ω–∞—Å—Ç—Ä–∏—è - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä\n"
            "üìö –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
            "<b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π - –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            "‚Ä¢ –ë–∞–∑–æ–≤—ã–π - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ü—Ä–µ–º–∏—É–º - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n"
            "‚Ä¢ VIP - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥\n\n"
            "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @astrotarot_support\n"
            "üì¢ –ù–æ–≤–æ—Å—Ç–∏: @astrotarot_news"
        )

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard = await Keyboards.back("welcome:menu")

        await callback.message.edit_text(
            about_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    async def _enter_promo(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
        from infrastructure.telegram.keyboards import get_promo_code_keyboard

        keyboard = await get_promo_code_keyboard()

        await callback.message.edit_text(
            "üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö:",
            reply_markup=keyboard
        )

    async def _skip_onboarding(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–ü—Ä–æ–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        text = (
            "–•–æ—Ä–æ—à–æ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∂–µ "
            "–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
            "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = await get_main_menu()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=keyboard
        )

    async def _save_birth_data(
            self,
            message: types.Message,
            state: FSMContext
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è."""
        data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(message.chat.id)

            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                if 'birth_date' in data:
                    user.birth_date = data['birth_date']
                if 'birth_time' in data:
                    user.birth_time = data['birth_time']
                if 'birth_place' in data:
                    user.birth_place = data['birth_place']['name']
                    user.birth_lat = data['birth_place']['lat']
                    user.birth_lon = data['birth_place']['lon']

                await uow.users.update(user)
                await uow.commit()

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = await get_main_menu(user_subscription="free")

        await message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã!",
            reply_markup=keyboard
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)

    async def process_name(
            self,
            message: types.Message,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        name = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if len(name) < 2:
            await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        if len(name) > 50:
            await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        await state.update_data(user_name=name)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
        current_data = await state.get_data()
        keyboard = await get_birth_data_keyboard(current_data=current_data)

        await message.answer(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä\n\n"
            f"–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤:",
            reply_markup=keyboard
        )

    async def process_birth_date(
            self,
            message: types.Message,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)."""
        date_text = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
        if not re.match(date_pattern, date_text):
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990"
            )
            return

        try:
            birth_date = datetime.strptime(date_text, "%d.%m.%Y").date()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            age = (datetime.now().date() - birth_date).days / 365.25
            if age < 1 or age > 120:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
                return

        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        await state.update_data(birth_date=birth_date)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_data = await state.get_data()
        keyboard = await get_birth_data_keyboard(current_data=current_data)

        await message.answer(
            "‚úÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            reply_markup=keyboard
        )

    async def process_birth_time(
            self,
            message: types.Message,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)."""
        time_text = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        time_pattern = r'^\d{1,2}:\d{2}$'
        if not re.match(time_pattern, time_text):
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30"
            )
            return

        try:
            birth_time = datetime.strptime(time_text, "%H:%M").time()
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
        await state.update_data(birth_time=birth_time)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_data = await state.get_data()
        keyboard = await get_birth_data_keyboard(current_data=current_data)

        await message.answer(
            "‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
            reply_markup=keyboard
        )

    async def process_birth_place(
            self,
            message: types.Message,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)."""
        place = message.text.strip()

        if len(place) < 2:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–µ–æ–∫–æ–¥–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        # –ü–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.update_data(
            birth_place={
                "name": place,
                "lat": 0.0,  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
                "lon": 0.0   # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
            }
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_data = await state.get_data()
        keyboard = await get_birth_data_keyboard(current_data=current_data)

        await message.answer(
            "‚úÖ –ú–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
            reply_markup=keyboard
        )

    async def _complete_onboarding(
            self,
            message: types.Message,
            state: FSMContext
    ) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(message.from_user.id)

            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if 'user_name' in data:
                    user.display_name = data['user_name']
                if 'birth_date' in data:
                    user.birth_date = data['birth_date']
                if 'birth_time' in data:
                    user.birth_time = data['birth_time']
                if 'birth_place' in data:
                    user.birth_place = data['birth_place']['name']
                    user.birth_lat = data['birth_place'].get('lat', 0.0)
                    user.birth_lon = data['birth_place'].get('lon', 0.0)

                await uow.users.update(user)
                await uow.commit()

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        text = (
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n"
            "‚Ä¢ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞\n"
            "‚Ä¢ –†–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ\n"
            "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
            "–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = await get_main_menu(
            user_subscription=user.subscription_plan if hasattr(user, 'subscription_plan') else 'free',
            user_name=user.display_name if hasattr(user, 'display_name') else message.from_user.first_name
        )

        await message.answer(text, reply_markup=keyboard)

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        await self.log_action(
            message.from_user.id,
            "onboarding_completed",
            data
        )

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    def _get_time_based_greeting(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫."""
        hour = datetime.now().hour

        if 5 <= hour < 12:
            return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        elif 12 <= hour < 17:
            return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
        elif 17 <= hour < 22:
            return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        else:
            return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"

    def _calculate_days_since_last_visit(self, user: Any) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞."""
        if hasattr(user, 'last_active_at') and user.last_active_at:
            return (datetime.now() - user.last_active_at).days
        return 0

    async def _onboarding_back(
            self,
            callback: types.CallbackQuery,
            state: FSMContext
    ) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def _handle_interest_selection(
            self,
            callback: types.CallbackQuery,
            interest: str,
            state: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        await callback.answer(f"–í—ã–±—Ä–∞–Ω –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
def register_start_handler(router: Router) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start.

    Args:
        router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    handler = StartHandler(router)
    handler.register_handlers()
    logger.info("Start handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


logger.info("–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start –∑–∞–≥—Ä—É–∂–µ–Ω")