"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ö–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã /cancel
- –ö–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ /stats
- –ö–æ–º–∞–Ω–¥—É /about
- –û–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
- –û–±—â–∏–µ callback –∫–Ω–æ–ø–∫–∏
- –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from bot.states import FeedbackStates
from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery, ErrorEvent
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from bot.handlers.base import (
    BaseHandler,
    error_handler,
    log_action,
    get_or_create_user,
    answer_callback_query,
    edit_or_send_message
)
from infrastructure import get_unit_of_work
from config import settings

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–†
from infrastructure.telegram.keyboards import (
    InlineKeyboard,
    Keyboards,
    ConfirmationKeyboard,
    BaseCallbackData,
    ConfirmCallbackData,
    RefreshCallbackData,
    parse_callback_data
)

logger = logging.getLogger(__name__)


# –ù–û–í–´–ï CALLBACK DATA
class CommonCallbackData(BaseCallbackData, prefix="common"):
    """Callback data –¥–ª—è –æ–±—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
    target: Optional[str] = None  # –¶–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—è


class FeedbackCallbackData(BaseCallbackData, prefix="feedback"):
    """Callback data –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    rating: Optional[int] = None
    category: Optional[str] = None


class CommonHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π."""

    def register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
        self.router.message.register(
            self.cmd_cancel,
            Command("cancel")
        )

        # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.router.message.register(
            self.cmd_stats,
            Command("stats")
        )

        # –û –±–æ—Ç–µ
        self.router.message.register(
            self.cmd_about,
            Command("about")
        )

        # –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.router.message.register(
            self.cmd_feedback,
            Command("feedback")
        )

        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        self.router.message.register(
            self.cmd_system,
            Command("system")
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.router.message.register(
            self.unknown_command,
            Command()  # –õ—é–±–∞—è –∫–æ–º–∞–Ω–¥–∞
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.router.message.register(
            self.handle_text_message,
            F.text & ~F.text.startswith("/")
        )

        # –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK
        self.router.callback_query.register(
            self.close_message_handler,
            CommonCallbackData.filter(F.action == "close")
        )

        self.router.callback_query.register(
            self.refresh_data_handler,
            RefreshCallbackData.filter()
        )

        self.router.callback_query.register(
            self.confirm_action_handler,
            ConfirmCallbackData.filter()
        )

        self.router.callback_query.register(
            self.feedback_callback_handler,
            FeedbackCallbackData.filter()
        )

        # –°—Ç–∞—Ä—ã–µ callback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.router.callback_query.register(
            self.legacy_callback_handler,
            F.data.in_(["close", "refresh:stats", "refresh:system"])
        )

    @error_handler()
    @log_action("cancel_command")
    async def cmd_cancel(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()

        if current_state is None:
            await message.answer(
                "‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
            )
            return

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ö–ù–û–ü–ö–£
        keyboard = await Keyboards.menu_button()

        await message.answer(
            "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=keyboard
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
        await self.log_action(
            message.from_user.id,
            "action_cancelled",
            {"previous_state": current_state}
        )

    @error_handler()
    @log_action("stats_command")
    async def cmd_stats(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = message.from_user.id

        async with get_unit_of_work() as uow:
            user = await uow.users.get_by_telegram_id(user_id)

            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            tarot_stats = await uow.tarot.get_user_statistics(user.id)
            astro_stats = await uow.astrology.get_user_statistics(user.id)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            text = self._format_user_stats(user, tarot_stats, astro_stats)

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£
            keyboard = InlineKeyboard()
            keyboard.add_button(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data=RefreshCallbackData(
                    action="refresh",
                    target="stats"
                )
            )
            keyboard.add_button(
                text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data=CommonCallbackData(
                    action="detailed",
                    value="stats",
                    target=str(user.id)
                )
            )
            keyboard.add_button(
                text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                callback_data=CommonCallbackData(action="close")
            )

            keyboard.builder.adjust(2, 1)
            kb = await keyboard.build()

            await message.answer(
                text,
                reply_markup=kb,
                parse_mode="HTML"
            )

    @error_handler()
    @log_action("about_command")
    async def cmd_about(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ."""
        text = (
            "ü§ñ <b>–ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ë–æ—Ç</b>\n\n"
            f"–í–µ—Ä—Å–∏—è: {settings.bot.version if hasattr(settings.bot, 'version') else '1.0.0'}\n"
            f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: AI Assistant\n\n"
            "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏:\n"
            "‚Ä¢ üé¥ –†–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ\n"
            "‚Ä¢ üîÆ –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ ‚≠ê –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n"
            "‚Ä¢ üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n"
            "‚Ä¢ üíë –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n\n"
            "–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: @astrotaro_news\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @astrotaro_support\n\n"
            "–° –ª—é–±–æ–≤—å—é –∫ –∑–≤–µ–∑–¥–∞–º –∏ –∫–∞—Ä—Ç–∞–º! ‚ú®"
        )

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£
        keyboard = InlineKeyboard()
        keyboard.add_url_button("üì¢ –ö–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π", "https://t.me/astrotaro_news")
        keyboard.add_url_button("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "https://t.me/astrotaro_support")
        keyboard.add_button(
            text="‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
            callback_data=FeedbackCallbackData(action="start")
        )
        keyboard.add_button(
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            callback_data=CommonCallbackData(action="close")
        )

        keyboard.builder.adjust(1, 1, 1, 1)
        kb = await keyboard.build()

        await message.answer(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    @error_handler()
    async def cmd_feedback(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        text = (
            "üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n"
            "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–∏—Ç—å?"
        )

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£ –î–õ–Ø –í–´–ë–û–†–ê –¢–ò–ü–ê –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò
        keyboard = InlineKeyboard()

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        categories = [
            ("üí°", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "suggestion"),
            ("üêõ", "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", "bug"),
            ("‚≠ê", "–û—Ç–∑—ã–≤ –æ –±–æ—Ç–µ", "review"),
            ("‚ùì", "–í–æ–ø—Ä–æ—Å", "question"),
            ("ü§ù", "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", "partnership")
        ]

        for emoji, text, category in categories:
            keyboard.add_button(
                text=f"{emoji} {text}",
                callback_data=FeedbackCallbackData(
                    action="category",
                    category=category
                )
            )

        keyboard.add_button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=CommonCallbackData(action="close")
        )

        keyboard.builder.adjust(1, 1, 1, 1, 1, 1)
        kb = await keyboard.build()

        await message.answer(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    @error_handler()
    async def cmd_system(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
        if message.from_user.id not in settings.bot.admin_ids:
            await self.unknown_command(message, state)
            return

        # –°–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = await self._get_system_info()

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£
        keyboard = InlineKeyboard()
        keyboard.add_button(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data=RefreshCallbackData(
                action="refresh",
                target="system"
            )
        )
        keyboard.add_button(
            text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data=CommonCallbackData(
                action="admin",
                value="detailed_stats"
            )
        )
        keyboard.add_button(
            text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            callback_data=CommonCallbackData(
                action="admin",
                value="management"
            )
        )
        keyboard.add_button(
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            callback_data=CommonCallbackData(action="close")
        )

        keyboard.builder.adjust(1, 2, 1)
        kb = await keyboard.build()

        await message.answer(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    @error_handler()
    async def unknown_command(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
        command = message.text.split()[0] if message.text else ""

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –∫–æ–º–∞–Ω–¥—ã
        suggestions = self._find_similar_commands(command)

        text = f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}\n\n"

        if suggestions:
            text += "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n"
            for cmd in suggestions[:3]:
                text += f"‚Ä¢ {cmd}\n"
            text += "\n"

        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ï –ö–ù–û–ü–ö–ò
        keyboard = InlineKeyboard()
        keyboard.add_button(
            text="üìö –°–ø—Ä–∞–≤–∫–∞",
            callback_data="help:menu"
        )
        keyboard.add_button(
            text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="main_menu"
        )

        keyboard.builder.adjust(2)
        kb = await keyboard.build()

        await message.answer(text, reply_markup=kb)

    @error_handler()
    async def handle_text_message(
            self,
            message: Message,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        current_state = await state.get_state()

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        if current_state:
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text_lower = message.text.lower()

        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ —Ñ—Ä–∞–∑—ã
        if any(word in text_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "hi", "hello"]):
            await message.answer(self._greeting_response())
        elif any(word in text_lower for word in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "thanks"]):
            await message.answer(self._thanks_response())
        elif any(word in text_lower for word in ["–ø–æ–º–æ—â—å", "–ø–æ–º–æ–≥–∏", "help"]):
            await self._send_help_hint(message)
        elif any(word in text_lower for word in ["—Ç–∞—Ä–æ", "–∫–∞—Ä—Ç—ã", "—Ä–∞—Å–∫–ª–∞–¥"]):
            await self._send_tarot_hint(message)
        elif any(word in text_lower for word in ["–≥–æ—Ä–æ—Å–∫–æ–ø", "–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "–Ω–∞—Ç–∞–ª—å–Ω"]):
            await self._send_horoscope_hint(message)
        elif any(word in text_lower for word in ["–ø–æ–¥–ø–∏—Å–∫–∞", "premium", "–ø—Ä–µ–º–∏—É–º"]):
            await self._send_subscription_hint(message)
        else:
            # –û–±—â–∏–π –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await self._send_default_response(message)

    # –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK

    @error_handler()
    async def close_message_handler(
            self,
            callback: CallbackQuery,
            callback_data: CommonCallbackData,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–ó–∞–∫—Ä—ã—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            await answer_callback_query(
                callback,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                show_alert=True
            )
            return

        await answer_callback_query(callback, "–ó–∞–∫—Ä—ã—Ç–æ")

    @error_handler()
    async def refresh_data_handler(
            self,
            callback: CallbackQuery,
            callback_data: RefreshCallbackData,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."""
        target = callback_data.target

        if target == "stats":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.cmd_stats(callback.message, state)
        elif target == "system":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await self.cmd_system(callback.message, state)

        await answer_callback_query(callback, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    @error_handler()
    async def confirm_action_handler(
            self,
            callback: CallbackQuery,
            callback_data: ConfirmCallbackData,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è."""
        if callback_data.confirmed:
            action = callback_data.action_id
            # –ó–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await answer_callback_query(
                callback,
                f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                show_alert=True
            )
        else:
            await edit_or_send_message(
                callback.message,
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=None
            )
            await answer_callback_query(callback)

    @error_handler()
    async def feedback_callback_handler(
            self,
            callback: CallbackQuery,
            callback_data: FeedbackCallbackData,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        action = callback_data.action

        if action == "start":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await self._show_feedback_categories(callback)
        elif action == "category":
            # –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            category = callback_data.category
            await self._start_feedback_collection(callback, category, state)
        elif action == "rating":
            # –û—Ü–µ–Ω–∫–∞ –±–æ—Ç–∞
            rating = callback_data.rating
            await self._save_rating(callback, rating)

        await answer_callback_query(callback)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö callback (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    @error_handler()
    async def legacy_callback_handler(
            self,
            callback: CallbackQuery,
            state: FSMContext,
            **kwargs
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö callback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        data = callback.data

        if data == "close":
            await self.close_message_handler(
                callback,
                CommonCallbackData(action="close"),
                state,
                **kwargs
            )
        elif data.startswith("refresh:"):
            target = data.split(":")[1]
            await self.refresh_data_handler(
                callback,
                RefreshCallbackData(action="refresh", target=target),
                state,
                **kwargs
            )

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    def _format_user_stats(
            self,
            user: Any,
            tarot_stats: Dict[str, Any],
            astro_stats: Dict[str, Any]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"

        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text += f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
        text += f"‚Ä¢ –ò–º—è: {user.display_name or user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y') if hasattr(user, 'created_at') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"

        # –ü–æ–¥–ø–∏—Å–∫–∞
        if hasattr(user, 'subscription_plan') and user.subscription_plan:
            text += f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: {user.subscription_plan.upper()}\n"

        text += "\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢–∞—Ä–æ
        if tarot_stats:
            text += f"<b>üé¥ –¢–∞—Ä–æ:</b>\n"
            text += f"‚Ä¢ –†–∞—Å–∫–ª–∞–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {tarot_stats.get('total_spreads', 0)}\n"
            text += f"‚Ä¢ –ö–∞—Ä—Ç –≤—ã—Ç—è–Ω—É—Ç–æ: {tarot_stats.get('total_cards', 0)}\n"

            if tarot_stats.get('favorite_card'):
                text += f"‚Ä¢ –õ—é–±–∏–º–∞—è –∫–∞—Ä—Ç–∞: {tarot_stats['favorite_card']}\n"

            text += "\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
        if astro_stats:
            text += f"<b>üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è:</b>\n"
            text += f"‚Ä¢ –ì–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {astro_stats.get('total_horoscopes', 0)}\n"
            text += f"‚Ä¢ –ù–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: {astro_stats.get('natal_charts', 0)}\n"
            text += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {astro_stats.get('synastry_checks', 0)}\n"
            text += "\n"

        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        total_actions = (
            tarot_stats.get('total_spreads', 0) +
            astro_stats.get('total_horoscopes', 0)
        )

        if total_actions > 0:
            text += f"<b>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"

            if total_actions >= 100:
                text += "‚Ä¢ üí´ –ú–∞—Å—Ç–µ—Ä —ç–∑–æ—Ç–µ—Ä–∏–∫–∏ (100+ –¥–µ–π—Å—Ç–≤–∏–π)\n"
            elif total_actions >= 50:
                text += "‚Ä¢ ‚≠ê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏—Å–∫–∞—Ç–µ–ª—å (50+ –¥–µ–π—Å—Ç–≤–∏–π)\n"
            elif total_actions >= 10:
                text += "‚Ä¢ üåü –ù–∞—á–∏–Ω–∞—é—â–∏–π –º–∏—Å—Ç–∏–∫ (10+ –¥–µ–π—Å—Ç–≤–∏–π)\n"
            else:
                text += "‚Ä¢ ‚ú® –ù–æ–≤–∏—á–æ–∫\n"

        return text

    async def _get_system_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
        async with get_unit_of_work() as uow:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = await uow.users.count_total()
            active_today = await uow.users.count_active(days=1)
            active_week = await uow.users.count_active(days=7)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            subscriptions = await uow.subscriptions.count_by_plan()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            tarot_today = await uow.tarot.count_spreads_today()
            horoscopes_today = await uow.astrology.count_horoscopes_today()

        text = (
            "üñ• <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
            f"<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_week}\n\n"
            f"<b>üíé –ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        )

        for plan, count in subscriptions.items():
            text += f"‚Ä¢ {plan.upper()}: {count}\n"

        text += (
            f"\n<b>üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            f"‚Ä¢ –†–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ: {tarot_today}\n"
            f"‚Ä¢ –ì–æ—Ä–æ—Å–∫–æ–ø–æ–≤: {horoscopes_today}\n\n"
            f"<b>üîß –°–∏—Å—Ç–µ–º–∞:</b>\n"
            f"‚Ä¢ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {settings.bot.version if hasattr(settings.bot, 'version') else '1.0.0'}\n"
            f"‚Ä¢ –û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.environment}\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self._get_uptime()}"
        )

        return text

    def _get_uptime(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è uptime
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def _find_similar_commands(self, command: str) -> list:
        """–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –∫–æ–º–∞–Ω–¥—ã."""
        known_commands = [
            "/start", "/help", "/menu", "/tarot", "/astrology",
            "/subscription", "/profile", "/settings", "/stats",
            "/about", "/support", "/cancel"
        ]

        # –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        command = command.lstrip("/")

        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
        suggestions = []

        for known in known_commands:
            known_clean = known.lstrip("/")
            if known_clean.startswith(command[:3]):
                suggestions.append(known)
            elif command in known_clean:
                suggestions.append(known)

        return suggestions[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤

    def _greeting_response(self) -> str:
        """–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""
        return (
            "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é "
            "–∏–ª–∏ /help –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å."
        )

    def _thanks_response(self) -> str:
        """–û—Ç–≤–µ—Ç –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å."""
        return (
            "üíñ –í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! "
            "–†–∞–¥ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º!"
        )

    async def _send_help_hint(self, message: Message) -> None:
        """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –ø–æ–º–æ—â–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        text = (
            "‚ÑπÔ∏è –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
        )

        keyboard = InlineKeyboard()
        keyboard.add_button(text="üìö –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞", callback_data="help:menu")
        keyboard.add_button(text="üí¨ –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="help:support")
        keyboard.add_button(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")

        keyboard.builder.adjust(1, 1, 1)
        kb = await keyboard.build()

        await message.answer(text, reply_markup=kb)

    async def _send_tarot_hint(self, message: Message) -> None:
        """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –¢–∞—Ä–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        text = (
            "üé¥ –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –¢–∞—Ä–æ?\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã:"
        )

        from infrastructure.telegram.keyboards import TarotCallbackData

        keyboard = InlineKeyboard()
        keyboard.add_button(
            text="üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è",
            callback_data=TarotCallbackData(action="daily_card")
        )
        keyboard.add_button(
            text="üîÆ –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å–∫–ª–∞–¥",
            callback_data=TarotCallbackData(action="quick_spread")
        )
        keyboard.add_button(
            text="üìã –í—Å–µ —Ä–∞—Å–∫–ª–∞–¥—ã",
            callback_data=TarotCallbackData(action="menu")
        )

        keyboard.builder.adjust(1, 1, 1)
        kb = await keyboard.build()

        await message.answer(text, reply_markup=kb)

    async def _send_horoscope_hint(self, message: Message) -> None:
        """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –≥–æ—Ä–æ—Å–∫–æ–ø–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        text = (
            "‚≠ê –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø?\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
        )

        from infrastructure.telegram.keyboards import AstrologyCallbackData

        keyboard = InlineKeyboard()
        keyboard.add_button(
            text="‚òÄÔ∏è –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            callback_data=AstrologyCallbackData(action="daily_horoscope")
        )
        keyboard.add_button(
            text="üóì –ù–∞ –Ω–µ–¥–µ–ª—é",
            callback_data=AstrologyCallbackData(action="weekly_horoscope")
        )
        keyboard.add_button(
            text="üîÆ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏",
            callback_data=AstrologyCallbackData(action="menu")
        )

        keyboard.builder.adjust(1, 1, 1)
        kb = await keyboard.build()

        await message.answer(text, reply_markup=kb)

    async def _send_subscription_hint(self, message: Message) -> None:
        """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –ø–æ–¥–ø–∏—Å–∫–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        text = (
            "üíé –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞?\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:"
        )

        from infrastructure.telegram.keyboards import SubscriptionCallbackData

        keyboard = InlineKeyboard()
        keyboard.add_button(
            text="üìã –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã",
            callback_data=SubscriptionCallbackData(action="plans")
        )
        keyboard.add_button(
            text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥",
            callback_data=SubscriptionCallbackData(action="promo")
        )
        keyboard.add_button(
            text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data=SubscriptionCallbackData(action="subscribe")
        )

        keyboard.builder.adjust(1, 1, 1)
        kb = await keyboard.build()

        await message.answer(text, reply_markup=kb)

    async def _send_default_response(self, message: Message) -> None:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
        text = (
            "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
        )

        keyboard = InlineKeyboard()
        keyboard.add_button(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.add_button(text="üé¥ –¢–∞—Ä–æ", callback_data="menu:tarot")
        keyboard.add_button(text="üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", callback_data="menu:astrology")
        keyboard.add_button(text="üìö –°–ø—Ä–∞–≤–∫–∞", callback_data="help:menu")

        keyboard.builder.adjust(2, 2)
        kb = await keyboard.build()

        await message.answer(text, reply_markup=kb)

    async def _show_feedback_categories(self, callback: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        text = (
            "üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:"
        )

        keyboard = InlineKeyboard()

        categories = [
            ("üí°", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "suggestion"),
            ("üêõ", "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", "bug"),
            ("‚≠ê", "–û—Ç–∑—ã–≤ –æ –±–æ—Ç–µ", "review"),
            ("‚ùì", "–í–æ–ø—Ä–æ—Å", "question"),
            ("ü§ù", "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", "partnership")
        ]

        for emoji, text_btn, category in categories:
            keyboard.add_button(
                text=f"{emoji} {text_btn}",
                callback_data=FeedbackCallbackData(
                    action="category",
                    category=category
                )
            )

        keyboard.add_button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=CommonCallbackData(action="close")
        )

        keyboard.builder.adjust(1, 1, 1, 1, 1, 1)
        kb = await keyboard.build()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    async def _start_feedback_collection(
            self,
            callback: CallbackQuery,
            category: str,
            state: FSMContext
    ) -> None:
        """–ù–∞—á–∞—Ç—å —Å–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        category_names = {
            "suggestion": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "bug": "—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
            "review": "–æ—Ç–∑—ã–≤",
            "question": "–≤–æ–ø—Ä–æ—Å",
            "partnership": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ"
        }

        text = (
            f"‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ {category_names.get(category, '—Å–æ–æ–±—â–µ–Ω–∏–µ')}.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )

        keyboard = await Keyboards.cancel()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=keyboard
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(feedback_category=category)
        await state.set_state(FeedbackStates.waiting_for_text)

    async def _save_rating(self, callback: CallbackQuery, rating: int) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –±–æ—Ç–∞."""
        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
        text = (
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {'‚≠ê' * rating}\n\n"
            "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!"
        )

        keyboard = await Keyboards.close()

        await edit_or_send_message(
            callback.message,
            text,
            reply_markup=keyboard
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
def register_common_handler(router: Router) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥.

    Args:
        router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    handler = CommonHandler(router)
    handler.register_handlers()
    logger.info("Common handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


logger.info("–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ –∑–∞–≥—Ä—É–∂–µ–Ω")