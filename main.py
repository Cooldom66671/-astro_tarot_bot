"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ "–ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç".

–≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
- –ù–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling –∏–ª–∏ webhook
- –û–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import asyncio
import logging
import signal
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any
from dataclasses import dataclass

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import redis.asyncio as aioredis
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.redis import RedisJobStore

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from config import settings, logger, setup_logging, get_version
from config.constants import BotCommands

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å BotInfo –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
@dataclass
class BotInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ."""
    NAME: str = "–ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ë–æ—Ç"
    VERSION: str = get_version()
    DESCRIPTION: str = "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫"
    AUTHOR: str = "AI Assistant"

# –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
from infrastructure import (
    init_infrastructure,
    shutdown_infrastructure,
    get_unit_of_work
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º cache_manager –≤–º–µ—Å—Ç–æ get_cache
from infrastructure.cache import cache_manager

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ middleware
from bot.handlers import setup_handlers
from bot.middleware import setup_middleware

# –°–µ—Ä–≤–∏—Å—ã
from services import (
    get_notification_service,
    get_analytics_service,
    get_user_service
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)


class AstroTarotBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        self.settings = settings
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.scheduler: Optional[AsyncIOScheduler] = None
        self._running = False
        self._start_time = datetime.now()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        logger.info("=" * 50)
        logger.info(f"{BotInfo.NAME} v{BotInfo.VERSION}")
        logger.info(f"Environment: {self.settings.environment}")
        logger.info("=" * 50)

        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            logger.info("Initializing infrastructure...")
            await init_infrastructure()

            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
            logger.info("Initializing cache...")
            await cache_manager.init()

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ë–î
            await self._init_database()

            # 4. –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è aiogram 3.3.0
            logger.info("Creating bot instance...")
            self.bot = Bot(
                token=self.settings.bot.token.get_secret_value(),
                parse_mode=ParseMode.HTML
            )

            # 5. –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –Ω—É–∂–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
            logger.info("Creating dispatcher...")
            storage = await self._create_storage()
            self.dp = Dispatcher(storage=storage)

            # 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ middleware
            logger.info("Setting up handlers and middleware...")
            setup_handlers(self.dp)
            setup_middleware(self.dp)

            # 7. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
            logger.info("Setting up scheduler...")
            self.scheduler = await self._setup_scheduler()

            # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
            bot_info = await self.bot.get_me()
            logger.info(f"Bot initialized: @{bot_info.username}")

            # 9. –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
            await self._notify_admins_startup()

            # 10. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            await self._set_bot_commands()

            logger.info("Initialization complete!")

        except Exception as e:
            logger.error(f"Initialization failed: {e}", exc_info=True)
            raise

    async def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        from infrastructure.database import init_database

        try:
            await init_database()
            logger.info("Database initialized")
        except Exception as e:
            logger.error(f"Database initialization failed: {e}")
            # –í development –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –±–µ–∑ –ë–î
            if self.settings.environment != "development":
                raise

    async def _create_storage(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è FSM."""
        if self.settings.redis.url:
            try:
                redis = await aioredis.from_url(
                    self.settings.redis.url,
                    encoding="utf-8",
                    decode_responses=True
                )
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                await redis.ping()
                logger.info("Using Redis storage for FSM")
                return RedisStorage(redis=redis)
            except Exception as e:
                logger.warning(f"Redis unavailable, falling back to memory storage: {e}")

        logger.info("Using memory storage for FSM")
        return MemoryStorage()

    async def _setup_scheduler(self) -> AsyncIOScheduler:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á."""
        jobstores = {}

        # –ï—Å–ª–∏ –µ—Å—Ç—å Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        if self.settings.redis.url:
            try:
                jobstores['default'] = RedisJobStore(
                    host=self.settings.redis.host,
                    port=self.settings.redis.port,
                    db=self.settings.redis.db
                )
                logger.info("Using Redis jobstore for scheduler")
            except Exception as e:
                logger.warning(f"Redis jobstore unavailable: {e}")

        scheduler = AsyncIOScheduler(
            jobstores=jobstores,
            timezone=self.settings.default_timezone,
            job_defaults={
                'coalesce': True,
                'max_instances': 3,
                'misfire_grace_time': 300
            }
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
        if self.settings.features.daily_horoscope:
            scheduler.add_job(
                self._send_daily_horoscopes,
                'cron',
                hour=9,
                minute=0,
                id='daily_horoscopes'
            )

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        scheduler.add_job(
            self._check_expiring_subscriptions,
            'cron',
            hour=12,
            minute=0,
            id='subscription_reminders'
        )

        # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        scheduler.add_job(
            self._collect_daily_stats,
            'cron',
            hour=23,
            minute=55,
            id='daily_stats'
        )

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        scheduler.add_job(
            self._cleanup_old_data,
            'cron',
            hour=3,
            minute=0,
            day_of_week=0,  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            id='weekly_cleanup'
        )

        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00)
        if self.settings.features.enable_backups:
            scheduler.add_job(
                self._backup_database,
                'cron',
                hour=2,
                minute=0,
                id='daily_backup'
            )

        scheduler.start()
        logger.info(f"Scheduler configured with {len(scheduler.get_jobs())} jobs")
        return scheduler

    async def _set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é."""
        from aiogram.types import BotCommand, BotCommandScopeDefault

        commands = [
            BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand(command="menu", description="üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="tarot", description="üé¥ –†–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ"),
            BotCommand(command="astrology", description="‚≠ê –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è"),
            BotCommand(command="subscription", description="üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"),
            BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
            BotCommand(command="stats", description="üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            BotCommand(command="about", description="‚ÑπÔ∏è –û –±–æ—Ç–µ"),
            BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
        ]

        await self.bot.set_my_commands(
            commands=commands,
            scope=BotCommandScopeDefault()
        )

        logger.info("Bot commands set")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        await self.initialize()
        self._running = True

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()

        try:
            if self.settings.bot.use_webhook:
                await self._start_webhook()
            else:
                await self._start_polling()
        except Exception as e:
            logger.error(f"Bot start failed: {e}", exc_info=True)
            raise
        finally:
            await self.shutdown()

    async def _start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""
        logger.info("Starting bot in polling mode...")

        try:
            await self.dp.start_polling(
                self.bot,
                allowed_updates=self.dp.resolve_used_update_types(),
                handle_signals=False  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å–∞–º–∏
            )
        except Exception as e:
            logger.error(f"Polling failed: {e}")
            raise

    async def _start_webhook(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook."""
        logger.info("Starting bot in webhook mode...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        webhook_url = f"{self.settings.bot.webhook_url}/webhook/{self.settings.bot.token.get_secret_value()}"
        await self.bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
            secret_token=self.settings.bot.webhook_secret
        )

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = web.Application()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
        webhook_handler = SimpleRequestHandler(
            dispatcher=self.dp,
            bot=self.bot,
            secret_token=self.settings.bot.webhook_secret
        )

        webhook_handler.register(app, path=f"/webhook/{self.settings.bot.token.get_secret_value()}")
        setup_application(app, self.dp, bot=self.bot)

        # –ó–∞–ø—É—Å–∫–∞–µ–º web-—Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()

        site = web.TCPSite(
            runner,
            host=self.settings.bot.webapp_host,
            port=self.settings.bot.webapp_port
        )

        await site.start()
        logger.info(f"Webhook server started on {self.settings.bot.webapp_host}:{self.settings.bot.webapp_port}")

        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        while self._running:
            await asyncio.sleep(1)

    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        def signal_handler(sig, frame):
            logger.info(f"Received signal {sig}")
            asyncio.create_task(self.shutdown())

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã."""
        if not self._running:
            return

        self._running = False
        logger.info("Shutting down bot...")

        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await self._notify_admins_shutdown()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if self.scheduler:
                self.scheduler.shutdown()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º webhook
            if self.settings.bot.use_webhook:
                await self.bot.delete_webhook()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
            if self.bot:
                await self.bot.session.close()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—ç—à
            await cache_manager.close()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            await shutdown_infrastructure()

            logger.info("Bot shutdown complete")

        except Exception as e:
            logger.error(f"Error during shutdown: {e}")

    # –ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

    async def _send_daily_horoscopes(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤."""
        logger.info("Sending daily horoscopes...")

        notification_service = get_notification_service()
        sent_count = await notification_service.send_daily_horoscopes()

        logger.info(f"Daily horoscopes sent to {sent_count} users")

    async def _check_expiring_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫."""
        logger.info("Checking expiring subscriptions...")

        notification_service = get_notification_service()
        reminded_count = await notification_service.send_subscription_reminders()

        logger.info(f"Subscription reminders sent to {reminded_count} users")

    async def _collect_daily_stats(self):
        """–°–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        logger.info("Collecting daily statistics...")

        analytics_service = get_analytics_service()
        stats = await analytics_service.get_system_statistics()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        await self._send_stats_to_admins(stats)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        async with get_unit_of_work() as uow:
            await uow.analytics.save_daily_stats(stats)
            await uow.commit()

        logger.info("Daily statistics collected and sent")

    async def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("Cleaning up old data...")

        async with get_unit_of_work() as uow:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            deleted_logs = await uow.logs.delete_old(days=30)

            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–æ–ª–µ–µ 180 –¥–Ω–µ–π)
            archived_users = await uow.users.archive_inactive(days=180)

            # –û—á–∏—â–∞–µ–º –∫—ç—à
            await cache_manager.clear()

            await uow.commit()

            logger.info(
                f"Cleanup completed: {deleted_logs} logs deleted, "
                f"{archived_users} users archived"
            )

    async def _backup_database(self):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("Starting database backup...")

        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            # –ù–∞–ø—Ä–∏–º–µ—Ä, pg_dump –¥–ª—è PostgreSQL
            backup_file = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.sql"

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            async with get_unit_of_work() as uow:
                admins = await uow.users.get_admins()
                for admin in admins:
                    await self.bot.send_message(
                        admin.telegram_id,
                        f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}"
                    )

            logger.info(f"Backup completed: {backup_file}")

        except Exception as e:
            logger.error(f"Backup failed: {e}")
            await self._notify_admins_error("Backup failed", str(e))

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º

    async def _notify_admins_startup(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ."""
        if not self.bot:
            return

        admin_ids = self.settings.bot.admin_ids

        message = (
            f"üöÄ <b>{BotInfo.NAME} –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            f"–í–µ—Ä—Å–∏—è: {BotInfo.VERSION}\n"
            f"–û–∫—Ä—É–∂–µ–Ω–∏–µ: {self.settings.environment}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        for admin_id in admin_ids:
            try:
                await self.bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")

    async def _notify_admins_shutdown(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ."""
        if not self.bot:
            return

        admin_ids = self.settings.bot.admin_ids

        message = (
            f"üõë <b>{BotInfo.NAME} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self._get_uptime()}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        for admin_id in admin_ids:
            try:
                await self.bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")

    async def _notify_admins_error(self, error_type: str, error_message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ."""
        if not self.bot:
            return

        admin_ids = self.settings.bot.admin_ids

        message = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ {BotInfo.NAME}</b>\n\n"
            f"–¢–∏–ø: {error_type}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

        for admin_id in admin_ids:
            try:
                await self.bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")

    async def _send_stats_to_admins(self, stats: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∞–º."""
        if not self.bot:
            return

        admin_ids = self.settings.bot.admin_ids

        message = (
            f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('messages_processed', 0)}\n"
            f"üé¥ –†–∞—Å–∫–ª–∞–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('tarot_readings', 0)}\n"
            f"‚≠ê –ì–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {stats.get('horoscopes_viewed', 0)}\n"
            f"üíé –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats.get('new_subscriptions', 0)}\n"
            f"üí∞ –î–æ—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {stats.get('daily_revenue', 0)} ‚ÇΩ"
        )

        for admin_id in admin_ids:
            try:
                await self.bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"Failed to send stats to admin {admin_id}: {e}")

    def _get_uptime(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
        uptime = datetime.now() - self._start_time
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        parts = []
        if days > 0:
            parts.append(f"{days} –¥–Ω.")
        if hours > 0:
            parts.append(f"{hours} —á.")
        if minutes > 0:
            parts.append(f"{minutes} –º–∏–Ω.")
        if seconds > 0 or not parts:
            parts.append(f"{seconds} —Å–µ–∫.")

        return " ".join(parts)


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    bot = AstroTarotBot()

    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot crashed: {e}", exc_info=True)
    finally:
        await bot.shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}", exc_info=True)
        sys.exit(1)