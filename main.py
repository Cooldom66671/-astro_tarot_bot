"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ "–ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç".

–≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
- –ù–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling –∏–ª–∏ webhook
- –û–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024-12-30
"""

import asyncio
import logging
import signal
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from aioredis import Redis

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from bot.config import Settings, setup_logging
from bot.config.constants import BotInfo

# –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
from infrastructure import (
    init_infrastructure,
    shutdown_infrastructure,
    get_unit_of_work
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ middleware
from bot.handlers import create_dispatcher
from bot.middleware import MetricsMiddleware

# –°–µ—Ä–≤–∏—Å—ã
from bot.services import (
    get_notification_service,
    get_analytics_service,
    get_user_service
)

# –£—Ç–∏–ª–∏—Ç—ã
from bot.utils import scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class AstroTarotBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞."""

    def __init__(self, settings: Settings):
        self.settings = settings
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.scheduler = None
        self._running = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        logger.info("=" * 50)
        logger.info(f"{BotInfo.NAME} v{BotInfo.VERSION}")
        logger.info(f"Environment: {self.settings.environment}")
        logger.info("=" * 50)

        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            logger.info("Initializing infrastructure...")
            await init_infrastructure()

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ë–î
            await self._init_database()

            # 3. –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            logger.info("Creating bot instance...")
            self.bot = Bot(
                token=self.settings.bot_token,
                default=DefaultBotProperties(
                    parse_mode=ParseMode.HTML,
                    link_preview_is_disabled=True
                )
            )

            # 4. –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –Ω—É–∂–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
            logger.info("Creating dispatcher...")
            storage = await self._create_storage()
            self.dp = create_dispatcher(storage)

            # 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
            logger.info("Setting up scheduler...")
            self.scheduler = await self._setup_scheduler()

            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
            bot_info = await self.bot.get_me()
            logger.info(f"Bot initialized: @{bot_info.username}")

            # 7. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            await self._set_bot_commands()

            logger.info("Initialization completed successfully!")

        except Exception as e:
            logger.error(f"Failed to initialize bot: {e}", exc_info=True)
            raise

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        if not self.bot or not self.dp:
            raise RuntimeError("Bot not initialized. Call initialize() first.")

        self._running = True

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if self.scheduler:
            self.scheduler.start()
            logger.info("Scheduler started")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω–∞–º
        await self._notify_admins_startup()

        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if self.settings.use_webhook:
            await self._start_webhook()
        else:
            await self._start_polling()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        logger.info("Shutting down bot...")
        self._running = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if self.scheduler and self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("Scheduler stopped")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        await self._notify_admins_shutdown()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        if self.bot:
            await self.bot.session.close()
            logger.info("Bot session closed")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
        await shutdown_infrastructure()

        logger.info("Shutdown completed")

    async def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("Checking database...")

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–≥—Ä–∞—Ü–∏—è –ë–î
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with get_unit_of_work() as uow:
            user_count = await uow.users.count_total()
            logger.info(f"Database connected. Users count: {user_count}")

    async def _create_storage(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ FSM."""
        if self.settings.redis_url:
            try:
                redis = Redis.from_url(self.settings.redis_url)
                await redis.ping()
                logger.info("Using Redis storage for FSM")
                return RedisStorage(redis)
            except Exception as e:
                logger.warning(f"Failed to connect to Redis: {e}")
                logger.info("Falling back to memory storage")

        logger.info("Using memory storage for FSM")
        return MemoryStorage()

    async def _setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á."""
        from apscheduler.schedulers.asyncio import AsyncIOScheduler
        from apscheduler.jobstores.memory import MemoryJobStore

        jobstores = {
            'default': MemoryJobStore()
        }

        scheduler = AsyncIOScheduler(
            jobstores=jobstores,
            timezone='UTC'
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏

        # 1. –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ (9:00 UTC)
        scheduler.add_job(
            self._send_daily_horoscopes,
            'cron',
            hour=9,
            minute=0,
            id='daily_horoscopes'
        )

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
        scheduler.add_job(
            self._check_expiring_subscriptions,
            'interval',
            hours=6,
            id='check_subscriptions'
        )

        # 3. –°–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 23:00)
        scheduler.add_job(
            self._collect_daily_stats,
            'cron',
            hour=23,
            minute=0,
            id='daily_stats'
        )

        # 4. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)
        scheduler.add_job(
            self._cleanup_old_data,
            'cron',
            day_of_week='sun',
            hour=3,
            minute=0,
            id='weekly_cleanup'
        )

        # 5. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00)
        if self.settings.enable_backups:
            scheduler.add_job(
                self._backup_database,
                'cron',
                hour=2,
                minute=0,
                id='daily_backup'
            )

        logger.info(f"Scheduler configured with {len(scheduler.get_jobs())} jobs")
        return scheduler

    async def _set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é."""
        from aiogram.types import BotCommand, BotCommandScopeDefault

        commands = [
            BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand(command="menu", description="üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="tarot", description="üé¥ –†–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ"),
            BotCommand(command="astrology", description="‚≠ê –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è"),
            BotCommand(command="subscription", description="üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"),
            BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
            BotCommand(command="stats", description="üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            BotCommand(command="about", description="‚ÑπÔ∏è –û –±–æ—Ç–µ"),
            BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
        ]

        await self.bot.set_my_commands(
            commands=commands,
            scope=BotCommandScopeDefault()
        )

        logger.info("Bot commands set")

    async def _start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""
        logger.info("Starting bot in polling mode...")

        try:
            await self.dp.start_polling(
                self.bot,
                allowed_updates=self.dp.resolve_used_update_types(),
                handle_signals=False  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å–∞–º–∏
            )
        except Exception as e:
            logger.error(f"Polling failed: {e}")
            raise

    async def _start_webhook(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook."""
        logger.info("Starting bot in webhook mode...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        webhook_url = f"{self.settings.webhook_url}/webhook/{self.settings.bot_token}"
        await self.bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True,
            secret_token=self.settings.webhook_secret
        )

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—Å–∫ web-—Å–µ—Ä–≤–µ—Ä–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp –∏–ª–∏ FastAPI
        logger.info(f"Webhook set: {webhook_url}")

    # –ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

    async def _send_daily_horoscopes(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤."""
        logger.info("Sending daily horoscopes...")

        notification_service = get_notification_service()

        async with get_unit_of_work() as uow:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            users = await uow.users.get_for_daily_notifications()

            sent_count = 0
            for user in users:
                if user.zodiac_sign:
                    success = await notification_service.send_notification(
                        user.id,
                        "daily_horoscope",
                        {"zodiac_sign": user.zodiac_sign},
                        self.bot
                    )
                    if success:
                        sent_count += 1

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.1)

            logger.info(f"Daily horoscopes sent: {sent_count}/{len(users)}")

    async def _check_expiring_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫."""
        logger.info("Checking expiring subscriptions...")

        notification_service = get_notification_service()

        async with get_unit_of_work() as uow:
            # –ü–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
            expiring = await uow.subscriptions.get_expiring(days=3)

            for subscription in expiring:
                if not subscription.notified_expiring:
                    await notification_service.send_notification(
                        subscription.user_id,
                        "subscription_expiring",
                        {
                            "days_left": 3,
                            "plan": subscription.plan_name
                        },
                        self.bot
                    )

                    subscription.notified_expiring = True
                    await uow.commit()

            logger.info(f"Processed {len(expiring)} expiring subscriptions")

    async def _collect_daily_stats(self):
        """–°–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        logger.info("Collecting daily statistics...")

        analytics_service = get_analytics_service()
        stats = await analytics_service.get_system_statistics()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        await self._send_stats_to_admins(stats)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        async with get_unit_of_work() as uow:
            await uow.analytics.save_daily_stats(stats)
            await uow.commit()

        logger.info("Daily statistics collected and sent")

    async def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("Cleaning up old data...")

        async with get_unit_of_work() as uow:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            deleted_logs = await uow.logs.delete_old(days=30)

            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–æ–ª–µ–µ 180 –¥–Ω–µ–π)
            archived_users = await uow.users.archive_inactive(days=180)

            # –û—á–∏—â–∞–µ–º –∫—ç—à
            from infrastructure.cache import get_cache
            cache = await get_cache()
            await cache.clear_expired()

            await uow.commit()

            logger.info(
                f"Cleanup completed: {deleted_logs} logs deleted, "
                f"{archived_users} users archived"
            )

    async def _backup_database(self):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("Starting database backup...")

        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            # –ù–∞–ø—Ä–∏–º–µ—Ä, pg_dump –¥–ª—è PostgreSQL
            backup_file = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.sql"

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            async with get_unit_of_work() as uow:
                admins = await uow.users.get_admins()
                for admin in admins:
                    await self.bot.send_message(
                        admin.telegram_id,
                        f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}"
                    )

            logger.info(f"Backup completed: {backup_file}")

        except Exception as e:
            logger.error(f"Backup failed: {e}")
            await self._notify_admins_error("Backup failed", str(e))

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º

    async def _notify_admins_startup(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ."""
        async with get_unit_of_work() as uow:
            admins = await uow.users.get_admins()

            message = (
                f"üöÄ <b>{BotInfo.NAME} –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                f"–í–µ—Ä—Å–∏—è: {BotInfo.VERSION}\n"
                f"–û–∫—Ä—É–∂–µ–Ω–∏–µ: {self.settings.environment}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )

            for admin in admins:
                try:
                    await self.bot.send_message(
                        admin.telegram_id,
                        message,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin.id}: {e}")

    async def _notify_admins_shutdown(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ."""
        async with get_unit_of_work() as uow:
            admins = await uow.users.get_admins()

            message = (
                f"üõë <b>{BotInfo.NAME} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )

            for admin in admins:
                try:
                    await self.bot.send_message(
                        admin.telegram_id,
                        message,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin.id}: {e}")

    async def _notify_admins_error(self, error_type: str, error_message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ."""
        async with get_unit_of_work() as uow:
            admins = await uow.users.get_admins()

            message = (
                f"üö® <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!</b>\n\n"
                f"–¢–∏–ø: {error_type}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )

            for admin in admins:
                try:
                    await self.bot.send_message(
                        admin.telegram_id,
                        message,
                        parse_mode="HTML"
                    )
                except:
                    pass

    async def _send_stats_to_admins(self, stats: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∞–º."""
        analytics_service = get_analytics_service()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        message = (
            f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats['users']['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['users']['active_today']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['users']['active_week']}\n\n"
            f"<b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['subscriptions']['total_active']}\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['subscriptions']['conversion_rate']:.1f}%\n\n"
            f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            f"‚Ä¢ –†–∞—Å–∫–ª–∞–¥–æ–≤: {stats['usage']['total_spreads']}\n"
            f"‚Ä¢ –ì–æ—Ä–æ—Å–∫–æ–ø–æ–≤: {stats['usage']['total_horoscopes']}\n\n"
            f"<b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
            f"‚Ä¢ –î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: {stats['revenue']['today']:.0f} ‚ÇΩ\n"
            f"‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {stats['revenue']['month']:.0f} ‚ÇΩ\n"
            f"‚Ä¢ ARPU: {stats['revenue']['arpu']:.0f} ‚ÇΩ"
        )

        async with get_unit_of_work() as uow:
            admins = await uow.users.get_admins()

            for admin in admins:
                try:
                    await self.bot.send_message(
                        admin.telegram_id,
                        message,
                        parse_mode="HTML"
                    )
                except:
                    pass


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings = Settings()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = AstroTarotBot(settings)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await bot.initialize()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        loop = asyncio.get_event_loop()

        def signal_handler(sig, frame):
            logger.info(f"Received signal {sig}")
            asyncio.create_task(bot.stop())
            sys.exit(0)

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting bot...")
        await bot.start()

    except Exception as e:
        logger.error(f"Fatal error: {e}", exc_info=True)
        await bot.stop()
        sys.exit(1)


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 10):
        print("Error: Python 3.10+ is required")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Unexpected error: {e}", exc_info=True)
        sys.exit(1)