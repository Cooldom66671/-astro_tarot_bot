"""
–ú–æ–¥—É–ª—å —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ê—Å—Ç—Ä–æ-–¢–∞—Ä–æ –ë–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-—Å—É—â–Ω–æ—Å—Ç—å Subscription –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
–ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–∫–ª—é—á–∞–µ—Ç:
- –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
- –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
- –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
- –õ–æ–≥–∏–∫—É –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    from core.entities import Subscription, PlanFeatures
    from datetime import datetime

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    subscription = Subscription(
        id=1,
        user_id=123,
        plan=SubscriptionPlan.PREMIUM,
        started_at=datetime.now()
    )

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
    price = subscription.calculate_price(
        period_months=12,
        promo_code="NEWYEAR2025"
    )
"""
import re
from dataclasses import dataclass, field
from datetime import datetime, date, timedelta
from decimal import Decimal, ROUND_HALF_UP
from typing import Optional, List, Dict, Any, Tuple
from enum import Enum

from pydantic import BaseModel, Field, validator

from config import (
    logger,
    SubscriptionPlan,
    SubscriptionStatus,
    PaymentStatus,
    Prices,
    Limits,
    Patterns
)
from core.exceptions import (
    ValidationError,
    BusinessLogicError,
    InvalidStateTransitionError
)


# ===== –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –¢–ê–†–ò–§–ù–´–• –ü–õ–ê–ù–û–í =====

@dataclass
class PlanFeatures:
    """–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞."""

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    name: str
    display_name: str
    description: str
    monthly_price: Decimal

    # –õ–∏–º–∏—Ç—ã
    daily_spreads_limit: int
    max_partners: int
    max_forecast_days: int

    # –§—É–Ω–∫—Ü–∏–∏
    full_natal_chart: bool = False
    pdf_reports: bool = False
    compatibility_analysis: bool = False
    extended_forecasts: bool = False
    priority_support: bool = False
    custom_spreads: bool = False

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    api_access: bool = False
    data_export: bool = False
    remove_ads: bool = True

    def get_features_list(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
        features = []

        if self.full_natal_chart:
            features.append("‚úÖ –ü–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã")
        if self.pdf_reports:
            features.append("üìÑ PDF-–æ—Ç—á–µ—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        if self.compatibility_analysis:
            features.append("üíï –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        if self.extended_forecasts:
            features.append("üîÆ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
        if self.priority_support:
            features.append("‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        if self.custom_spreads:
            features.append("üé¥ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ")
        if self.api_access:
            features.append("üîå API –¥–æ—Å—Ç—É–ø")
        if self.data_export:
            features.append("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")

        features.append(f"üìä –î–æ {self.daily_spreads_limit} —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ –¥–µ–Ω—å")
        features.append(f"üë• –î–æ {self.max_partners} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤")

        return features


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤
PLAN_FEATURES: Dict[SubscriptionPlan, PlanFeatures] = {
    SubscriptionPlan.FREE: PlanFeatures(
        name="free",
        display_name="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
        description="–ë–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –±–æ—Ç–æ–º",
        monthly_price=Decimal("0"),
        daily_spreads_limit=Limits.MAX_SPREADS_PER_DAY_FREE,
        max_partners=Limits.MAX_PARTNERS_FREE,
        max_forecast_days=Limits.MAX_FORECAST_DAYS_FREE,
        remove_ads=False
    ),

    SubscriptionPlan.BASIC: PlanFeatures(
        name="basic",
        display_name="–ë–∞–∑–æ–≤—ã–π",
        description="–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        monthly_price=Prices.BASIC_MONTHLY,
        daily_spreads_limit=5,
        max_partners=3,
        max_forecast_days=7,
        full_natal_chart=True,
        compatibility_analysis=True
    ),

    SubscriptionPlan.PREMIUM: PlanFeatures(
        name="premium",
        display_name="–ü—Ä–µ–º–∏—É–º",
        description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–≤–ª–µ—á–µ–Ω–Ω—ã—Ö",
        monthly_price=Prices.PREMIUM_MONTHLY,
        daily_spreads_limit=Limits.MAX_SPREADS_PER_DAY_PREMIUM,
        max_partners=Limits.MAX_PARTNERS_PREMIUM,
        max_forecast_days=30,
        full_natal_chart=True,
        pdf_reports=True,
        compatibility_analysis=True,
        extended_forecasts=True,
        custom_spreads=True
    ),

    SubscriptionPlan.VIP: PlanFeatures(
        name="vip",
        display_name="VIP",
        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
        monthly_price=Prices.VIP_MONTHLY,
        daily_spreads_limit=999,  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –ª–∏–º–∏—Ç–∞
        max_partners=999,
        max_forecast_days=365,
        full_natal_chart=True,
        pdf_reports=True,
        compatibility_analysis=True,
        extended_forecasts=True,
        priority_support=True,
        custom_spreads=True,
        api_access=True,
        data_export=True
    )
}


# ===== –ü–†–û–ú–û–ö–û–î–´ =====

class PromoCodeType(str, Enum):
    """–¢–∏–ø—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
    PERCENTAGE = "percentage"  # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞
    FIXED = "fixed"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞
    TRIAL = "trial"  # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    UPGRADE = "upgrade"  # –ê–ø–≥—Ä–µ–π–¥ –ø–ª–∞–Ω–∞


@dataclass
class PromoCode:
    """–ü—Ä–æ–º–æ–∫–æ–¥."""

    code: str
    type: PromoCodeType
    value: Decimal  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏–ª–∏ —Å—É–º–º–∞ —Å–∫–∏–¥–∫–∏
    description: str

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    valid_from: datetime
    valid_until: datetime
    max_uses: Optional[int] = None
    used_count: int = 0
    min_amount: Optional[Decimal] = None  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
    allowed_plans: Optional[List[SubscriptionPlan]] = None  # –î–ª—è –∫–∞–∫–∏—Ö –ø–ª–∞–Ω–æ–≤

    # –§–ª–∞–≥–∏
    is_active: bool = True
    first_time_only: bool = False  # –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def validate_code(self, code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞."""
        return bool(re.match(Patterns.PROMO_CODE, code.upper()))

    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
        now = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if not self.is_active:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã
        if now < self.valid_from or now > self.valid_until:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if self.max_uses and self.used_count >= self.max_uses:
            return False

        return True

    def can_apply_to_plan(self, plan: SubscriptionPlan) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –ø–ª–∞–Ω—É."""
        if not self.allowed_plans:
            return True
        return plan in self.allowed_plans

    def calculate_discount(self, amount: Decimal) -> Decimal:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–∏–¥–∫—É."""
        if self.type == PromoCodeType.PERCENTAGE:
            discount = amount * (self.value / 100)
        elif self.type == PromoCodeType.FIXED:
            discount = min(self.value, amount)
        else:
            discount = Decimal("0")

        return discount.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)


# ===== –ò–°–¢–û–†–ò–Ø –ü–õ–ê–¢–ï–ñ–ï–ô =====

@dataclass
class Payment:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ."""

    id: str  # ID –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    subscription_id: int
    amount: Decimal
    currency: str = "RUB"
    status: PaymentStatus = PaymentStatus.PENDING

    # –î–µ—Ç–∞–ª–∏
    description: str = ""
    payment_method: Optional[str] = None
    promo_code: Optional[str] = None
    discount_amount: Decimal = Decimal("0")

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at: datetime = field(default_factory=datetime.now)
    updated_at: datetime = field(default_factory=datetime.now)
    paid_at: Optional[datetime] = None

    # –î–∞–Ω–Ω—ã–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    provider_data: Dict[str, Any] = field(default_factory=dict)

    @property
    def final_amount(self) -> Decimal:
        """–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏."""
        return self.amount - self.discount_amount

    @property
    def is_successful(self) -> bool:
        """–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂."""
        return self.status == PaymentStatus.SUCCEEDED

    @property
    def is_pending(self) -> bool:
        """–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã."""
        return self.status in [PaymentStatus.PENDING, PaymentStatus.PROCESSING]

    def to_receipt_text(self) -> str:
        """–¢–µ–∫—Å—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        lines = [
            f"üßæ –ß–µ–∫ ‚Ññ{self.id[:8]}",
            f"–î–∞—Ç–∞: {self.created_at.strftime('%d.%m.%Y %H:%M')}",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {self.description}",
            f"–°—É–º–º–∞: {self.amount} {self.currency}"
        ]

        if self.discount_amount > 0:
            lines.append(f"–°–∫–∏–¥–∫–∞: -{self.discount_amount} {self.currency}")
            lines.append(f"–ò—Ç–æ–≥–æ: {self.final_amount} {self.currency}")

        if self.payment_method:
            lines.append(f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {self.payment_method}")

        lines.append(f"–°—Ç–∞—Ç—É—Å: {self._get_status_text()}")

        return "\n".join(lines)

    def _get_status_text(self) -> str:
        """–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        status_texts = {
            PaymentStatus.PENDING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            PaymentStatus.PROCESSING: "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
            PaymentStatus.SUCCEEDED: "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ",
            PaymentStatus.FAILED: "‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã",
            PaymentStatus.CANCELLED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            PaymentStatus.REFUNDED: "üí∏ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ"
        }
        return status_texts.get(self.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


# ===== –û–°–ù–û–í–ù–ê–Ø –°–£–©–ù–û–°–¢–¨ –ü–û–î–ü–ò–°–ö–ò =====

@dataclass
class Subscription:
    """
    –°—É—â–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–¥–ø–∏—Å–æ–∫, –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.
    """

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    id: int
    user_id: int
    plan: SubscriptionPlan = SubscriptionPlan.FREE
    status: SubscriptionStatus = SubscriptionStatus.FREE

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at: datetime = field(default_factory=datetime.now)
    started_at: Optional[datetime] = None
    expires_at: Optional[datetime] = None
    cancelled_at: Optional[datetime] = None

    # –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    auto_renewal: bool = False
    next_payment_date: Optional[date] = None
    payment_method_id: Optional[str] = None  # ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã

    # –ò—Å—Ç–æ—Ä–∏—è
    payments: List[Payment] = field(default_factory=list)
    status_history: List[Tuple[SubscriptionStatus, datetime]] = field(default_factory=list)

    # –ü—Ä–æ–º–æ–∫–æ–¥—ã
    applied_promo_codes: List[str] = field(default_factory=list)

    def __post_init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."""
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: id={self.id}, user_id={self.user_id}, plan={self.plan}")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        if not self.status_history:
            self.status_history.append((self.status, self.created_at))

    # ===== –°–í–û–ô–°–¢–í–ê =====

    @property
    def features(self) -> PlanFeatures:
        """–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞."""
        return PLAN_FEATURES[self.plan]

    @property
    def is_active(self) -> bool:
        """–ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞."""
        if self.status != SubscriptionStatus.ACTIVE:
            return False

        if self.expires_at and datetime.now() > self.expires_at:
            return False

        return True

    @property
    def is_free(self) -> bool:
        """–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω."""
        return self.plan == SubscriptionPlan.FREE

    @property
    def days_left(self) -> Optional[int]:
        """–î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è."""
        if not self.expires_at or not self.is_active:
            return None

        delta = self.expires_at - datetime.now()
        return max(0, delta.days)

    @property
    def is_expiring_soon(self) -> bool:
        """–°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç (–º–µ–Ω–µ–µ 3 –¥–Ω–µ–π)."""
        days = self.days_left
        return days is not None and 0 < days <= 3

    @property
    def total_spent(self) -> Decimal:
        """–û–±—â–∞—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞."""
        return sum(
            p.final_amount for p in self.payments
            if p.is_successful
        )

    @property
    def successful_payments_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π."""
        return sum(1 for p in self.payments if p.is_successful)

    @property
    def has_saved_payment_method(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."""
        return self.payment_method_id is not None

    # ===== –ú–ï–¢–û–î–´ –†–ê–°–ß–ï–¢–ê –°–¢–û–ò–ú–û–°–¢–ò =====

    def calculate_price(
            self,
            plan: Optional[SubscriptionPlan] = None,
            period_months: int = 1,
            promo_code: Optional[PromoCode] = None
    ) -> Tuple[Decimal, Decimal]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.

        Args:
            plan: –ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ (–µ—Å–ª–∏ None - —Ç–µ–∫—É—â–∏–π)
            period_months: –ü–µ—Ä–∏–æ–¥ –≤ –º–µ—Å—è—Ü–∞—Ö
            promo_code: –ü—Ä–æ–º–æ–∫–æ–¥

        Returns:
            Tuple[—Ü–µ–Ω–∞_–±–µ–∑_—Å–∫–∏–¥–∫–∏, —Ü–µ–Ω–∞_—Å–æ_—Å–∫–∏–¥–∫–æ–π]
        """
        if plan is None:
            plan = self.plan

        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
        features = PLAN_FEATURES[plan]
        base_price = features.monthly_price * period_months

        # –°–∫–∏–¥–∫–∞ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        if period_months >= 12:
            yearly_discount = base_price * Prices.ANNUAL_DISCOUNT
            base_price -= yearly_discount

        # –ü—Ä–æ–º–æ–∫–æ–¥
        discount = Decimal("0")
        if promo_code and promo_code.is_valid():
            if promo_code.can_apply_to_plan(plan):
                if promo_code.min_amount is None or base_price >= promo_code.min_amount:
                    discount = promo_code.calculate_discount(base_price)

        final_price = base_price - discount

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫–æ–ø–µ–µ–∫
        base_price = base_price.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
        final_price = final_price.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)

        return base_price, final_price

    # ===== –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–ú =====

    def can_transition_to(self, new_status: SubscriptionStatus) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å."""
        allowed_transitions = {
            SubscriptionStatus.FREE: [
                SubscriptionStatus.ACTIVE
            ],
            SubscriptionStatus.ACTIVE: [
                SubscriptionStatus.EXPIRED,
                SubscriptionStatus.CANCELLED,
                SubscriptionStatus.SUSPENDED
            ],
            SubscriptionStatus.EXPIRED: [
                SubscriptionStatus.ACTIVE
            ],
            SubscriptionStatus.CANCELLED: [
                SubscriptionStatus.ACTIVE
            ],
            SubscriptionStatus.SUSPENDED: [
                SubscriptionStatus.ACTIVE,
                SubscriptionStatus.CANCELLED
            ]
        }

        allowed = allowed_transitions.get(self.status, [])
        return new_status in allowed

    def change_status(self, new_status: SubscriptionStatus) -> None:
        """–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏."""
        if not self.can_transition_to(new_status):
            raise InvalidStateTransitionError(
                entity_type="Subscription",
                current_state=self.status.value,
                target_state=new_status.value,
                allowed_states=[s.value for s in self._get_allowed_statuses()]
            )

        old_status = self.status
        self.status = new_status
        self.status_history.append((new_status, datetime.now()))

        logger.info(
            f"–ü–æ–¥–ø–∏—Å–∫–∞ {self.id} –∏–∑–º–µ–Ω–∏–ª–∞ —Å—Ç–∞—Ç—É—Å: {old_status.value} -> {new_status.value}"
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
        if new_status == SubscriptionStatus.CANCELLED:
            self.cancelled_at = datetime.now()
            self.auto_renewal = False

    def _get_allowed_statuses(self) -> List[SubscriptionStatus]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã."""
        # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç can_transition_to, –Ω–æ –Ω—É–∂–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        transitions_map = {
            SubscriptionStatus.FREE: [SubscriptionStatus.ACTIVE],
            SubscriptionStatus.ACTIVE: [
                SubscriptionStatus.EXPIRED,
                SubscriptionStatus.CANCELLED,
                SubscriptionStatus.SUSPENDED
            ],
            SubscriptionStatus.EXPIRED: [SubscriptionStatus.ACTIVE],
            SubscriptionStatus.CANCELLED: [SubscriptionStatus.ACTIVE],
            SubscriptionStatus.SUSPENDED: [
                SubscriptionStatus.ACTIVE,
                SubscriptionStatus.CANCELLED
            ]
        }
        return transitions_map.get(self.status, [])

    # ===== –ú–ï–¢–û–î–´ –ê–ö–¢–ò–í–ê–¶–ò–ò –ò –ü–†–û–î–õ–ï–ù–ò–Ø =====

    def activate(
            self,
            plan: SubscriptionPlan,
            period_months: int = 1,
            payment: Optional[Payment] = None
    ) -> None:
        """
        –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.

        Args:
            plan: –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
            period_months: –ü–µ—Ä–∏–æ–¥ –≤ –º–µ—Å—è—Ü–∞—Ö
            payment: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
        """
        self.plan = plan
        self.started_at = datetime.now()
        self.expires_at = self.started_at + timedelta(days=30 * period_months)
        self.change_status(SubscriptionStatus.ACTIVE)

        if payment:
            self.payments.append(payment)

        logger.info(
            f"–ü–æ–¥–ø–∏—Å–∫–∞ {self.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: –ø–ª–∞–Ω={plan.value}, "
            f"–ø–µ—Ä–∏–æ–¥={period_months}–º–µ—Å, –∏—Å—Ç–µ–∫–∞–µ—Ç={self.expires_at}"
        )

    def extend(self, period_months: int = 1, payment: Optional[Payment] = None) -> None:
        """–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."""
        if not self.expires_at:
            raise BusinessLogicError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –±–µ–∑ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")

        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –æ—Ç —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞
        base_date = max(self.expires_at, datetime.now())
        self.expires_at = base_date + timedelta(days=30 * period_months)

        if self.status == SubscriptionStatus.EXPIRED:
            self.change_status(SubscriptionStatus.ACTIVE)

        if payment:
            self.payments.append(payment)

        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ {self.id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {self.expires_at}")

    def cancel(self, immediate: bool = False) -> None:
        """
        –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.

        Args:
            immediate: –û—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞
        """
        self.auto_renewal = False

        if immediate:
            self.change_status(SubscriptionStatus.CANCELLED)
            self.expires_at = datetime.now()
        else:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ {self.id} –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ {self.expires_at}")

    def suspend(self, reason: str) -> None:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."""
        self.change_status(SubscriptionStatus.SUSPENDED)
        logger.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ {self.id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

    # ===== –ú–ï–¢–û–î–´ –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê =====

    def has_feature(self, feature: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏."""
        if not self.is_active:
            return False

        features_dict = {
            "full_natal_chart": self.features.full_natal_chart,
            "pdf_reports": self.features.pdf_reports,
            "compatibility_analysis": self.features.compatibility_analysis,
            "extended_forecasts": self.features.extended_forecasts,
            "priority_support": self.features.priority_support,
            "custom_spreads": self.features.custom_spreads,
            "api_access": self.features.api_access,
            "data_export": self.features.data_export,
        }

        return features_dict.get(feature, False)

    def check_daily_limit(self, current_count: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç."""
        return current_count < self.features.daily_spreads_limit

    def check_partners_limit(self, current_count: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤."""
        return current_count < self.features.max_partners

    # ===== –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ü–õ–ê–¢–ï–ñ–ê–ú–ò =====

    def add_payment(self, payment: Payment) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂."""
        self.payments.append(payment)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–ª–∞—Ç–µ–∂ {payment.id} –∫ –ø–æ–¥–ø–∏—Å–∫–µ {self.id}")

    def get_last_payment(self) -> Optional[Payment]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂."""
        if not self.payments:
            return None
        return sorted(self.payments, key=lambda p: p.created_at)[-1]

    def get_successful_payments(self) -> List[Payment]:
        """–ü–æ–ª—É—á–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏."""
        return [p for p in self.payments if p.is_successful]

    # ===== –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====

    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return {
            "id": self.id,
            "user_id": self.user_id,
            "plan": self.plan.value,
            "status": self.status.value,
            "is_active": self.is_active,
            "features": self.features.get_features_list(),
            "started_at": self.started_at.isoformat() if self.started_at else None,
            "expires_at": self.expires_at.isoformat() if self.expires_at else None,
            "days_left": self.days_left,
            "auto_renewal": self.auto_renewal,
            "total_spent": str(self.total_spent),
            "payments_count": self.successful_payments_count,
        }

    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ."""
        return f"Subscription(id={self.id}, user={self.user_id}, plan={self.plan.value}, status={self.status.value})"


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    "Subscription",
    "PlanFeatures",
    "PLAN_FEATURES",
    "PromoCode",
    "PromoCodeType",
    "Payment",
]